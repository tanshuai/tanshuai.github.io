(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1084],{3759:function(e,n,t){var i={"./menu.ar.json":[1510,1510],"./menu.da.json":[6781,6781],"./menu.de.json":[8607,8607],"./menu.en.json":[9053,9053],"./menu.es.json":[1107,1107],"./menu.fi.json":[936,936],"./menu.fr.json":[4902,4902],"./menu.he.json":[4403,4403],"./menu.it.json":[9766,9766],"./menu.ja.json":[7634,7634],"./menu.ko.json":[2040,2040],"./menu.nl.json":[5389,5389],"./menu.no.json":[1662,1662],"./menu.pt.json":[2562,2562],"./menu.ru.json":[7364,7364],"./menu.sv.json":[7569,7569],"./menu.th.json":[7793,7793],"./menu.tr.json":[4608,4608],"./menu.vi.json":[545,545],"./menu.zh-hant.json":[7752,7752],"./menu.zh.json":[5427,5427]};function a(e){if(!t.o(i,e))return Promise.resolve().then(function(){var n=Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n});var n=i[e],a=n[0];return t.e(n[1]).then(function(){return t.t(a,19)})}a.keys=function(){return Object.keys(i)},a.id=3759,e.exports=a},8621:function(e,n,t){var i={"./ar.json":[1861,1861],"./da.json":[5130,5130],"./de.json":[3650,3650],"./en.json":[7890,7890],"./es.json":[8559,8559],"./fi.json":[7549,7549],"./fr.json":[5345,5345],"./he.json":[9659,9659],"./it.json":[5177,5177],"./ja.json":[3302,3302],"./ko.json":[1594,1594],"./nl.json":[8757,8757],"./no.json":[3524,3524],"./pt.json":[2140,2140],"./ru.json":[8827,8827],"./sv.json":[1794,1794],"./th.json":[6843,6843],"./tr.json":[6720,6720],"./vi.json":[8068,8068],"./zh-hant.json":[8359,8359],"./zh.json":[4355,4355]};function a(e){if(!t.o(i,e))return Promise.resolve().then(function(){var n=Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n});var n=i[e],a=n[0];return t.e(n[1]).then(function(){return t.t(a,19)})}a.keys=function(){return Object.keys(i)},a.id=8621,e.exports=a},352:function(e,n,t){Promise.resolve().then(t.bind(t,787)),Promise.resolve().then(t.bind(t,5045)),Promise.resolve().then(t.bind(t,7743)),Promise.resolve().then(t.bind(t,8958))},8755:function(e,n,t){"use strict";t.d(n,{Z:function(){return s}});var i=t(7437),a=t(231),o=t.n(a),r=t(145),s=e=>{let{href:n,passHref:t,...a}=e;return r.site.Yw?(0,i.jsx)("a",{href:n,...a}):(0,i.jsx)(o(),{href:n,passHref:t,...a})}},5159:function(e,n,t){"use strict";var i=t(7437),a=t(145),o=t(4410),r=t(9512),s=t(8755),l=t(2265);n.Z=e=>{let{src:n,lang:t}=e,{logo:d,logo_darkmode:u,logo_width:c,logo_height:m,logo_text:g,title:p}=a.site,{theme:h,resolvedTheme:f}=(0,r.F)(),[k,b]=(0,l.useState)(!1);(0,l.useEffect)(()=>b(!0),[]);let v=n||(k&&("dark"===h||"dark"===f)?u:d);return(0,i.jsx)(s.Z,{href:(0,o.b)(t,""),className:"navbar-brand inline-block",children:v?(0,i.jsx)("img",{width:2*c.replace("px",""),height:2*m.replace("px",""),src:v,alt:p,style:{height:m.replace("px","")+"px",width:c.replace("px","")+"px"}}):g||p})}},787:function(e,n,t){"use strict";t.d(n,{default:function(){return d}});var i=t(7437),a=JSON.parse('[{"lang":"en","group":"blog","slug":"blog/aws-codecommit-the-githubs-large-file-storage-git-lfs-free-alternative","frontmatter":{"title":"AWS CodeCommit: The GitHub Large File Storage (Git LFS) Free Alternative","description":"Discover how AWS CodeCommit serves as a cost-effective and efficient alternative to GitHub\'s Large File Storage (Git LFS). This article covers the limitations of Git LFS, the benefits of using AWS CodeCommit for large file storage, and provides a step-by-step guide for migrating from Git LFS to CodeCommit. Enhance your development workflow with AWS\'s scalable and secure infrastructure.","date":"2022-02-09T00:00:00.000Z","author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["Software Development"],"draft":false},"content":"\\nAWS CodeCommit offers a robust alternative to GitHub\'s Large File Storage (Git LFS) service, providing an efficient solution for managing large files in your Git repositories.\\n\\n## Why You Should Reconsider Using Git LFS\\n\\nWhile Git LFS is a popular choice for handling large files in Git repositories, it has its limitations and challenges. Git LFS requires additional setup and management, which can complicate the development workflow. Additionally, the storage and bandwidth costs associated with Git LFS can escalate quickly, particularly for projects with numerous large files or extensive collaboration.\\n\\n## Why GitHub\'s Large File Storage Service Isn\'t Perfect\\n\\nGitHub\'s Large File Storage service, while useful, has inherent drawbacks. The primary concern is the cost associated with storage and bandwidth, which can become prohibitive for larger projects. Furthermore, managing Git LFS can be cumbersome, requiring developers to install and configure the LFS client, track specific files, and deal with potential merge conflicts that arise due to the handling of large files separately from the rest of the repository.\\n\\n## Why Use AWS CodeCommit to Store Large Files in Git\\n\\nAWS CodeCommit provides a compelling alternative for storing large files in Git repositories without the need for Git LFS. CodeCommit is a fully managed source control service that seamlessly integrates with other AWS services, offering robust scalability, security, and cost-efficiency. By leveraging CodeCommit, developers can avoid the additional overhead of managing Git LFS while benefiting from AWS\'s robust infrastructure and pay-as-you-go pricing model.\\n\\n## What Are the Limitations of AWS CodeCommit Compared to GitHub\\n\\nDespite its advantages, AWS CodeCommit does have some limitations when compared to GitHub. GitHub\'s extensive community support, rich ecosystem of integrations, and advanced features like GitHub Actions and GitHub Pages may not be fully replicated in CodeCommit. Additionally, developers accustomed to GitHub\'s user interface and collaboration tools might find the transition to CodeCommit requires some adjustment.\\n\\n## How to Migrate a Git LFS Repository to CodeCommit\\n\\nMigrating a Git LFS repository to CodeCommit involves several steps. First, ensure all large files are tracked correctly in your Git LFS repository. Next, clone the repository and remove the Git LFS tracking configuration. After that, create a new repository in AWS CodeCommit and push your local repository to it. Detailed documentation and scripts are available to streamline this process, ensuring a smooth transition without data loss or disruption.\\n\\n## A Better Solution\\n\\nFor teams and projects heavily reliant on Git LFS, exploring AWS CodeCommit as an alternative can offer significant benefits. CodeCommit\'s seamless integration with the AWS ecosystem, coupled with its cost-effective and scalable nature, makes it an attractive option for managing large files in Git repositories. By mitigating the challenges associated with Git LFS, CodeCommit empowers development teams to focus on coding and collaboration, driving productivity and innovation.\\n\\nIn conclusion, AWS CodeCommit provides a viable, cost-effective, and efficient alternative to GitHub\'s Large File Storage service. By leveraging AWS\'s robust infrastructure, developers can manage large files in Git repositories with ease, optimizing their workflows and reducing overhead.\\n"},{"lang":"en","group":"blog","slug":"blog/check-voltage-current-on-macos-for-power-adapter","frontmatter":{"title":"Check Voltage & Current  on MacOS for Power Adapter","meta_title":"Check Voltage & Current on MacOS for Power Adapter","date":"2022-02-14T00:00:00.000Z","author":"Tan Shuai","tags":["MacOS","Power Adapter","Voltage","Current"],"categories":["MacOS"],"draft":false},"content":"\\nWhen you are using a MacBook, you may want to check the voltage and current of the power adapter. Here is a simple way to check the voltage and current of the power adapter on MacOS.\\n\\nOpen Terminal.app and type the command:\\n\\n`ioreg -l -n AppleSmartBattery -r |grep AppleRawAdapterDetails`\\n\\nYou will get the following information included current and voltage:\\n\\n```json\\n\\"AppleRawAdapterDetails\\" = ({\\"IsWireless\\"=No,\\"AdapterID\\"=0,\\"FamilyCode\\"=18446744073172697098,\\"Watts\\"=89,**\\"Current\\"=4450**,\\"PMUConfiguration\\"=4448,**\\"Voltage\\"=20000**})\\n```\\n"},{"lang":"en","group":"blog","slug":"blog/convert-markdown-academic-paper-pdf-macos","frontmatter":{"title":"Quickly Convert Markdown to Academic-Style Paper PDF on macOS","meta_title":"Convert Markdown to Academic-Style Paper PDF on macOS with Pandoc","description":"Learn how to convert Markdown documents to academic-style paper PDFs on macOS using Pandoc and BasicTeX. This quick and straightforward method is perfect for creating professional PDF files for academic papers.","date":"2022-03-03T00:00:00.000Z","categories":["Software Development"],"author":"Tan Shuai","tags":["Pandoc","LaTeX","PDF","Paper","Markdown","macOS"],"draft":false},"content":"\\nIn this guide, I\'ll walk you through how I convert Markdown documents to academic-style paper PDFs on macOS using Pandoc and BasicTeX. This method is quick and straightforward, perfect for when you need to create professional-looking PDF files for your academic papers.\\n\\n### Step 1: Install Pandoc and BasicTeX\\n\\nFirst, you\'ll need to install Pandoc and BasicTeX on your macOS system. Here\'s how I did it:\\n\\n1. **Install Pandoc**: Open Terminal and enter the following command to install Pandoc:\\n\\n   ```bash\\n   brew install pandoc\\n   ```\\n\\n2. **Install BasicTeX**: Since MacTeX is quite large, I opted for the smaller BasicTeX package to save space. Run this command:\\n\\n   ```bash\\n   brew install --cask basictex\\n   ```\\n\\n3. **Install Common LaTeX Packages**: To ensure you have the necessary packages for generating PDFs, run these commands:\\n   ```bash\\n   sudo tlmgr update --self\\n   sudo tlmgr install collection-basic collection-latex collection-latexrecommended collection-fontsrecommended\\n   ```\\n\\n### Step 2: Prepare Your Markdown File\\n\\nNext, create your Markdown file (e.g., `paper.md`). Here’s how I set up my file, including the title, author, date, and contact information:\\n\\n```markdown\\n---\\ntitle: \\"Your Paper Title\\"\\nsubtitle: \\"Optional Subtitle\\"\\ndate: \\\\today\\n\\nauthor: |\\n  | Your Name\\n  | your-email@tanshuai.com\\n  | www.tanshuai.com\\n---\\n\\n# Abstract\\n\\nYour abstract here.\\n\\n# Introduction\\n\\nYour introduction here.\\n\\n# Methodology\\n\\nYour methodology here.\\n\\n# Results\\n\\nYour results here.\\n\\n# Conclusion\\n\\nYour conclusion here.\\n```\\n\\n### Step 3: Convert Markdown to PDF with Pandoc\\n\\nNow, you can convert your Markdown file to a PDF. I used the following command in Terminal:\\n\\n```bash\\npandoc paper.md -o paper.pdf --pdf-engine=xelatex\\n```\\n\\nThis command uses Pandoc\'s default LaTeX template to convert the Markdown file into an academic-style paper PDF, including the author\'s contact information below their name.\\n\\n### Additional Tips\\n\\n- **Custom LaTeX Template**: If you need more advanced formatting or specific styles, you can create or download a custom LaTeX template and use it with Pandoc:\\n\\n  ```bash\\n  pandoc paper.md -o paper.pdf --pdf-engine=xelatex --template=your-template.tex\\n  ```\\n\\n- **More Metadata**: You can add extra information in the YAML metadata header, such as an abstract or keywords, and use these in custom templates.\\n\\n### Conclusion\\n\\nBy following these steps, you can easily convert Markdown documents to academic-style paper PDFs on macOS. Using Pandoc and BasicTeX makes this process quick and efficient, perfect for when you need to generate professional PDF documents. Whether you\'re preparing academic papers, technical reports, or other formal documents, this method works great. Including contact information in the metadata header adds a professional touch to your documents.\\n\\nI hope you find this guide helpful! If you have any questions or run into issues, feel free to reach out. Happy writing!\\n"},{"lang":"en","group":"blog","slug":"blog/electron-build-tools-error-error-failed-to-run-choco-install-pywin32-yes","frontmatter":{"title":"Electron Build Tools `ERROR Error: Failed to run \\"choco install pywin32 --yes\\"`","date":"2021-09-08T00:00:00.000Z","draft":false,"author":"Tan Shuai","tags":["Electron","Build Tools","PyWin32","Chocolatey","Win32"],"categories":["Software Development"]},"content":"\\nWhen working with Electron Build Tools, you might encounter an error related to the installation of pywin32 via Chocolatey. This can be frustrating, especially when it\'s a required dependency for your project. Below is a detailed explanation of the issue and potential steps to resolve it.\\n\\n### The Error\\n\\nWhen initializing an Electron project using Electron Build Tools, you may see the following error message:\\n\\n```bash\\nE:\\\\>e init main-testing -i testing --root=e:/src/electron\\nWARN A fixable error has occurred\\n--> A required dependency \\"pywin32\\" could not be located, it probably has to be installed.\\nDo you want build-tools to try fix this for you? [y/n]: y\\n\\nRunning \\"choco install pywin32 --yes\\"\\nERROR Error: Failed to run \\"choco install pywin32 --yes\\"\\n    at spawnSyncWithLog (C:\\\\Users\\\\zeeis\\\\.electron_build_tools\\\\src\\\\utils\\\\deps-check.js:11:11)\\n    at fix (C:\\\\Users\\\\zeeis\\\\.electron_build_tools\\\\src\\\\utils\\\\deps-check.js:39:9)\\n    at maybeAutoFix (C:\\\\Users\\\\zeeis\\\\.electron_build_tools\\\\src\\\\utils\\\\maybe-auto-fix.js:13:3)\\n    at whichAndFix (C:\\\\Users\\\\zeeis\\\\.electron_build_tools\\\\src\\\\utils\\\\which.js:10:5)\\n    at checkPlatformDependencies (C:\\\\Users\\\\zeeis\\\\.electron_build_tools\\\\src\\\\utils\\\\deps-check.js:61:7)\\n    at Object.<anonymous> (C:\\\\Users\\\\zeeis\\\\.electron_build_tools\\\\src\\\\e-init.js:165:3)\\n    at Module._compile (internal/modules/cjs/loader.js:1072:14)\\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1101:10)\\n    at Module.load (internal/modules/cjs/loader.js:937:32)\\n    at Function.Module._load (internal/modules/cjs/loader.js:778:12)\\n```\\n\\nThis error typically occurs because the pywin32 package installation script cannot find the required files on the remote server. This results in a 404 error, indicating that the file is not available at the specified URL.\\n\\n### Understanding the Error\\n\\nThe key part of the error message is:\\n\\n```bash\\nERROR: The remote file either doesn\'t exist, is unauthorized, or is forbidden for url \'http://sourceforge.net/projects/pywin32/files/pywin32/Build%20219/pywin32-219.win-amd64-py3.9.exe/download\'. Exception calling \\"GetResponse\\" with \\"0\\" argument(s): \\"The remote server returned an error: (404) Not Found.\\"\\n```\\n\\nThis indicates that the download URL for pywin32 is no longer valid, which means Chocolatey cannot retrieve the necessary installation files.\\n\\n### Troubleshooting Steps\\n\\nHere are a few steps you can take to resolve this issue:\\n\\n#### 1. Verify Chocolatey Installation\\n\\nEnsure that Chocolatey is installed correctly and updated to the latest version. You can check your Chocolatey version with:\\n\\n```bash\\nchoco --version\\n```\\n\\nTo update Chocolatey, use:\\n\\n```bash\\nchoco upgrade chocolatey\\n```\\n\\n#### 2. Manually Install pywin32\\n\\nSince the automated installation is failing, try manually installing pywin32. You can download the appropriate version from the official [pywin32 GitHub releases page](https://github.com/mhammond/pywin32/releases) and install it manually.\\n\\n#### 3. Modify the Installation Script\\n\\nIf you have control over the Electron Build Tools script, you can modify it to point to a valid URL for pywin32 or handle the manual installation process.\\n\\n#### 4. Use an Alternative Package Manager\\n\\nIf Chocolatey continues to fail, consider using an alternative package manager like pip for Python packages:\\n\\n```bash\\npip install pywin32\\n```\\n\\n### Example of Manually Installing pywin32\\n\\n1. Download the appropriate pywin32 installer from the [official GitHub releases](https://github.com/mhammond/pywin32/releases).\\n2. Run the installer and follow the installation instructions.\\n3. Verify the installation by running a simple Python script that imports pywin32:\\n\\n```python\\nimport win32api\\nprint(win32api.GetVersionEx())\\n```\\n\\nEncountering the \\"Failed to run `choco install pywin32 --yes`\\" error can be a roadblock in your development process. However, by understanding the root cause and following the steps outlined above, you can overcome this issue and continue with your Electron project setup.\\n"},{"lang":"en","group":"blog","slug":"blog/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining","frontmatter":{"title":"Full Custom ASIC Design Secrets for Bitcoin and Cryptocurrency Mining","date":"2022-05-30T00:00:00.000Z","update":"2023-12-30T00:00:00.000Z","categories":["Semiconductors","Bitcoin","Cryptocurrency","Blockchain"],"author":"Tan Shuai","tags":["ASIC","Bitcoin","Mining","BTC"],"draft":false,"contact":"Tan Shuai | tanshuai@btc.com | tanshuai.com"},"content":"\\nTan Shuai  \\n[tanshuai@btc.com](mailto:tanshuai@btc.com)  \\n[tanshuai.com](https://tanshuai.com)\\n\\n---\\n\\n## Abstract\\n\\nIn the competitive world of cryptocurrency mining, power efficiency, hashrate performance, and reliability are paramount. This paper delves into the top-tier full custom ASIC (Application-Specific Integrated Circuit) design, revealing industry secrets and expert methodologies that drive high-performance Bitcoin and cryptocurrency mining. Written by a tech expert from one of the top ASIC miner companies, this paper leverages advanced design techniques, meticulous physical layout, and comprehensive verification processes to showcase the exceptional capabilities of full custom ASICs in maximizing mining efficiency and profitability.\\n\\n## Introduction\\n\\nThe evolution of cryptocurrency mining, particularly Bitcoin mining, has seen a shift from using general-purpose CPUs, FPGAs, and GPUs to specialized ASICs. These ASICs offer unparalleled performance and energy efficiency. Full custom ASIC design represents the pinnacle of this evolution, allowing for tailored solutions that meet the specific demands of mining operations.\\n\\nMuch of the existing literature on ASIC design for cryptocurrency mining comes from academia or non-mining enterprises, which often lacks real-world applicability. To date, only a handful of companies, primarily Chinese (e.g., MicroBT, Bitmain), have successfully developed marketable Bitcoin mining ASICs. This paper seeks to fill that gap by providing insights drawn from actual industry practice, offering a perspective grounded in the realities of the mining sector.\\n\\nAs a professional with over ten years of experience in the tech industry, the author of this paper has developed the world’s top Bitcoin ASIC Miner (WhatsMiner), LTC/DOGE and ETH Miners, and played a key role in companies like MicroBT, BTC.COM, and other public fablesses. He has held key positions in companies listed on NASDAQ, HKSE, and NYSE. With extensive experience in establishing partnerships with TSMC, Texas Instruments, ARM, and Intel, he brings a wealth of knowledge and practical expertise to the field of custom ASIC design for Bitcoin and cryptocurrency mining.\\n\\n## Methodology and Design Flow\\n\\n### Design Philosophy\\n\\nOur approach to full custom ASIC design is driven by a focus on maximizing PPA (Power, Performance, and Area), particularly under low-voltage operation conditions. This section will describe our design philosophy and methodology:\\n\\n1. **Pipeline Architecture**: Leveraging the inherent benefits of pipeline structures for mining algorithms, characterized by registers and combinational logic stages. By using a pipeline architecture, we can efficiently handle the high-frequency operations required for cryptocurrency mining.\\n2. **Manual Netlist and Placement**: Detailed scripting for netlist creation and manual cell placement to optimize critical paths. This allows for precise control over timing and reduces parasitic effects.\\n3. **Custom Cell Libraries**: Developing specialized cells with optimized transistor counts and dynamic power-saving features. Custom cells are designed to operate at the lowest possible voltages, ensuring minimal power consumption.\\n\\n### Achieving PPA Benefits\\n\\nDetailed strategies for achieving PPA benefits through custom design:\\n\\n1. **Custom Register Design**: Utilizing multi-bit registers and latch-based designs to reduce clock power and improve timing borrowing. Multi-bit registers minimize the clock tree\'s power consumption and reduce overall area.\\n2. **Manual Placement**: Reducing wire length and balancing setup and hold times to enhance overall performance. Manual placement allows for better control over interconnect delays and crosstalk, improving signal integrity and reducing power consumption.\\n3. **Optimized Cell Design**: Custom cells are designed to operate at lower voltages, minimizing dynamic power consumption and maximizing efficiency. By tailoring the cell designs to the specific needs of the mining algorithms, we can achieve significant improvements in performance.\\n\\n### Reliability Under Low Voltage\\n\\nEnsuring the reliability of custom-designed timing logic at low voltages involves:\\n\\n1. **Accurate Simulation**: Circuit-level simulations to validate custom cell behavior under specific conditions. Tools such as SPICE are used for detailed electrical simulations to ensure the cells operate correctly under all PVT (Process, Voltage, Temperature) corners.\\n2. **Consistency in Placement**: Manual placement to ensure uniformity and reduce variability. By controlling the physical layout, we can minimize the impact of process variations and ensure consistent performance.\\n3. **Precise PVT Calibration**: Verification against process, voltage, and temperature variations. Extensive testing and calibration are performed to ensure the design\'s robustness across different operating conditions.\\n\\n## Case Studies and Results\\n\\nPresenting real-world data and case studies from full mask tape-outs:\\n\\n| Project | Process Node | Voltage/Power Efficiency | Algorithm |\\n| ------- | ------------ | ------------------------ | --------- |\\n| SC      | TSMC 28nm    | 0.45V, 257J/T            | Blake2b   |\\n| DCR     | TSMC 28nm    | 0.45V, 150J/T            | Blake256  |\\n| DASH    | TSMC 16nm    | 0.38V, 6.2J/G            | X11       |\\n| BTC     | TSMC 16nm    | 0.38V, 65J/T             | SHA-256d  |\\n| BTC     | TSMC 7nm     | 0.30V, 37J/T             | SHA-256d  |\\n| BTC     | Samsung 8nm  | 0.31V, 45J/T             | SHA-256d  |\\n| BTC     | SMIC N+1     | 0.30V, 35J/T             | SHA-256d  |\\n\\nThese results demonstrate the substantial gains in efficiency and performance achievable through our custom design approach.\\n\\n## Integration and Verification\\n\\n### Mixed-Cell Signoff\\n\\n- **Integration of Custom Cells**: Custom cells are integrated with standard cells from TSMC and other foundries, ensuring compatibility and performance. Custom cells are characterized and validated to match the standard cell library requirements, enabling seamless integration.\\n- **Signoff Strategies**: Strategies for ensuring seamless compatibility and performance include detailed DRC (Design Rule Check) and LVS (Layout Versus Schematic) checks, as well as timing and power analysis using industry-standard EDA (Electronic Design Automation) tools.\\n\\n### Digital and Analog Co-Design\\n\\n- **Techniques for Integration**: Integrating digital and analog components to optimize overall chip performance. Techniques such as mixed-signal verification and co-simulation are used to ensure proper integration and functionality.\\n- **Verification Methodologies**: Methodologies to ensure robustness across different operational conditions include corner analysis, Monte Carlo simulations, and reliability verification to address aging and electromigration.\\n\\n## Conclusion\\n\\nFull custom ASIC design offers significant advantages for Bitcoin and cryptocurrency mining, providing unparalleled performance, power efficiency, and reliability. By unveiling the secrets of top-tier custom ASIC design, this paper highlights the methodologies and innovations that set industry leaders apart. As cryptocurrency mining continues to evolve, custom ASICs will play a crucial role in driving the next generation of high-efficiency, high-performance mining hardware.\\n\\n[PDF Version of the Paper](/docs/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining.pdf)\\n"},{"lang":"en","group":"blog","slug":"blog/get-current-commit-id-of-git-and-update-to-package-json","frontmatter":{"title":"Get current commit id of Git and update to package.json","date":"2021-08-21T09:19:58.875Z","draft":false,"author":"Tan Shuai","tags":["Git","Package.json","Node.js"],"categories":["Software Development"]},"content":"\\nWhen developing a Node.js project, you may want to keep track of the current commit ID of your Git repository. This information can be useful for debugging, versioning, or deployment purposes. One way to achieve this is by updating the `package.json` file with the current commit ID during the build process. This article will guide you through the steps to get the current commit ID of Git and update it to the `package.json` file using Node.js.\\n\\n```bash\\n\\"predev\\": \\"node ./node_modules/json/lib/json.js -I -f package.json -e \\\\\\"this.commit=\'$(git rev-parse --short HEAD)\'\\\\\\"\\",\\n```\\n"},{"lang":"en","group":"blog","slug":"blog/migrate-a-github-lfs-git-large-file-storage-repository-to-aws-codecommit","frontmatter":{"title":"Migrate a GitHub LFS (Git Large File Storage) repository to AWS CodeCommit","date":"2022-02-09T09:36:57.481Z","draft":false,"author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["Software Development"]},"content":"\\nI recently migrated one of my GitHub repositories, which uses Git Large File Storage (LFS), over to AWS CodeCommit. I thought I\'d share the process with you in case you’re looking to do something similar. Here\'s a step-by-step guide based on my experience.\\n\\n## Prerequisites\\n\\nBefore we get started, make sure you have these tools installed:\\n\\n- Git\\n- Git LFS\\n- AWS CLI\\n\\n## Step-by-Step Guide\\n\\n### 1. Clone the Repository\\n\\nFirst, clone your GitHub repository using the `--mirror` option. This creates a bare clone of the repository, including all branches and tags.\\n\\n```zsh\\ngit clone --mirror https://github.com/tanshuai/designs.git designs\\n```\\n\\n### 2. Verify LFS Files\\n\\nNext, list all files managed by Git LFS to ensure everything is in place.\\n\\n```zsh\\ngit lfs ls-files\\n```\\n\\nYou should see something like this:\\n\\n```\\ncadfa0bc9e * Brochure-Trifold-Draft.ai\\naf9b8b8a1c * Brochure-Trifold-English.ai\\n27bb5f4e61 * Brochure-Trifold.ai\\n```\\n\\n### 3. Migrate LFS Files\\n\\nNow, export the LFS files. This step makes sure they are part of your repository’s history.\\n\\n```zsh\\ngit lfs migrate export --include=\\"*.ai\\" --everything\\n```\\n\\nYou\'ll see some progress messages like these:\\n\\n```\\nmigrate: Sorting commits: ..., done.\\nmigrate: Rewriting commits: 100% (20/20), done.\\nmaster\\t98a3c48d85... -> 82f8873b41...\\nmigrate: Updating refs: ..., done.\\nmigrate: checkout: ..., done.\\nprune: 3 local object(s), 0 retained, done.\\ncadfa0bc9e... (133 MB)\\n27bb5f4e61... (131 MB)\\naf9b8b8a1c... (130 MB), done.\\nprune: Deleting objects: 100% (3/3), done.\\n```\\n\\n### 4. Clean Up LFS\\n\\nRemove the Git LFS tracking information and uninstall Git LFS.\\n\\n```zsh\\ngit lfs ls-files\\ngit rm .gitattributes -f\\ngit lfs uninstall\\n```\\n\\n### 5. Push to AWS CodeCommit\\n\\nFinally, push your repository to AWS CodeCommit.\\n\\n```zsh\\ngit push https://git-codecommit.us-east-2.amazonaws.com/v1/repos/designs --all\\n```\\n\\nThat’s it! By following these steps, I successfully migrated my GitHub LFS repository to AWS CodeCommit. The large files and the repository history were preserved perfectly.\\n\\n## Wrapping Up\\n\\nMigrating a GitHub repository that uses Git LFS to AWS CodeCommit is pretty straightforward if you follow the right steps. If you have any questions or run into issues, the [AWS CodeCommit documentation](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) and [Git LFS documentation](https://git-lfs.github.com/) are great resources.\\n\\nI hope you find this guide helpful. Happy coding!\\n"},{"lang":"en","group":"blog","slug":"blog/reset-restore-all-subdirectories-of-git","frontmatter":{"title":"Reset/Restore All subdirectories of Git","date":"2021-09-22T08:33:49.201Z","draft":false,"author":"Tan Shuai","tags":["Git","Version Control"],"categories":["Software Development"]},"content":"\\nManaging a Git repository effectively often requires resetting or restoring subdirectories to maintain a clean and functional codebase. This guide provides a concise, step-by-step approach to reset or restore all subdirectories in a Git repository.\\n\\n## Resetting Subdirectories\\n\\nThe following Git command removes all untracked files and directories from the repository. This is useful for cleaning up unnecessary files before performing a reset or restore.\\n\\n```bash\\ngit clean -xfdf -- .\\n```\\n\\n### Command Breakdown:\\n\\n- `-x`: Remove all untracked files, including those ignored by `.gitignore`.\\n- `-f`: Force the removal of files.\\n- `-d`: Remove untracked directories.\\n- `-- .`: Apply the command to the current directory and all subdirectories.\\n\\n## Restoring Subdirectories\\n\\nTo restore all files in the repository to their last committed state, use the following command:\\n\\n```bash\\ngit checkout {HEAD OR BRANCH} -- .\\n```\\n\\n### Command Breakdown:\\n\\n- `{HEAD OR BRANCH}`: Replace with `HEAD` to reset to the latest commit or specify a branch name to reset to a specific branch.\\n- `-- .`: Apply the command to the current directory and all subdirectories.\\n\\nBy using these commands, you can ensure that your repository is free from unwanted files and that all files are restored to their committed states. This process helps in maintaining a clean and organized codebase, facilitating easier collaboration and development.\\n\\nFeel free to customize this guide according to your specific needs and preferences. For more advanced Git operations, refer to the [official Git documentation](https://git-scm.com/doc).\\n"},{"lang":"en","group":"blog","slug":"blog/ultra-low-cost-ddr3-ddr4-lpddr3-lpddr4-memory-test-system","frontmatter":{"title":"Ultra Low-Cost DDR3, DDR4, LP-DDR3 & LP-DDR4 Memory Test System","description":"Discover ultra low-cost memory test system for DDR3, DDR4, LP-DDR3, and LP-DDR4 technologies. Priced at around $200,000 USD, it offers high-speed testing, versatility, advanced features, and low power consumption. Perfect for businesses seeking cost-effective, reliable memory testing solutions.","date":"2024-06-01T00:00:00.000Z","categories":["Semiconductors"],"author":"Tan Shuai","tags":["DDR3","DDR4","LP-DDR3","LP-DDR4","Memory Test System"],"draft":false},"content":"\\nIf you\'re like me, always on the lookout for cost-effective solutions without compromising on quality, you\'re going to love what I have to share today. In our fast-paced tech world, ensuring that our devices\' memory is up to par is crucial. High-end options like the T5503/T5503HS2 are fantastic, but they come with a hefty price tag. Thankfully, Zeeis has stepped up with an ultra low-cost memory test system that doesn\'t sacrifice performance.\\n\\n## Why This Matters\\n\\nWhen I first learned about Zeeis\'s memory test system, I was intrigued. This system is designed to handle DDR3, DDR4, LP-DDR3, and LP-DDR4 memory technologies. Whether you\'re working with older systems or the latest tech, this system has you covered.\\n\\n### High-Speed Testing\\n\\nOne of the standout features is its ability to support data transfer rates ranging from 800 to 3200 MT/s for both DDR3 and DDR4. It can evaluate memory modules at clock speeds up to 1600 MHz. That means thorough and reliable testing, ensuring that your devices perform at their best.\\n\\n### Versatility\\n\\nThe versatility of this system is a game-changer. It supports multiple memory standards, making it suitable for a wide range of applications—from consumer electronics to high-performance computing. Plus, it\'s future-proof. As new memory technologies emerge, this system can be easily upgraded to support them.\\n\\n### Cost Efficiency\\n\\nNow, let\'s talk about the price. At around $200,000 USD, this system offers an excellent return on investment. It’s affordable enough for small to medium-sized enterprises, ensuring top-notch testing capabilities without breaking the bank.\\n\\n### Advanced Features\\n\\nThe system comes with advanced testing algorithms, including an integrated algorithmic pattern generator (ALPG). This ensures accurate and reliable memory evaluation, so each module meets stringent performance standards.\\n\\n### Low Power Consumption\\n\\nWhat’s also impressive is its low power consumption. It aligns with the trends seen in LP-DDR3 and LP-DDR4 memory technologies. By operating at lower voltages, it not only reduces energy costs but also minimizes thermal output, making it an eco-friendly choice.\\n\\n## Why Choose Zeeis?\\n\\n### Scalability\\n\\nZeeis’s system is designed with scalability in mind. As new memory technologies emerge, the system can be easily upgraded, ensuring long-term usability and reducing the need for frequent replacements.\\n\\n### Support and Documentation\\n\\nAnother big plus is Zeeis’s extensive support and documentation. Whether you\'re a seasoned professional or new to memory testing, their detailed guides and responsive customer service ensure a smooth experience.\\n\\n### Meeting Market Demands\\n\\nWith the growing demand for high-speed memory in everything from smartphones to data centers, having a reliable and cost-effective memory testing solution is essential. Zeeis’s system meets these demands, ensuring that your products are market-ready and perform flawlessly in real-world applications.\\n\\n## Conclusion\\n\\nIn a nutshell, Zeeis’s Ultra Low Cost DDR3, DDR4, LP-DDR3 & LP-DDR4 Memory Test System is a fantastic option for those of us who need reliable, versatile, and affordable memory testing solutions. It offers high performance at a fraction of the cost of other high-end systems, empowering companies to maintain high standards without breaking the bank.\\n\\nIf you\'re interested in enhancing your testing capabilities with a system designed for the future of memory technology, please feel free to reach out to me for more information at [i@tanshuai.com](mailto:i@tanshuai.com).\\n\\nHappy testing!\\n"},{"lang":"en","group":"blog","slug":"blog/usr-bin-sudo-must-be-owned-by-uid-0-and-have-the-setuid-bit-set-on-ubuntu-20-04","frontmatter":{"title":"/usr/bin/sudo must be owned by uid 0 and have the setuid bit set on Ubuntu 20.04","date":"2021-10-08T13:07:25.406Z","draft":false,"author":"Tan Shuai","tags":["Ubuntu","Linux","Sudo"],"categories":["Linux"]},"content":"\\nIf you encounter the error message \\"/usr/bin/sudo must be owned by uid 0 and have the setuid bit set\\" on Ubuntu 20.04, follow these steps to resolve the issue.\\n\\n1. During the boot process, press the ‘ESC’ key to access the GRUB menu.\\n\\n![GRUB Screen](/images/content/wx20211008-210752.png \\"GRUB Screen\\")\\n\\n2. Select the first option, “Ubuntu,” and press the ‘e’ key to edit the boot parameters.\\n\\n![Edit Boot Parameters](/images/content/wx20211008-210841.png \\"Edit Boot Parameters\\")\\n\\n3. Append the following string to the line starting with ‘linux’ to boot into rescue mode:\\n\\n```bash\\nsystemd.unit=rescue.target\\n```\\n\\n4. Once in rescue mode, execute the following command to restore the correct permissions and ownership for `/usr/bin/sudo`:\\n\\n```bash\\npkexec chmod a=rx,u+ws /usr/bin/sudo\\n```\\n\\nThis command sets the necessary permissions and ensures that `sudo` is owned by the root user with the setuid bit set.\\n\\nBy following these steps, you should be able to resolve the issue and restore proper functionality to the `sudo` command on your Ubuntu system.\\n\\n---\\n"},{"lang":"zh-hant","group":"blog","slug":"blog/aws-codecommit-the-githubs-large-file-storage-git-lfs-free-alternative","frontmatter":{"title":"AWS CodeCommit：GitHub 大型文件存儲 (Git LFS) 的免費替代方案","description":"了解 AWS CodeCommit 如何作為 GitHub 大型文件存儲 (Git LFS) 的經濟高效替代方案。本文涵蓋了 Git LFS 的限制、使用 AWS CodeCommit 進行大型文件存儲的優勢，並提供了從 Git LFS 遷移到 CodeCommit 的分步指南。利用 AWS 的可擴展和安全基礎設施提升您的開發工作流程。","date":"2022-02-09T00:00:00.000Z","author":"譚帥","tags":["AWS","Git","GitHub","LFS"],"categories":["軟體開發"],"draft":false},"content":"\\nAWS CodeCommit 提供了一個強大的替代方案，來取代 GitHub 的大型文件存儲 (Git LFS) 服務，提供了一個高效的解決方案來管理 Git 儲存庫中的大型文件。\\n\\n## 為什麼你應該重新考慮使用 Git LFS\\n\\n雖然 Git LFS 是處理 Git 儲存庫中大型文件的熱門選擇，但它也有其限制和挑戰。Git LFS 需要額外的設置和管理，這可能會使開發工作流程變得複雜。此外，與 Git LFS 相關的存儲和帶寬成本可能會迅速增加，特別是對於有大量大型文件或廣泛合作的項目。\\n\\n## 為什麼 GitHub 的大型文件存儲服務並不完美\\n\\nGitHub 的大型文件存儲服務雖然有用，但也有固有的缺點。主要問題是與存儲和帶寬相關的成本，這對於較大的項目來說可能會成為一個負擔。此外，管理 Git LFS 可能會很麻煩，要求開發人員安裝和配置 LFS 客戶端，跟踪特定文件，並處理由於大型文件與儲存庫其餘部分單獨處理而產生的潛在合併衝突。\\n\\n## 為什麼使用 AWS CodeCommit 來存儲 Git 中的大型文件\\n\\nAWS CodeCommit 提供了一個引人注目的替代方案來存儲 Git 儲存庫中的大型文件，而無需使用 Git LFS。CodeCommit 是一個完全管理的源代碼控制服務，無縫集成其他 AWS 服務，提供強大的可擴展性、安全性和成本效益。通過利用 CodeCommit，開發人員可以避免管理 Git LFS 的額外開銷，同時受益於 AWS 強大的基礎設施和按需付費的定價模式。\\n\\n## AWS CodeCommit 相比於 GitHub 的局限性\\n\\n儘管 AWS CodeCommit 具有許多優勢，但與 GitHub 相比也有一些局限性。GitHub 的廣泛社群支持、豐富的整合生態系統和高級功能如 GitHub Actions 和 GitHub Pages 可能無法在 CodeCommit 中完全複製。此外，習慣於 GitHub 用戶界面和協作工具的開發人員可能會發現轉向 CodeCommit 需要一些調整。\\n\\n## 如何將 Git LFS 儲存庫遷移到 CodeCommit\\n\\n將 Git LFS 儲存庫遷移到 CodeCommit 需要幾個步驟。首先，確保所有大文件在您的 Git LFS 儲存庫中被正確跟蹤。接下來，克隆儲存庫並移除 Git LFS 的跟蹤配置。之後，在 AWS CodeCommit 中創建一個新儲存庫，並將您的本地儲存庫推送到其中。有詳細的文檔和腳本可用於簡化這個過程，確保無數據丟失或中斷地順利遷移。\\n\\n## 一個更好的解決方案\\n\\n對於高度依賴 Git LFS 的團隊和項目，探索 AWS CodeCommit 作為替代方案可以提供顯著的好處。CodeCommit 與 AWS 生態系統的無縫集成，加上其具有成本效益和可擴展性，使其成為管理 Git 儲存庫中大文件的有吸引力的選擇。通過緩解與 Git LFS 相關的挑戰，CodeCommit 使開發團隊能夠專注於編碼和協作，提升生產力和創新。\\n\\n總結來說，AWS CodeCommit 提供了一個可行的、具有成本效益且高效的 GitHub 大文件存儲服務替代方案。通過利用 AWS 的強大基礎設施，開發人員可以輕鬆管理 Git 儲存庫中的大文件，優化工作流程並減少開銷。\\n"},{"lang":"zh-hant","group":"blog","slug":"blog/check-voltage-current-on-macos-for-power-adapter","frontmatter":{"title":"在 MacOS 上檢查電源適配器的電壓和電流","meta_title":"在 MacOS 上檢查電源適配器的電壓和電流","date":"2022-02-14T00:00:00.000Z","author":"譚帥","tags":["MacOS","電源適配器","電壓","電流"],"categories":["MacOS"],"draft":false},"content":"\\n當您使用 MacBook 時，可能會想檢查電源適配器的電壓和電流。以下是在 MacOS 上檢查電源適配器電壓和電流的簡單方法。\\n\\n打開終端應用程式並輸入以下命令：\\n\\n`ioreg -l -n AppleSmartBattery -r |grep AppleRawAdapterDetails`\\n\\n您將獲得包括電流和電壓在內的以下信息：\\n\\n```json\\n\\"AppleRawAdapterDetails\\" = ({\\"IsWireless\\"=No,\\"AdapterID\\"=0,\\"FamilyCode\\"=18446744073172697098,\\"Watts\\"=89,**\\"Current\\"=4450**,\\"PMUConfiguration\\"=4448,**\\"Voltage\\"=20000**})\\n"},{"lang":"zh-hant","group":"blog","slug":"blog/convert-markdown-academic-paper-pdf-macos","frontmatter":{"title":"在 macOS 上快速將 Markdown 轉換為學術風格的 PDF 文件","meta_title":"使用 Pandoc 將 Markdown 轉換為學術風格的 PDF 文件在 macOS 上","description":"了解如何使用 Pandoc 和 BasicTeX 將 Markdown 文件轉換為學術風格的 PDF 文件。這種快速且簡單的方法非常適合用於創建專業的學術論文 PDF 文件。","date":"2022-03-03T00:00:00.000Z","categories":["軟體開發"],"author":"譚帥","tags":["Pandoc","LaTeX","PDF","論文","Markdown","macOS"],"draft":false},"content":"\\n在本指南中，我將向你介紹如何在 macOS 上使用 Pandoc 和 BasicTeX 將 Markdown 文件轉換為學術風格的 PDF 文件。這種方法快捷簡單，非常適合當你需要為學術論文創建專業外觀的 PDF 文件時使用。\\n\\n### 步驟 1：安裝 Pandoc 和 BasicTeX\\n\\n首先，你需要在 macOS 系統上安裝 Pandoc 和 BasicTeX。以下是我如何操作的：\\n\\n1. **安裝 Pandoc**：打開終端，輸入以下命令來安裝 Pandoc：\\n\\n   ```bash\\n   brew install pandoc\\n   ```\\n\\n2. **安裝 BasicTeX**：由於 MacTeX 相當大，我選擇了較小的 BasicTeX 包來節省空間。運行此命令：\\n\\n   ```bash\\n   brew install --cask basictex\\n   ```\\n\\n3. **安裝常用的 LaTeX 包**：為了確保你擁有生成 PDF 所需的必要包，運行以下命令：\\n\\n   ```bash\\n   sudo tlmgr update --self\\n   sudo tlmgr install collection-basic collection-latex collection-latexrecommended collection-fontsrecommended\\n   ```\\n\\n### 步驟 2：準備你的 Markdown 文件\\n\\n接下來，創建你的 Markdown 文件（例如 `paper.md`）。以下是我設置文件的方式，包括標題、作者、日期和聯繫信息：\\n\\n```markdown\\n---\\ntitle: \\"Your Paper Title\\"\\nsubtitle: \\"Optional Subtitle\\"\\ndate: \\\\today\\n\\nauthor: |\\n  | Your Name\\n  | your-email@tanshuai.com\\n  | www.tanshuai.com\\n---\\n\\n# Abstract\\n\\nYour abstract here.\\n\\n# Introduction\\n\\nYour introduction here.\\n\\n# Methodology\\n\\nYour methodology here.\\n\\n# Results\\n\\nYour results here.\\n\\n# Conclusion\\n\\nYour conclusion here.\\n```\\n\\n### 步驟 3：使用 Pandoc 將 Markdown 轉換為 PDF\\n\\n現在，你可以將你的 Markdown 文件轉換為 PDF。我在終端中使用了以下命令：\\n\\n```bash\\npandoc paper.md -o paper.pdf --pdf-engine=xelatex\\n```\\n\\n此命令使用 Pandoc 的默認 LaTeX 模板將 Markdown 文件轉換為學術風格的 PDF 文件，包括在作者姓名下方添加聯繫信息。\\n\\n### 附加提示\\n\\n- **自訂 LaTeX 模板**：如果你需要更高級的格式或特定風格，可以創建或下載自訂的 LaTeX 模板並與 Pandoc 一起使用：\\n\\n  ```bash\\n  pandoc paper.md -o paper.pdf --pdf-engine=xelatex --template=your-template.tex\\n  ```\\n\\n- **更多元數據**：你可以在 YAML 元數據標頭中添加額外的信息，例如摘要或關鍵詞，並在自訂模板中使用這些信息。\\n\\n### 結論\\n\\n通過遵循這些步驟，你可以輕鬆地在 macOS 上將 Markdown 文件轉換為學術風格的 PDF 文件。使用 Pandoc 和 BasicTeX 使這一過程快速高效，非常適合當你需要生成專業的 PDF 文件時。無論你是在準備學術論文、技術報告還是其他正式文件，這種方法都非常有效。將聯繫信息包含在元數據標頭中，為你的文件增添了專業氣息。\\n\\n希望這份指南對你有所幫助！如果你有任何問題或遇到困難，隨時可以聯繫我們。祝寫作愉快！\\n"},{"lang":"zh-hant","group":"blog","slug":"blog/electron-build-tools-error-error-failed-to-run-choco-install-pywin32-yes","frontmatter":{"title":"Electron 構建工具 `ERROR Error： Failed to run \\"choco install pywin32 --yes\\"`","date":"2021-09-08T00:00:00.000Z","draft":false,"author":"譚帥","tags":["Electron","構建工具","PyWin32","Chocolatey","Win32"],"categories":["軟體開發"]},"content":"\\n當使用 Electron Build Tools 時，您可能會遇到與通過 Chocolatey 安裝 pywin32 相關的錯誤。這可能會令人沮喪，尤其是當它是您的專案所需的依賴項時。以下是關於此問題的詳細說明及解決步驟。\\n\\n### 錯誤\\n\\n在使用 Electron Build Tools 初始化 Electron 專案時，您可能會看到以下錯誤訊息：\\n\\n```bash\\nE:\\\\\\\\>e init main-testing -i testing --root=e:/src/electron\\nWARN A fixable error has occurred\\n--> A required dependency \\"pywin32\\" could not be located, it probably has to be installed.\\nDo you want build-tools to try fix this for you? [y/n]: y\\n\\nRunning \\"choco install pywin32 --yes\\"\\nERROR Error: Failed to run \\"choco install pywin32 --yes\\"\\n    at spawnSyncWithLog (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:11:11)\\n    at fix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:39:9)\\n    at maybeAutoFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\maybe-auto-fix.js:13:3)\\n    at whichAndFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\which.js:10:5)\\n    at checkPlatformDependencies (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:61:7)\\n    at Object.<anonymous> (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\e-init.js:165:3)\\n    at Module._compile (internal/modules/cjs/loader.js:1072:14)\\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1101:10)\\n    at Module.load (internal/modules/cjs/loader.js:937:32)\\n    at Function.Module._load (internal/modules/cjs/loader.js:778:12)\\n```\\n\\n此錯誤通常是由於 pywin32 套件的安裝腳本無法在遠端伺服器上找到所需的文件。這導致了 404 錯誤，表明該文件在指定的 URL 上不可用。\\n\\n### 理解錯誤\\n\\n錯誤訊息的關鍵部分是：\\n\\n```bash\\nERROR: The remote file either doesn\'t exist, is unauthorized, or is forbidden for url \'http://sourceforge.net/projects/pywin32/files/pywin32/Build%20219/pywin32-219.win-amd64-py3.9.exe/download\'. Exception calling \\"GetResponse\\" with \\"0\\" argument(s): \\"The remote server returned an error: (404) Not Found.\\"\\n\\n這表示 pywin32 的下載 URL 不再有效，這意味著 Chocolatey 無法檢索所需的安裝文件。\\n\\n### 疑難排解步驟\\n\\n以下是一些解決此問題的步驟：\\n\\n#### 1. 驗證 Chocolatey 安裝\\n\\n確保 Chocolatey 安裝正確並更新至最新版本。您可以使用以下命令檢查 Chocolatey 版本：\\n\\n```bash\\nchoco --version\\n```\\n\\n要更新 Chocolatey，使用：\\n\\n```bash\\nchoco upgrade chocolatey\\n```\\n\\n#### 2. 手動安裝 pywin32\\n\\n由於自動安裝失敗，嘗試手動安裝 pywin32。您可以從官方 [pywin32 GitHub 發行頁面](https://github.com/mhammond/pywin32/releases)下載適當的版本並手動安裝。\\n\\n#### 3. 修改安裝腳本\\n\\n如果您可以控制 Electron Build Tools 腳本，您可以將其修改為指向有效的 pywin32 URL 或處理手動安裝過程。\\n\\n#### 4. 使用替代的包管理器\\n\\n如果 Chocolatey 繼續失敗，考慮使用其他包管理器，如 pip 來安裝 Python 包：\\n\\n```bash\\npip install pywin32\\n```\\n\\n### 手動安裝 pywin32 的示例\\n\\n1. 從[官方 GitHub 發行頁面](https://github.com/mhammond/pywin32/releases)下載適當的 pywin32 安裝程序。\\n2. 運行安裝程序並按照安裝說明進行操作。\\n3. 通過運行簡單的 Python 腳本來驗證安裝：\\n\\n```python\\nimport win32api\\nprint(win32api.GetVersionEx())\\n```\\n\\n遇到 \\"Failed to run `choco install pywin32 --yes`\\" 錯誤可能會阻礙您的開發過程。然而，通過了解根本原因並按照上述步驟操作，您可以克服這個問題，繼續進行您的 Electron 項目設置。\\n"},{"lang":"zh-hant","group":"blog","slug":"blog/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining","frontmatter":{"title":"比特幣和加密貨幣挖礦的全定制 ASIC 設計祕密","date":"2022-05-30T00:00:00.000Z","categories":["半導體","比特幣","加密貨幣","區塊鏈"],"author":"譚帥","tags":["ASIC","比特幣","挖礦","BTC"],"draft":false,"contact":"譚帥 | tanshuai@btc.com | tanshuai.com"},"content":"\\n譚帥  \\n[tanshuai@btc.com](mailto:tanshuai@btc.com)  \\n[tanshuai.com](https://tanshuai.com)\\n\\n---\\n\\n## 摘要\\n\\n在競爭激烈的加密貨幣挖礦世界中，電力效率、算力性能和可靠性至關重要。本文深入探討了頂級的全定制ASIC（專用集成電路）設計，揭示了推動高性能比特幣和加密貨幣挖礦的行業秘密和專家方法。本文由一家頂級ASIC礦機公司的技術專家撰寫，利用先進的設計技術、細緻的物理佈局和全面的驗證過程，展示了全定制ASIC在最大化挖礦效率和盈利能力方面的卓越能力。\\n\\n## 介紹\\n\\n加密貨幣挖礦，特別是比特幣挖礦的發展，已經從使用通用CPU、FPGA和GPU轉向專用ASIC。這些ASIC提供了無與倫比的性能和能源效率。全定制ASIC設計代表了這一發展的巔峰，允許針對挖礦操作的具體需求量身定制解決方案。\\n\\n現有關於加密貨幣挖礦ASIC設計的文獻大多來自學術界或非挖礦企業，往往缺乏現實應用性。迄今為止，只有少數幾家公司，主要是中國公司（如MicroBT、比特大陸），成功開發出可銷售的比特幣挖礦ASIC。本文旨在填補這一空白，提供來自實際行業實踐的見解，提供一個立足於挖礦行業現實的視角。\\n\\n作為一位擁有超過十年技術行業經驗的專業人士，本文作者開發了世界頂級的比特幣ASIC礦機（WhatsMiner）、LTC/DOGE和ETH礦機，並在MicroBT、BTC.COM等無晶圓廠公司中擔任重要角色。他曾在NASDAQ、港交所和紐交所上市公司中擔任關鍵職位。擁有與台積電、德州儀器、ARM和英特爾建立合作關係的豐富經驗，他為比特幣和加密貨幣挖礦的定制ASIC設計領域帶來了豐富的知識和實際專業知識。\\n\\n## 方法論與設計流程\\n\\n### 設計理念\\n\\n我們的全定制 ASIC 設計方法著重於在低電壓運行條件下最大化 PPA（功耗、性能和面積）。本節將描述我們的設計理念和方法：\\n\\n1. **管道架構**：利用管道結構在採礦算法中的固有優勢，這些結構由寄存器和組合邏輯階段組成。通過使用管道架構，我們可以有效處理加密貨幣採礦所需的高頻操作。\\n2. **手動網表和佈局**：詳細腳本用於創建網表並手動放置單元，以優化關鍵路徑。這允許對定時進行精確控制並減少寄生效應。\\n3. **自定義單元庫**：開發具有優化晶體管數量和動態節能功能的專門單元。自定義單元被設計為在最低電壓下運行，確保最小的功耗。\\n\\n### 實現 PPA 效益\\n\\n通過定制設計實現 PPA 效益的詳細策略：\\n\\n1. **自定義寄存器設計**：利用多位寄存器和基於鎖存器的設計來減少時鐘功率並改善定時借用。多位寄存器最小化時鐘樹的功耗並減少整體面積。\\n2. **手動佈局**：減少導線長度和平衡設置和保持時間以提高整體性能。手動佈局允許更好地控制互連延遲和串擾，提高信號完整性並減少功耗。\\n3. **優化單元設計**：自定義單元被設計為在較低電壓下運行，最小化動態功耗並最大化效率。通過針對採礦算法的特定需求量身定制單元設計，我們可以顯著提高性能。\\n\\n### 低電壓下的可靠性\\n\\n確保在低電壓下定制設計的時序邏輯的可靠性包括：\\n\\n1. **精確模擬**：電路級模擬以驗證特定條件下的自定義單元行為。使用 SPICE 等工具進行詳細的電氣模擬，以確保單元在所有 PVT（製程、電壓、溫度）角下正常運行。\\n2. **佈局一致性**：手動佈局以確保均勻性並減少變異性。通過控制物理佈局，我們可以最小化製程變異的影響並確保性能一致。\\n3. **精確的 PVT 校準**：針對製程、電壓和溫度變化進行驗證。進行廣泛的測試和校準，以確保設計在不同運行條件下的穩健性。\\n\\n## 案例研究與結果\\n\\n呈現來自全掩模 tape-out 的實際數據和案例研究：\\n\\n| 專案 | 製程節點 | 電壓/功率效率 | 演算法 |\\n| ---- | -------- | -------------- | ------- |\\n| SC   | 台積電 28nm | 0.45V, 257J/T | Blake2b |\\n| DCR  | 台積電 28nm | 0.45V, 150J/T | Blake256 |\\n| DASH | 台積電 16nm | 0.38V, 6.2J/G | X11 |\\n| BTC  | 台積電 16nm | 0.38V, 65J/T  | SHA-256d |\\n| BTC  | 台積電 7nm  | 0.30V, 37J/T  | SHA-256d |\\n| BTC  | 三星 8nm    | 0.31V, 45J/T  | SHA-256d |\\n| BTC  | 中芯國際 N+1 | 0.30V, 35J/T  | SHA-256d |\\n\\n這些結果展示了透過我們的客製化設計方法可達到的顯著效率和性能提升。\\n\\n## 整合與驗證\\n\\n### 混合單元簽核\\n\\n- **客製單元的整合**：客製單元與台積電及其他晶圓廠的標準單元相結合，確保相容性和性能。客製單元經過特徵化和驗證，以符合標準單元庫的要求，實現無縫整合。\\n- **簽核策略**：確保無縫相容性和性能的策略包括詳細的 DRC（設計規則檢查）和 LVS（佈局對比原理圖）檢查，以及使用行業標準的 EDA（電子設計自動化）工具進行時序和功率分析。\\n\\n### 數位與類比共同設計\\n\\n- **整合技術**：整合數位和類比元件以優化整體晶片性能。使用混合信號驗證和共同模擬等技術，確保正確的整合和功能。\\n- **驗證方法**：確保在不同操作條件下的穩健性的方法包括角落分析、蒙地卡羅模擬和可靠性驗證，以應對老化和電遷移問題。\\n\\n## 結論\\n\\n全客製化 ASIC 設計為比特幣和加密貨幣挖礦提供了顯著的性能、功率效率和可靠性優勢。本文揭示了頂尖客製化 ASIC 設計的秘密，強調了使行業領先者脫穎而出的方法和創新。隨著加密貨幣挖礦的持續發展，客製化 ASIC 將在推動下一代高效能、高效率的挖礦硬體中發揮關鍵作用。\\n\\n[PDF 版本的論文](/docs/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining.pdf)\\n"},{"lang":"zh-hant","group":"blog","slug":"blog/get-current-commit-id-of-git-and-update-to-package-json","frontmatter":{"title":"獲取 Git 的當前提交 ID 並更新至 package.json","date":"2021-08-21T09:19:58.875Z","draft":false,"author":"譚帥","tags":["Git","Package.json","Node.js"],"categories":["軟體開發"]},"content":"\\n在開發 Node.js 項目時，你可能希望跟踪 Git 存儲庫的當前提交 ID。這些資訊對於調試、版本控制或部署都可能很有用。實現這一目標的一種方法是在構建過程中更新 `package.json` 文件，將當前的提交 ID 加入其中。本文將指導你如何使用 Node.js 獲取 Git 的當前提交 ID 並將其更新到 `package.json` 文件中。\\n\\n```bash\\n\\"predev\\": \\"node ./node_modules/json/lib/json.js -I -f package.json -e \\\\\\\\\\\\\\"this.commit=\'$(git rev-parse --short HEAD)\'\\\\\\\\\\\\\\"\\",\\n"},{"lang":"zh-hant","group":"blog","slug":"blog/migrate-a-github-lfs-git-large-file-storage-repository-to-aws-codecommit","frontmatter":{"title":"將 GitHub LFS（Git 大文件存儲）存儲庫遷移到 AWS CodeCommit","date":"2022-02-09T09:36:57.481Z","draft":false,"author":"譚帥","tags":["AWS","Git","GitHub","LFS"],"categories":["軟體開發"]},"content":"\\n最近，我將使用 Git Large File Storage (LFS) 的一個 GitHub 存儲庫遷移到了 AWS CodeCommit。我想與你分享這個過程，以防你也想做類似的事情。以下是根據我的經驗編寫的逐步指南。\\n\\n## 先決條件\\n\\n在開始之前，請確保你已安裝以下工具：\\n\\n- Git\\n- Git LFS\\n- AWS CLI\\n\\n## 步驟指南\\n\\n### 1. 克隆存儲庫\\n\\n首先，使用 `--mirror` 選項克隆你的 GitHub 存儲庫。這會創建一個包含所有分支和標籤的裸克隆。\\n\\n```zsh\\ngit clone --mirror https://github.com/tanshuai/designs.git designs\\n```\\n\\n### 2. 驗證 LFS 文件\\n\\n接下來，列出由 Git LFS 管理的所有文件，以確保一切就緒。\\n\\n```zsh\\ngit lfs ls-files\\n```\\n\\n你應該會看到類似這樣的內容：\\n\\n```\\ncadfa0bc9e * Brochure-Trifold-Draft.ai\\naf9b8b8a1c * Brochure-Trifold-English.ai\\n27bb5f4e61 * Brochure-Trifold.ai\\n```\\n\\n### 3. 遷移 LFS 文件\\n\\n現在，導出 LFS 文件。這一步確保它們成為你存儲庫歷史的一部分。\\n\\n```zsh\\ngit lfs migrate export --include=\\"*.ai\\" --everything\\n```\\n\\n你會看到一些進度消息，如下所示：\\n\\n```\\nmigrate: Sorting commits: ..., done.\\nmigrate: Rewriting commits: 100% (20/20), done.\\nmaster 98a3c48d85... -> 82f8873b41...\\nmigrate: Updating refs: ..., done.\\nmigrate: checkout: ..., done.\\nprune: 3 local object(s), 0 retained, done.\\ncadfa0bc9e... (133 MB)\\n27bb5f4e61... (131 MB)\\naf9b8b8a1c... (130 MB), done.\\nprune: Deleting objects: 100% (3/3), done.\\n```\\n\\n### 4. 清理 LFS\\n\\n移除 Git LFS 跟踪信息並卸載 Git LFS。\\n\\n```zsh\\ngit lfs ls-files\\ngit rm .gitattributes -f\\ngit lfs uninstall\\n```\\n\\n### 5. 推送到 AWS CodeCommit\\n\\n最後，將你的存儲庫推送到 AWS CodeCommit。\\n\\n```zsh\\ngit push https://git-codecommit.us-east-2.amazonaws.com/v1/repos/designs --all\\n```\\n\\n就是這樣！按照這些步驟，我成功地將我的 GitHub LFS 存儲庫遷移到了 AWS CodeCommit。大文件和存儲庫歷史得到了完美的保留。\\n\\n## 結束\\n\\n如果你按照正確的步驟操作，將使用 Git LFS 的 GitHub 存儲庫遷移到 AWS CodeCommit 是相當簡單的。如果你有任何問題或遇到問題，[AWS CodeCommit 文檔](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html)和 [Git LFS 文檔](https://git-lfs.github.com/)都是很好的資源。\\n\\n希望這個指南對您有所幫助。祝編程愉快！\\n"},{"lang":"zh-hant","group":"blog","slug":"blog/reset-restore-all-subdirectories-of-git","frontmatter":{"title":"重置/恢復 Git 的所有子目錄","date":"2021-09-22T08:33:49.201Z","draft":false,"author":"譚帥","tags":["Git","版本控制"],"categories":["軟體開發"]},"content":"\\n有效管理 Git 存儲庫通常需要重置或還原子目錄，以保持乾淨且功能正常的代碼庫。本指南提供了一個簡潔的、逐步的方法來重置或還原 Git 存儲庫中的所有子目錄。\\n\\n## 重置子目錄\\n\\n以下 Git 命令將從存儲庫中刪除所有未追踪的文件和目錄。這在執行重置或還原之前清理不必要的文件非常有用。\\n\\n```bash\\ngit clean -xfdf -- .\\n```\\n\\n### 命令解析：\\n\\n- `-x`：刪除所有未追踪的文件，包括 `.gitignore` 忽略的文件。\\n- `-f`：強制刪除文件。\\n- `-d`：刪除未追踪的目錄。\\n- `-- .`：將命令應用於當前目錄及所有子目錄。\\n\\n## 還原子目錄\\n\\n要將存儲庫中的所有文件還原到最後提交的狀態，請使用以下命令：\\n\\n```bash\\ngit checkout {HEAD OR BRANCH} -- .\\n```\\n\\n### 命令解析：\\n\\n- `{HEAD OR BRANCH}`：替換為 `HEAD` 以重置到最新提交，或指定分支名稱以重置到特定分支。\\n- `-- .`：將命令應用於當前目錄及所有子目錄。\\n\\n通過使用這些命令，您可以確保存儲庫中沒有不需要的文件，並且所有文件都還原到提交的狀態。這一過程有助於保持乾淨和有條理的代碼庫，便於更輕鬆地協作和開發。\\n\\n請隨意根據您的具體需求和偏好自定義本指南。欲了解更多高級 Git 操作，請參考[官方 Git 文檔](https://git-scm.com/doc)。\\n"},{"lang":"zh-hant","group":"blog","slug":"blog/ultra-low-cost-ddr3-ddr4-lpddr3-lpddr4-memory-test-system","frontmatter":{"title":"超低成本的 DDR3、DDR4、LP-DDR3 和 LP-DDR4 記憶體測試系統","description":"探索針對 DDR3、DDR4、LP-DDR3 和 LP-DDR4 技術的超低成本記憶體測試系統。價格約為 200,000 美元，提供高速測試、多功能性、先進功能和低功耗。非常適合尋求具成本效益和可靠的記憶體測試解決方案的企業。","date":"2024-06-01T00:00:00.000Z","categories":["半導體"],"author":"譚帥","tags":["DDR3","DDR4","LP-DDR3","LP-DDR4","記憶體測試系統"],"draft":false},"content":"\\n如果你和我一樣，總是在尋找既經濟又不妥協於質量的解決方案，你會喜歡我今天要分享的內容。在我們這個快節奏的科技世界裡，確保設備的記憶體達到標準至關重要。高端選擇如T5503/T5503HS2固然出色，但價格不菲。幸好，Zeeis推出了一款性能不妥協的超低成本記憶體測試系統。\\n\\n## 為什麼這很重要\\n\\n當我第一次了解到Zeeis的記憶體測試系統時，我深感興趣。這套系統旨在處理DDR3、DDR4、LP-DDR3和LP-DDR4記憶體技術。無論你在使用舊系統還是最新技術，這套系統都能滿足你的需求。\\n\\n### 高速測試\\n\\n其突出的特點之一是支持800到3200 MT/s的數據傳輸速率，適用於DDR3和DDR4。它可以在高達1600 MHz的時鐘速度下評估記憶體模塊，這意味著可以進行徹底且可靠的測試，確保你的設備表現最佳。\\n\\n### 多功能性\\n\\n這個系統的多功能性改變了遊戲規則。它支持多種記憶體標準，適用於從消費電子到高性能計算的廣泛應用。此外，它具有未來適應性。隨著新記憶體技術的出現，這套系統可以輕鬆升級以支持它們。\\n\\n### 成本效益\\n\\n現在，讓我們談談價格。大約20萬美元，這套系統提供了優秀的投資回報。它對於中小型企業來說也足夠經濟，確保頂級的測試能力而不會超出預算。\\n\\n### 高級功能\\n\\n這個系統配備了高級測試算法，包括一個集成的算法模式生成器（ALPG）。這確保了精確且可靠的記憶體評估，使每個模塊都符合嚴格的性能標準。\\n\\n### 低功耗\\n\\n另外令人印象深刻的是其低功耗。它符合LP-DDR3和LP-DDR4記憶體技術的趨勢。通過在較低電壓下運行，它不僅降低了能源成本，還減少了熱輸出，使其成為一個環保的選擇。\\n\\n## 為何選擇 Zeeis？\\n\\n### 擴展性\\n\\nZeeis 的系統在設計時就考慮到了擴展性。隨著新記憶體技術的出現，系統可以輕鬆升級，確保長期使用，並減少頻繁更換的需求。\\n\\n### 支援與文件\\n\\n另一個重大優勢是 Zeeis 的全面支援和文件。無論您是記憶體測試的資深專業人士，還是新手，他們的詳細指南和響應迅速的客服都能確保您擁有順暢的體驗。\\n\\n### 滿足市場需求\\n\\n隨著從智能手機到數據中心的高速度記憶體需求不斷增長，擁有可靠且具成本效益的記憶體測試解決方案至關重要。Zeeis 的系統滿足了這些需求，確保您的產品能在實際應用中完美運行。\\n\\n## 結論\\n\\n簡而言之，Zeeis 的超低成本 DDR3、DDR4、LP-DDR3 及 LP-DDR4 記憶體測試系統是我們這些需要可靠、多功能且經濟實惠的記憶體測試解決方案的絕佳選擇。它以一小部分成本提供高性能，讓公司在保持高標準的同時不會超出預算。\\n\\n如果您有興趣通過設計為未來記憶體技術的系統來提升您的測試能力，請隨時通過 [i@tanshuai.com](mailto:i@tanshuai.com) 與我聯繫以獲取更多信息。\\n\\n祝測試愉快！\\n"},{"lang":"zh-hant","group":"blog","slug":"blog/usr-bin-sudo-must-be-owned-by-uid-0-and-have-the-setuid-bit-set-on-ubuntu-20-04","frontmatter":{"title":"/usr/bin/sudo 必須由 uid 0 擁有並在 Ubuntu 20.04 上設置 setuid 位","date":"2021-10-08T13:07:25.406Z","draft":false,"author":"Tan Shuai","tags":["Ubuntu","Linux","Sudo"],"categories":["Linux"]},"content":"\\n如果您在 Ubuntu 20.04 上遇到錯誤訊息「/usr/bin/sudo 必須由 uid 0 擁有並且設置 setuid 位」，請按照以下步驟解決該問題。\\n\\n1. 在啟動過程中，按下 ‘ESC’ 鍵進入 GRUB 菜單。\\n\\n![GRUB 螢幕](/images/content/wx20211008-210752.png \\"GRUB 螢幕\\")\\n\\n2. 選擇第一個選項 “Ubuntu”，然後按下 ‘e’ 鍵編輯啟動參數。\\n\\n![編輯啟動參數](/images/content/wx20211008-210841.png \\"編輯啟動參數\\")\\n\\n3. 將以下字串附加到以 ‘linux’ 開頭的行，進入救援模式：\\n\\n```bash\\nsystemd.unit=rescue.target\\n```\\n\\n4. 進入救援模式後，執行以下命令以恢復 `/usr/bin/sudo` 的正確權限和所有權：\\n\\n```bash\\npkexec chmod a=rx,u+ws /usr/bin/sudo\\n```\\n\\n此命令設定必要的權限，並確保 `sudo` 由 root 使用者擁有並設置 setuid 位。\\n\\n通過遵循這些步驟，您應該能夠解決問題並恢復 `sudo` 命令在您的 Ubuntu 系統上的正常功能。\\n\\n---\\n"},{"lang":"zh","group":"blog","slug":"blog/aws-codecommit-the-githubs-large-file-storage-git-lfs-free-alternative","frontmatter":{"title":"AWS CodeCommit：GitHub 大文件存储 (Git LFS) 的免费替代方案","description":"了解 AWS CodeCommit 如何作为一个经济高效且高效的 GitHub 大文件存储 (Git LFS) 替代方案。本文介绍了 Git LFS 的局限性，使用 AWS CodeCommit 进行大文件存储的好处，并提供了从 Git LFS 迁移到 CodeCommit 的逐步指南。通过 AWS 的可扩展且安全的基础设施提升您的开发工作流程。","date":"2022-02-09T00:00:00.000Z","author":"谭帅","tags":["AWS","Git","GitHub","LFS"],"categories":["软件开发"],"draft":false},"content":"\\nAWS CodeCommit 提供了一个强大的替代方案来代替 GitHub 的大型文件存储（Git LFS）服务，为在 Git 仓库中管理大文件提供了高效的解决方案。\\n\\n## 为什么你应该重新考虑使用 Git LFS\\n\\n虽然 Git LFS 是处理 Git 仓库中大文件的热门选择，但它有其局限性和挑战。Git LFS 需要额外的设置和管理，这可能会使开发工作流程变得复杂。此外，与 Git LFS 相关的存储和带宽成本可能会迅速上升，特别是对于有大量大文件或广泛协作的项目。\\n\\n## 为什么 GitHub 的大型文件存储服务并不完美\\n\\nGitHub 的大型文件存储服务虽然有用，但也存在固有的缺点。主要问题是与存储和带宽相关的成本，对于较大的项目来说，这些成本可能会变得难以承受。此外，管理 Git LFS 可能很麻烦，开发者需要安装和配置 LFS 客户端，跟踪特定文件，并处理由于大文件与仓库其余部分分开处理而产生的潜在合并冲突。\\n\\n## 为什么使用 AWS CodeCommit 在 Git 中存储大文件\\n\\nAWS CodeCommit 提供了一个有吸引力的替代方案，用于在 Git 仓库中存储大文件而无需 Git LFS。CodeCommit 是一个完全托管的源代码控制服务，可以无缝集成到其他 AWS 服务中，提供强大的可扩展性、安全性和成本效益。通过利用 CodeCommit，开发者可以避免管理 Git LFS 的额外开销，同时受益于 AWS 的强大基础设施和按需付费的定价模式。\\n\\n## AWS CodeCommit 与 GitHub 相比的局限性\\n\\n尽管 AWS CodeCommit 具有许多优势，但与 GitHub 相比仍有一些局限性。GitHub 的广泛社区支持、丰富的集成生态系统以及 GitHub Actions 和 GitHub Pages 等高级功能可能无法在 CodeCommit 中完全复制。此外，习惯于 GitHub 用户界面和协作工具的开发者可能会发现，转向 CodeCommit 需要一些调整。\\n\\n## 如何将 Git LFS 仓库迁移到 CodeCommit\\n\\n将 Git LFS 仓库迁移到 CodeCommit 包含几个步骤。首先，确保所有大文件在你的 Git LFS 仓库中被正确跟踪。接下来，克隆仓库并移除 Git LFS 跟踪配置。然后，在 AWS CodeCommit 中创建一个新仓库，并将本地仓库推送到该新仓库。详细的文档和脚本可用于简化这一过程，确保顺利迁移而不丢失数据或造成中断。\\n\\n## 更好的解决方案\\n\\n对于依赖 Git LFS 的团队和项目，探索 AWS CodeCommit 作为替代方案可以带来显著的优势。CodeCommit 与 AWS 生态系统的无缝集成，再加上其成本效益和可扩展性，使其成为管理 Git 仓库中大文件的理想选择。通过缓解与 Git LFS 相关的挑战，CodeCommit 使开发团队能够专注于编码和协作，从而推动生产力和创新。\\n\\n总之，AWS CodeCommit 提供了一个可行的、成本效益高且高效的替代方案来替代 GitHub 的大型文件存储服务。通过利用 AWS 强大的基础设施，开发者可以轻松管理 Git 仓库中的大文件，优化工作流程并减少开销。\\n"},{"lang":"zh","group":"blog","slug":"blog/check-voltage-current-on-macos-for-power-adapter","frontmatter":{"title":"在 MacOS 上检查电源适配器的电压和电流","meta_title":"在 MacOS 上检查电源适配器的电压和电流","date":"2022-02-14T00:00:00.000Z","author":"谭帅","tags":["MacOS","电源适配器","电压","电流"],"categories":["MacOS"],"draft":false},"content":"\\n当你使用 MacBook 时，可能想检查电源适配器的电压和电流。以下是在 MacOS 上检查电源适配器电压和电流的简单方法。\\n\\n打开 Terminal.app 并输入以下命令：\\n\\n`ioreg -l -n AppleSmartBattery -r |grep AppleRawAdapterDetails`\\n\\n你将获得以下信息，包括电流和电压：\\n\\n```json\\n\\"AppleRawAdapterDetails\\" = ({\\"IsWireless\\"=No,\\"AdapterID\\"=0,\\"FamilyCode\\"=18446744073172697098,\\"Watts\\"=89,**\\"Current\\"=4450**,\\"PMUConfiguration\\"=4448,**\\"Voltage\\"=20000**})\\n"},{"lang":"zh","group":"blog","slug":"blog/convert-markdown-academic-paper-pdf-macos","frontmatter":{"title":"在 macOS 上快速将 Markdown 转换为学术风格的 PDF 论文","meta_title":"使用 Pandoc 在 macOS 上将 Markdown 转换为学术风格的 PDF 论文","description":"了解如何使用 Pandoc 和 BasicTeX 在 macOS 上将 Markdown 文档转换为学术风格的 PDF 论文。这种快速简便的方法非常适合创建学术论文的专业 PDF 文件。","date":"2022-03-03T00:00:00.000Z","categories":["软件开发"],"author":"谭帅","tags":["Pandoc","LaTeX","PDF","论文","Markdown","macOS"],"draft":false},"content":"\\n在本指南中，我将向您展示如何使用 Pandoc 和 BasicTeX 在 macOS 上将 Markdown 文档转换为学术风格的 PDF 论文。这种方法快速且简单，非常适合需要创建专业外观的学术论文 PDF 文件时使用。\\n\\n### 第一步：安装 Pandoc 和 BasicTeX\\n\\n首先，您需要在 macOS 系统上安装 Pandoc 和 BasicTeX。以下是我的安装步骤：\\n\\n1. **安装 Pandoc**：打开终端并输入以下命令以安装 Pandoc：\\n\\n   ```bash\\n   brew install pandoc\\n   ```\\n\\n2. **安装 BasicTeX**：由于 MacTeX 体积较大，我选择了较小的 BasicTeX 包以节省空间。运行此命令：\\n\\n   ```bash\\n   brew install --cask basictex\\n   ```\\n\\n3. **安装常用的 LaTeX 包**：为了确保您拥有生成 PDF 所需的必要包，运行以下命令：\\n\\n   ```bash\\n   sudo tlmgr update --self\\n   sudo tlmgr install collection-basic collection-latex collection-latexrecommended collection-fontsrecommended\\n   ```\\n\\n### 第二步：准备您的 Markdown 文件\\n\\n接下来，创建您的 Markdown 文件（例如 `paper.md`）。以下是我的文件设置方式，包括标题、作者、日期和联系信息：\\n\\n```markdown\\n---\\ntitle: \\"Your Paper Title\\"\\nsubtitle: \\"Optional Subtitle\\"\\ndate: \\\\today\\n\\nauthor: |\\n  | Your Name\\n  | your-email@tanshuai.com\\n  | www.tanshuai.com\\n---\\n\\n# Abstract\\n\\nYour abstract here.\\n\\n# Introduction\\n\\nYour introduction here.\\n\\n# Methodology\\n\\nYour methodology here.\\n\\n# Results\\n\\nYour results here.\\n\\n# Conclusion\\n\\nYour conclusion here.\\n```\\n\\n### 第三步：使用 Pandoc 将 Markdown 转换为 PDF\\n\\n现在，您可以将 Markdown 文件转换为 PDF。我在终端中使用以下命令：\\n\\n```bash\\npandoc paper.md -o paper.pdf --pdf-engine=xelatex\\n```\\n\\n此命令使用 Pandoc 的默认 LaTeX 模板将 Markdown 文件转换为学术风格的 PDF 论文，并在作者名字下方包含联系信息。\\n\\n### 其他提示\\n\\n- **自定义 LaTeX 模板**：如果您需要更高级的格式或特定样式，可以创建或下载自定义 LaTeX 模板并与 Pandoc 一起使用：\\n\\n  ```bash\\n  pandoc paper.md -o paper.pdf --pdf-engine=xelatex --template=your-template.tex\\n  ```\\n\\n- **更多元数据**：您可以在 YAML 元数据头中添加摘要或关键词等额外信息，并在自定义模板中使用这些信息。\\n\\n### 结论\\n\\n通过遵循这些步骤，您可以轻松地在 macOS 上将 Markdown 文档转换为学术风格的 PDF 论文。使用 Pandoc 和 BasicTeX 使这一过程快速且高效，非常适合需要生成专业 PDF 文件时使用。无论您是准备学术论文、技术报告还是其他正式文件，这种方法都非常适用。在元数据头中包含联系信息为您的文档增添了专业感。\\n\\n希望本指南对您有所帮助！如果您有任何问题或遇到困难，请随时联系。祝写作愉快！\\n"},{"lang":"zh","group":"blog","slug":"blog/electron-build-tools-error-error-failed-to-run-choco-install-pywin32-yes","frontmatter":{"title":"Electron 构建工具 `ERROR Error： Failed to run \\"choco install pywin32 --yes\\"`","date":"2021-09-08T00:00:00.000Z","draft":false,"author":"谭帅","tags":["Electron","构建工具","PyWin32","Chocolatey","Win32"],"categories":["软件开发"]},"content":"\\n当使用 Electron Build Tools 时，您可能会遇到通过 Chocolatey 安装 pywin32 相关的错误。这可能会令人沮丧，特别是当它是您项目所需的依赖项时。以下是问题的详细解释和可能的解决步骤。\\n\\n### 错误\\n\\n在使用 Electron Build Tools 初始化一个 Electron 项目时，您可能会看到以下错误信息：\\n\\n```bash\\nE:\\\\\\\\>e init main-testing -i testing --root=e:/src/electron\\nWARN A fixable error has occurred\\n--> A required dependency \\"pywin32\\" could not be located, it probably has to be installed.\\nDo you want build-tools to try fix this for you? [y/n]: y\\n\\nRunning \\"choco install pywin32 --yes\\"\\nERROR Error: Failed to run \\"choco install pywin32 --yes\\"\\n    at spawnSyncWithLog (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:11:11)\\n    at fix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:39:9)\\n    at maybeAutoFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\maybe-auto-fix.js:13:3)\\n    at whichAndFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\which.js:10:5)\\n    at checkPlatformDependencies (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:61:7)\\n    at Object.<anonymous> (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\e-init.js:165:3)\\n    at Module._compile (internal/modules/cjs/loader.js:1072:14)\\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1101:10)\\n    at Module.load (internal/modules/cjs/loader.js:937:32)\\n    at Function.Module._load (internal/modules/cjs/loader.js:778:12)\\n```\\n\\n此错误通常是由于 pywin32 包的安装脚本无法在远程服务器上找到所需的文件。这会导致 404 错误，表示在指定的 URL 上找不到文件。\\n\\n### 理解错误\\n\\n错误信息的关键部分是：\\n\\n```bash\\nERROR: The remote file either doesn\'t exist, is unauthorized, or is forbidden for url \'http://sourceforge.net/projects/pywin32/files/pywin32/Build%20219/pywin32-219.win-amd64-py3.9.exe/download\'. Exception calling \\"GetResponse\\" with \\"0\\" argument(s): \\"The remote server returned an error: (404) Not Found.\\"\\n\\n这表明 pywin32 的下载 URL 不再有效，这意味着 Chocolatey 无法检索到必要的安装文件。\\n\\n### 排查步骤\\n\\n以下是一些解决该问题的步骤：\\n\\n#### 1. 验证 Chocolatey 安装\\n\\n确保 Chocolatey 已正确安装并更新至最新版本。您可以使用以下命令检查 Chocolatey 版本：\\n\\n```bash\\nchoco --version\\n```\\n\\n要更新 Chocolatey，请使用：\\n\\n```bash\\nchoco upgrade chocolatey\\n```\\n\\n#### 2. 手动安装 pywin32\\n\\n由于自动安装失败，尝试手动安装 pywin32。您可以从官方 [pywin32 GitHub 发布页面](https://github.com/mhammond/pywin32/releases)下载相应版本并手动安装。\\n\\n#### 3. 修改安装脚本\\n\\n如果您可以控制 Electron Build Tools 脚本，您可以修改它以指向 pywin32 的有效 URL 或处理手动安装过程。\\n\\n#### 4. 使用替代的包管理器\\n\\n如果 Chocolatey 继续失败，考虑使用其他包管理器，例如用于 Python 包的 pip：\\n\\n```bash\\npip install pywin32\\n```\\n\\n### 手动安装 pywin32 示例\\n\\n1. 从[官方 GitHub 发布页面](https://github.com/mhammond/pywin32/releases)下载相应的 pywin32 安装程序。\\n2. 运行安装程序并按照安装说明进行操作。\\n3. 通过运行一个导入 pywin32 的简单 Python 脚本来验证安装：\\n\\n```python\\nimport win32api\\nprint(win32api.GetVersionEx())\\n```\\n\\n遇到“Failed to run `choco install pywin32 --yes`”错误可能会成为您开发过程中的一个障碍。然而，通过了解根本原因并按照上述步骤操作，您可以克服此问题，继续进行 Electron 项目设置。\\n"},{"lang":"zh","group":"blog","slug":"blog/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining","frontmatter":{"title":"比特币和加密货币挖矿的全定制ASIC设计秘密","date":"2022-05-30T00:00:00.000Z","categories":["半导体","比特币","加密货币","区块链"],"author":"谭帅","tags":["ASIC","比特币","挖矿","BTC"],"draft":false,"contact":"谭帅 | tanshuai@btc.com | tanshuai.com"},"content":"\\n谭帅  \\n[tanshuai@btc.com](mailto:tanshuai@btc.com)  \\n[tanshuai.com](https://tanshuai.com)\\n\\n---\\n\\n## 摘要\\n\\n在竞争激烈的加密货币挖矿领域，电源效率、算力性能和可靠性至关重要。本文深入探讨了顶级全定制ASIC（专用集成电路）设计，揭示了推动高性能比特币和加密货币挖矿的行业秘密和专家方法。由顶级ASIC矿机公司的一位技术专家撰写，本文利用先进的设计技术、细致的物理布局和全面的验证流程，展示了全定制ASIC在最大化挖矿效率和盈利能力方面的卓越能力。\\n\\n## 介绍\\n\\n加密货币挖矿，特别是比特币挖矿的演变，已经从使用通用的CPU、FPGA和GPU转向专用ASIC。这些ASIC提供了无与伦比的性能和能源效率。全定制ASIC设计代表了这一演变的顶峰，能够提供满足挖矿操作特定需求的定制化解决方案。\\n\\n现有的关于加密货币挖矿ASIC设计的文献大多来自学术界或非挖矿企业，往往缺乏现实应用性。目前，只有少数几家公司，主要是中国公司（如MicroBT、比特大陆），成功开发了可上市的比特币挖矿ASIC。本文旨在填补这一空白，通过实际行业实践提供见解，提供一个基于挖矿行业现实情况的视角。\\n\\n作为一名在科技行业拥有超过十年经验的专业人士，本文作者开发了世界顶级的比特币ASIC矿机（WhatsMiner）、LTC/DOGE和ETH矿机，并在MicroBT、BTC.COM等公司以及其他无晶圆厂上市公司中发挥了关键作用。他在NASDAQ、港交所和纽交所上市公司中担任重要职务，并在与台积电、德州仪器、ARM和英特尔建立合作关系方面拥有丰富经验，他为比特币和加密货币挖矿的定制ASIC设计领域带来了丰富的知识和实际专业知识。\\n\\n## 方法与设计流程\\n\\n### 设计理念\\n\\n我们的全定制ASIC设计方法注重在低电压运行条件下最大化PPA（功耗、性能和面积）。本节将介绍我们的设计理念和方法：\\n\\n1. **流水线架构**：利用流水线结构在矿机算法中的固有优势，特点是寄存器和组合逻辑阶段。通过使用流水线架构，我们可以高效处理加密货币挖矿所需的高频操作。\\n2. **手动网表与布局**：通过详细脚本创建网表和手动单元布局来优化关键路径。这使我们能够精确控制时序并减少寄生效应。\\n3. **定制单元库**：开发具有优化晶体管数量和动态省电功能的专用单元。定制单元被设计为在尽可能低的电压下运行，以确保最低的功耗。\\n\\n### 实现PPA优势\\n\\n通过定制设计实现PPA优势的详细策略：\\n\\n1. **定制寄存器设计**：利用多比特寄存器和基于锁存器的设计来减少时钟功耗并改善时序借用。多比特寄存器最小化时钟树的功耗并减少整体面积。\\n2. **手动布局**：减少线长并平衡建立和保持时间以提升整体性能。手动布局允许更好地控制互连延迟和串扰，改善信号完整性并降低功耗。\\n3. **优化单元设计**：定制单元被设计为在较低电压下运行，最小化动态功耗并最大化效率。通过针对矿机算法的具体需求量身定制单元设计，我们可以显著提高性能。\\n\\n### 低电压下的可靠性\\n\\n确保定制设计的时序逻辑在低电压下的可靠性包括：\\n\\n1. **精确仿真**：电路级仿真验证定制单元在特定条件下的行为。使用SPICE等工具进行详细的电气仿真，以确保单元在所有PVT（工艺、电压、温度）条件下正确运行。\\n2. **布局一致性**：手动布局以确保均匀性并减少变异性。通过控制物理布局，我们可以最小化工艺变异的影响并确保一致的性能。\\n3. **精确PVT校准**：针对工艺、电压和温度变异的验证。进行广泛的测试和校准，以确保设计在不同工作条件下的稳健性。\\n\\n## 案例研究和结果\\n\\n展示来自全掩模流片的真实数据和案例研究：\\n\\n| 项目  | 工艺节点 | 电压/功率效率         | 算法      |\\n| ----- | -------- | -------------------- | --------- |\\n| SC    | TSMC 28nm | 0.45V, 257J/T         | Blake2b   |\\n| DCR   | TSMC 28nm | 0.45V, 150J/T         | Blake256  |\\n| DASH  | TSMC 16nm | 0.38V, 6.2J/G         | X11       |\\n| BTC   | TSMC 16nm | 0.38V, 65J/T          | SHA-256d  |\\n| BTC   | TSMC 7nm  | 0.30V, 37J/T          | SHA-256d  |\\n| BTC   | Samsung 8nm | 0.31V, 45J/T         | SHA-256d  |\\n| BTC   | SMIC N+1 | 0.30V, 35J/T          | SHA-256d  |\\n\\n这些结果展示了通过我们定制设计方法实现的效率和性能的大幅提升。\\n\\n## 集成和验证\\n\\n### 混合单元签核\\n\\n- **定制单元的集成**：定制单元与来自TSMC和其他晶圆厂的标准单元集成，确保兼容性和性能。定制单元经过表征和验证以匹配标准单元库的要求，从而实现无缝集成。\\n- **签核策略**：确保无缝兼容性和性能的策略包括详细的DRC（设计规则检查）和LVS（版图与原理图对比）检查，以及使用行业标准EDA（电子设计自动化）工具进行时序和功率分析。\\n\\n### 数字与模拟协同设计\\n\\n- **集成技术**：集成数字和模拟组件以优化整体芯片性能。采用混合信号验证和协同仿真等技术确保正确的集成和功能。\\n- **验证方法**：确保在不同操作条件下的鲁棒性的方法包括角落分析、蒙特卡洛模拟和可靠性验证，以解决老化和电迁移问题。\\n\\n## 结论\\n\\n全定制ASIC设计为比特币和加密货币挖矿提供了显著的优势，提供了无与伦比的性能、功率效率和可靠性。通过揭示顶级定制ASIC设计的秘密，本文强调了使行业领袖脱颖而出的方法和创新。随着加密货币挖矿的不断发展，定制ASIC将在推动下一代高效、高性能挖矿硬件中发挥关键作用。\\n\\n[论文的 PDF 版本](/docs/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining.pdf)\\n"},{"lang":"zh","group":"blog","slug":"blog/get-current-commit-id-of-git-and-update-to-package-json","frontmatter":{"title":"获取当前Git提交ID并更新到package.json","date":"2021-08-21T09:19:58.875Z","draft":false,"author":"Tan Shuai","tags":["Git","Package.json","Node.js"],"categories":["软件开发"]},"content":"\\n在开发 Node.js 项目时，您可能希望跟踪 Git 仓库的当前提交 ID。此信息对于调试、版本控制或部署目的可能很有用。实现这一目标的一种方法是在构建过程中将当前提交 ID 更新到 `package.json` 文件中。本文将指导您完成获取 Git 当前提交 ID 并使用 Node.js 将其更新到 `package.json` 文件的步骤。\\n\\n```bash\\n\\"predev\\": \\"node ./node_modules/json/lib/json.js -I -f package.json -e \\\\\\\\\\\\\\"this.commit=\'$(git rev-parse --short HEAD)\'\\\\\\\\\\\\\\"\\",\\n"},{"lang":"zh","group":"blog","slug":"blog/migrate-a-github-lfs-git-large-file-storage-repository-to-aws-codecommit","frontmatter":{"title":"将 GitHub LFS（Git 大文件存储）存储库迁移到 AWS CodeCommit","date":"2022-02-09T09:36:57.481Z","draft":false,"author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["软件开发"]},"content":"\\n我最近将一个使用 Git Large File Storage (LFS) 的 GitHub 仓库迁移到了 AWS CodeCommit。我想分享这个过程，以防你也有类似的需求。以下是根据我的经验制作的逐步指南。\\n\\n## 先决条件\\n\\n在开始之前，请确保你已经安装了以下工具：\\n\\n- Git\\n- Git LFS\\n- AWS CLI\\n\\n## 逐步指南\\n\\n### 1. 克隆仓库\\n\\n首先，使用 `--mirror` 选项克隆你的 GitHub 仓库。这会创建一个仓库的裸克隆，包括所有分支和标签。\\n\\n```zsh\\ngit clone --mirror https://github.com/tanshuai/designs.git designs\\n```\\n\\n### 2. 验证 LFS 文件\\n\\n接下来，列出所有由 Git LFS 管理的文件，以确保一切就绪。\\n\\n```zsh\\ngit lfs ls-files\\n```\\n\\n你应该会看到类似如下的内容：\\n\\n```\\ncadfa0bc9e * Brochure-Trifold-Draft.ai\\naf9b8b8a1c * Brochure-Trifold-English.ai\\n27bb5f4e61 * Brochure-Trifold.ai\\n```\\n\\n### 3. 迁移 LFS 文件\\n\\n现在，导出 LFS 文件。这一步确保它们成为你仓库历史的一部分。\\n\\n```zsh\\ngit lfs migrate export --include=\\"*.ai\\" --everything\\n```\\n\\n你会看到一些进度消息，如下所示：\\n\\n```\\nmigrate: Sorting commits: ..., done.\\nmigrate: Rewriting commits: 100% (20/20), done.\\nmaster 98a3c48d85... -> 82f8873b41...\\nmigrate: Updating refs: ..., done.\\nmigrate: checkout: ..., done.\\nprune: 3 local object(s), 0 retained, done.\\ncadfa0bc9e... (133 MB)\\n27bb5f4e61... (131 MB)\\naf9b8b8a1c... (130 MB), done.\\nprune: Deleting objects: 100% (3/3), done.\\n```\\n\\n### 4. 清理 LFS\\n\\n删除 Git LFS 跟踪信息并卸载 Git LFS。\\n\\n```zsh\\ngit lfs ls-files\\ngit rm .gitattributes -f\\ngit lfs uninstall\\n```\\n\\n### 5. 推送到 AWS CodeCommit\\n\\n最后，将你的仓库推送到 AWS CodeCommit。\\n\\n```zsh\\ngit push https://git-codecommit.us-east-2.amazonaws.com/v1/repos/designs --all\\n```\\n\\n就是这样！通过遵循这些步骤，我成功地将我的 GitHub LFS 仓库迁移到了 AWS CodeCommit。大文件和仓库历史都得到了完美的保留。\\n\\n## 总结\\n\\n如果你按照正确的步骤操作，将使用 Git LFS 的 GitHub 仓库迁移到 AWS CodeCommit 是相当简单的。如果你有任何问题或遇到问题，[AWS CodeCommit 文档](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html)和[Git LFS 文档](https://git-lfs.github.com/)是很好的资源。\\n\\n希望本指南对您有所帮助。编码愉快！\\n"},{"lang":"zh","group":"blog","slug":"blog/reset-restore-all-subdirectories-of-git","frontmatter":{"title":"重置/恢复 Git 的所有子目录","date":"2021-09-22T08:33:49.201Z","draft":false,"author":"谭帅","tags":["Git","版本控制"],"categories":["软件开发"]},"content":"\\n有效管理Git代码库通常需要重置或恢复子目录，以保持代码库的整洁和功能正常。本指南提供了一个简明的分步方法，用于重置或恢复Git代码库中的所有子目录。\\n\\n## 重置子目录\\n\\n以下Git命令会从代码库中移除所有未跟踪的文件和目录。这在执行重置或恢复之前清理不必要的文件时非常有用。\\n\\n```bash\\ngit clean -xfdf -- .\\n```\\n\\n### 命令分解：\\n\\n- `-x`：移除所有未跟踪的文件，包括`.gitignore`忽略的文件。\\n- `-f`：强制移除文件。\\n- `-d`：移除未跟踪的目录。\\n- `-- .`：将命令应用于当前目录及所有子目录。\\n\\n## 恢复子目录\\n\\n要将代码库中的所有文件恢复到最后一次提交的状态，请使用以下命令：\\n\\n```bash\\ngit checkout {HEAD OR BRANCH} -- .\\n```\\n\\n### 命令分解：\\n\\n- `{HEAD OR BRANCH}`：用`HEAD`替换以重置到最新提交，或指定分支名称以重置到特定分支。\\n- `-- .`：将命令应用于当前目录及所有子目录。\\n\\n通过使用这些命令，您可以确保代码库中没有不需要的文件，并且所有文件都恢复到提交的状态。这个过程有助于保持代码库的整洁和组织良好，从而促进更容易的协作和开发。\\n\\n根据您的具体需求和偏好，自由定制本指南。有关更高级的Git操作，请参阅[官方Git文档](https://git-scm.com/doc)。\\n"},{"lang":"zh","group":"blog","slug":"blog/ultra-low-cost-ddr3-ddr4-lpddr3-lpddr4-memory-test-system","frontmatter":{"title":"超低成本的DDR3、DDR4、LP-DDR3和LP-DDR4内存测试系统","description":"探索超低成本的DDR3、DDR4、LP-DDR3和LP-DDR4内存测试系统。价格约为20万美元，提供高速测试、多功能、先进特性和低功耗。非常适合寻求成本效益高且可靠的内存测试解决方案的企业。","date":"2024-06-01T00:00:00.000Z","categories":["半导体"],"author":"谭帅","tags":["DDR3","DDR4","LP-DDR3","LP-DDR4","内存测试系统"],"draft":false},"content":"\\n如果你像我一样，总是寻求在不牺牲质量的情况下找到经济高效的解决方案，那么你一定会喜欢我今天要分享的内容。在我们这个快节奏的科技世界里，确保设备的内存达到标准是至关重要的。像T5503/T5503HS2这样的高端选择非常出色，但价格昂贵。幸运的是，Zeeis推出了一款超低成本的内存测试系统，而且性能毫不逊色。\\n\\n## 重要性\\n\\n当我第一次了解Zeeis的内存测试系统时，我很感兴趣。该系统设计用于处理DDR3、DDR4、LP-DDR3和LP-DDR4内存技术。无论你是使用旧系统还是最新技术，这个系统都能满足你的需求。\\n\\n### 高速测试\\n\\n其中一个突出特点是它支持800到3200 MT/s的数据传输率，适用于DDR3和DDR4。它可以在高达1600 MHz的时钟速度下评估内存模块。这意味着可以进行全面而可靠的测试，确保你的设备性能最佳。\\n\\n### 多功能性\\n\\n这个系统的多功能性是一个改变游戏规则的优势。它支持多种内存标准，适用于从消费电子到高性能计算的广泛应用。而且，它具有前瞻性。随着新内存技术的出现，该系统可以轻松升级以支持这些技术。\\n\\n### 成本效益\\n\\n现在，让我们谈谈价格。大约20万美元，这个系统提供了极佳的投资回报率。它对中小型企业来说足够经济实惠，确保了顶级测试能力而不会导致破产。\\n\\n### 高级功能\\n\\n该系统配备了先进的测试算法，包括集成的算法模式生成器（ALPG）。这确保了内存评估的准确性和可靠性，使每个模块都能达到严格的性能标准。\\n\\n### 低功耗\\n\\n同样令人印象深刻的是它的低功耗。这与LP-DDR3和LP-DDR4内存技术的趋势一致。通过在较低电压下运行，它不仅降低了能源成本，还减少了热量输出，是一种环保选择。\\n\\n## 为什么选择 Zeeis？\\n\\n### 可扩展性\\n\\nZeeis 的系统在设计时考虑到了可扩展性。随着新内存技术的出现，该系统可以轻松升级，确保长期使用并减少频繁更换的需求。\\n\\n### 支持和文档\\n\\n另一个重要优点是 Zeeis 的广泛支持和文档。无论你是经验丰富的专业人士还是内存测试的新手，他们详细的指南和响应迅速的客户服务都能确保你有一个顺利的体验。\\n\\n### 满足市场需求\\n\\n随着从智能手机到数据中心的各个领域对高速内存需求的增长，拥有可靠且成本效益高的内存测试解决方案变得至关重要。Zeeis 的系统满足了这些需求，确保你的产品在实际应用中能够完美运行并达到市场标准。\\n\\n## 结论\\n\\n简而言之，Zeeis 的超低成本 DDR3、DDR4、LP-DDR3 和 LP-DDR4 内存测试系统是那些需要可靠、多功能且经济实惠的内存测试解决方案的理想选择。它以其他高端系统的一小部分成本提供高性能，使公司能够在保持高标准的同时不超出预算。\\n\\n如果你有兴趣通过一个为未来内存技术设计的系统来增强你的测试能力，请随时通过 [i@tanshuai.com](mailto:i@tanshuai.com) 联系我以获取更多信息。\\n\\n祝你测试愉快！\\n"},{"lang":"zh","group":"blog","slug":"blog/usr-bin-sudo-must-be-owned-by-uid-0-and-have-the-setuid-bit-set-on-ubuntu-20-04","frontmatter":{"title":"/usr/bin/sudo 必须由 uid 0 拥有并在 Ubuntu 20.04 上设置 setuid 位","date":"2021-10-08T13:07:25.406Z","draft":false,"author":"谭帅","tags":["Ubuntu","Linux","Sudo"],"categories":["Linux"]},"content":"\\n如果您在 Ubuntu 20.04 上遇到错误信息“/usr/bin/sudo 必须由 uid 0 拥有并设置 setuid 位”，请按照以下步骤解决问题。\\n\\n1. 在启动过程中，按下“ESC”键进入 GRUB 菜单。\\n\\n![GRUB 屏幕](/images/content/wx20211008-210752.png \\"GRUB 屏幕\\")\\n\\n2. 选择第一个选项“Ubuntu”，然后按“e”键编辑启动参数。\\n\\n![编辑启动参数](/images/content/wx20211008-210841.png \\"编辑启动参数\\")\\n\\n3. 在以“linux”开头的行末尾添加以下字符串，以进入救援模式：\\n\\n```bash\\nsystemd.unit=rescue.target\\n```\\n\\n4. 进入救援模式后，执行以下命令以恢复 `/usr/bin/sudo` 的正确权限和所有权：\\n\\n```bash\\npkexec chmod a=rx,u+ws /usr/bin/sudo\\n```\\n\\n此命令设置必要的权限，并确保 `sudo` 由 root 用户拥有且设置了 setuid 位。\\n\\n通过按照这些步骤操作，您应该能够解决问题并恢复 `sudo` 命令在 Ubuntu 系统上的正常功能。\\n\\n---\\n"},{"lang":"ja","group":"blog","slug":"blog/aws-codecommit-the-githubs-large-file-storage-git-lfs-free-alternative","frontmatter":{"title":"AWS CodeCommit： GitHub Large File Storage (Git LFS)の無料代替案","description":"AWS CodeCommitがGitHubのLarge File Storage (Git LFS)に代わるコスト効率の高い効果的な代替手段であることを発見してください。この記事では、Git LFSの制限、AWS CodeCommitを大容量ファイルストレージとして使用する利点、そしてGit LFSからCodeCommitへの移行手順をステップバイステップで解説します。AWSのスケーラブルで安全なインフラストラクチャで開発ワークフローを向上させましょう。","date":"2022-02-09T00:00:00.000Z","author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["ソフトウェア開発"],"draft":false},"content":"\\nAWS CodeCommitは、GitHubのLarge File Storage（Git LFS）サービスに代わる強力な選択肢を提供し、Gitリポジトリ内の大容量ファイル管理に効率的なソリューションを提供します。\\n\\n## Git LFSの使用を再考すべき理由\\n\\nGit LFSは、Gitリポジトリ内の大容量ファイルを扱うための一般的な選択肢ですが、いくつかの制限と課題があります。Git LFSは追加のセットアップと管理を必要とし、開発ワークフローを複雑にする可能性があります。さらに、Git LFSに関連するストレージと帯域幅のコストは、多くの大容量ファイルや広範なコラボレーションを含むプロジェクトでは急速に増加する可能性があります。\\n\\n## GitHubのLarge File Storageサービスが完璧ではない理由\\n\\nGitHubのLarge File Storageサービスは便利ですが、固有の欠点があります。主な問題は、ストレージと帯域幅に関連するコストであり、大規模なプロジェクトには高額になる可能性があります。さらに、Git LFSの管理は煩雑で、開発者はLFSクライアントのインストールと設定、特定のファイルの追跡、リポジトリの他の部分と分離された大容量ファイルの取り扱いによるマージコンフリクトの処理を行う必要があります。\\n\\n## Gitで大容量ファイルを保存するためにAWS CodeCommitを使用する理由\\n\\nAWS CodeCommitは、Git LFSの必要なしにGitリポジトリ内で大容量ファイルを保存するための魅力的な選択肢を提供します。CodeCommitは、他のAWSサービスとシームレスに統合されるフルマネージドのソース管理サービスであり、堅牢なスケーラビリティ、セキュリティ、およびコスト効率を提供します。CodeCommitを活用することで、開発者はGit LFSの管理の追加オーバーヘッドを回避しながら、AWSの強力なインフラストラクチャと従量課金モデルの利点を享受できます。\\n\\n## GitHubと比較したAWS CodeCommitの制限\\n\\nその利点にもかかわらず、AWS CodeCommitはGitHubと比較していくつかの制限があります。GitHubの広範なコミュニティサポート、豊富な統合エコシステム、およびGitHub ActionsやGitHub Pagesのような高度な機能は、CodeCommitでは完全に再現されない場合があります。さらに、GitHubのユーザーインターフェースやコラボレーションツールに慣れている開発者にとって、CodeCommitへの移行にはある程度の調整が必要です。\\n\\n## Git LFS リポジトリを CodeCommit に移行する方法\\n\\nGit LFS リポジトリを CodeCommit に移行するには、いくつかのステップが必要です。まず、すべての大きなファイルが Git LFS リポジトリで正しく追跡されていることを確認します。次に、リポジトリをクローンし、Git LFS の追跡設定を削除します。その後、AWS CodeCommit に新しいリポジトリを作成し、ローカルリポジトリをプッシュします。このプロセスを円滑に進めるための詳細なドキュメントとスクリプトが用意されており、データの損失や中断を避けることができます。\\n\\n## より良い解決策\\n\\nGit LFS に大きく依存しているチームやプロジェクトにとって、AWS CodeCommit を代替として検討することは大きな利点をもたらします。CodeCommit は AWS エコシステムとシームレスに統合されており、コスト効果が高くスケーラブルな性質を持つため、Git リポジトリ内の大きなファイルを管理するための魅力的なオプションとなります。Git LFS に関連する課題を軽減することで、CodeCommit は開発チームがコーディングとコラボレーションに集中できるようにし、生産性とイノベーションを促進します。\\n\\n結論として、AWS CodeCommit は GitHub の Large File Storage サービスに対する実行可能でコスト効果が高く効率的な代替手段を提供します。AWS の堅牢なインフラを活用することで、開発者は Git リポジトリ内の大きなファイルを容易に管理し、ワークフローを最適化し、オーバーヘッドを削減することができます。\\n"},{"lang":"ja","group":"blog","slug":"blog/check-voltage-current-on-macos-for-power-adapter","frontmatter":{"title":"MacOSでの電圧と電流の確認方法（電源アダプター用）","meta_title":"MacOSでの電圧と電流の確認方法（電源アダプター用）","date":"2022-02-14T00:00:00.000Z","author":"Tan Shuai","tags":["MacOS","電源アダプター","電圧","電流"],"categories":["MacOS"],"draft":false},"content":"\\nMacBookを使用しているとき、電源アダプタの電圧と電流を確認したいことがあるかもしれません。ここでは、MacOSで電源アダプタの電圧と電流を確認する簡単な方法を紹介します。\\n\\nTerminal.appを開き、次のコマンドを入力します：\\n\\n`ioreg -l -n AppleSmartBattery -r |grep AppleRawAdapterDetails`\\n\\n次のような電流と電圧の情報が得られます：\\n\\n```json\\n\\"AppleRawAdapterDetails\\" = ({\\"IsWireless\\"=No,\\"AdapterID\\"=0,\\"FamilyCode\\"=18446744073172697098,\\"Watts\\"=89,**\\"Current\\"=4450**,\\"PMUConfiguration\\"=4448,**\\"Voltage\\"=20000**})\\n"},{"lang":"ja","group":"blog","slug":"blog/convert-markdown-academic-paper-pdf-macos","frontmatter":{"title":"macOSでMarkdownを学術論文スタイルのPDFに素早く変換する","meta_title":"Pandocを使ってmacOSでMarkdownを学術論文スタイルのPDFに変換","description":"PandocとBasicTeXを使用して、macOSでMarkdown文書を学術論文スタイルのPDFに変換する方法を学びます。この簡単で迅速な方法は、学術論文用のプロフェッショナルなPDFファイルを作成するのに最適です。","date":"2022-03-03T00:00:00.000Z","categories":["ソフトウェア開発"],"author":"タン・シュアイ","tags":["Pandoc","LaTeX","PDF","論文","Markdown","macOS"],"draft":false},"content":"\\nこのガイドでは、macOSでPandocとBasicTeXを使用してMarkdownドキュメントを学術スタイルのPDFに変換する方法をご紹介します。この方法は迅速かつ簡単で、学術論文用のプロフェッショナルなPDFファイルを作成するのに最適です。\\n\\n### ステップ1: PandocとBasicTeXのインストール\\n\\nまず、macOSシステムにPandocとBasicTeXをインストールする必要があります。私が行った手順は次のとおりです。\\n\\n1. **Pandocのインストール**: ターミナルを開き、次のコマンドを入力してPandocをインストールします：\\n\\n   ```bash\\n   brew install pandoc\\n   ```\\n\\n2. **BasicTeXのインストール**: MacTeXは非常に大きいので、スペースを節約するためにより小さなBasicTeXパッケージを選びました。次のコマンドを実行します：\\n\\n   ```bash\\n   brew install --cask basictex\\n   ```\\n\\n3. **一般的なLaTeXパッケージのインストール**: PDFを生成するために必要なパッケージを確実に揃えるため、次のコマンドを実行します：\\n   ```bash\\n   sudo tlmgr update --self\\n   sudo tlmgr install collection-basic collection-latex collection-latexrecommended collection-fontsrecommended\\n   ```\\n\\n### ステップ2: Markdownファイルの準備\\n\\n次に、Markdownファイル（例：`paper.md`）を作成します。ここでは、タイトル、著者、日付、連絡先情報を含むファイルの設定方法を示します：\\n\\n```markdown\\n---\\ntitle: \\"Your Paper Title\\"\\nsubtitle: \\"Optional Subtitle\\"\\ndate: \\\\today\\n\\nauthor: |\\n  | Your Name\\n  | your-email@tanshuai.com\\n  | www.tanshuai.com\\n---\\n\\n# Abstract\\n\\nYour abstract here.\\n\\n# Introduction\\n\\nYour introduction here.\\n\\n# Methodology\\n\\nYour methodology here.\\n\\n# Results\\n\\nYour results here.\\n\\n# Conclusion\\n\\nYour conclusion here.\\n```\\n\\n### ステップ3: Pandocを使ってMarkdownをPDFに変換\\n\\n次に、MarkdownファイルをPDFに変換します。私はターミナルで次のコマンドを使用しました：\\n\\n```bash\\npandoc paper.md -o paper.pdf --pdf-engine=xelatex\\n```\\n\\nこのコマンドはPandocのデフォルトのLaTeXテンプレートを使用してMarkdownファイルを学術スタイルのPDFに変換し、著者の連絡先情報を名前の下に含めます。\\n\\n### 追加のヒント\\n\\n- **カスタムLaTeXテンプレート**: より高度なフォーマットや特定のスタイルが必要な場合は、カスタムLaTeXテンプレートを作成またはダウンロードしてPandocと一緒に使用できます：\\n\\n  ```bash\\n  pandoc paper.md -o paper.pdf --pdf-engine=xelatex --template=your-template.tex\\n  ```\\n\\n- **追加のメタデータ**: YAMLメタデータヘッダーに要約やキーワードなどの追加情報を記載し、カスタムテンプレートで使用できます。\\n\\n### 結論\\n\\nこれらの手順に従うことで、macOSでMarkdownドキュメントを簡単に学術スタイルのPDFに変換できます。PandocとBasicTeXを使用すると、このプロセスは迅速かつ効率的になり、プロフェッショナルなPDFドキュメントを生成するのに最適です。学術論文、技術報告書、その他の正式なドキュメントの準備に、この方法は非常に有効です。メタデータヘッダーに連絡先情報を含めることで、ドキュメントにプロフェッショナルな印象を与えることができます。\\n\\nこのガイドが役に立つことを願っています！質問がある場合や問題が発生した場合は、遠慮なくお問い合わせください。楽しい執筆を！\\n"},{"lang":"ja","group":"blog","slug":"blog/electron-build-tools-error-error-failed-to-run-choco-install-pywin32-yes","frontmatter":{"title":"Electron Build Tools `エラー Error： Failed to run \\"choco install pywin32 --yes\\"`","date":"2021-09-08T00:00:00.000Z","draft":false,"author":"Tan Shuai","tags":["Electron","Build Tools","PyWin32","Chocolatey","Win32"],"categories":["Software Development"]},"content":"\\nElectron Build Toolsを使用している際に、Chocolatey経由でpywin32をインストールする際のエラーに遭遇することがあります。これは特にプロジェクトに必要な依存関係である場合、非常に苛立たしいものです。以下に、その問題と解決策の詳細を説明します。\\n\\n### エラーの詳細\\n\\nElectron Build Toolsを使用してElectronプロジェクトを初期化する際、次のようなエラーメッセージが表示されることがあります：\\n\\n```bash\\nE:\\\\>e init main-testing -i testing --root=e:/src/electron\\nWARN A fixable error has occurred\\n--> A required dependency \\"pywin32\\" could not be located, it probably has to be installed.\\nDo you want build-tools to try fix this for you? [y/n]: y\\n\\nRunning \\"choco install pywin32 --yes\\"\\nERROR Error: Failed to run \\"choco install pywin32 --yes\\"\\n    at spawnSyncWithLog (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:11:11)\\n    at fix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:39:9)\\n    at maybeAutoFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\maybe-auto-fix.js:13:3)\\n    at whichAndFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\which.js:10:5)\\n    at checkPlatformDependencies (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:61:7)\\n    at Object.<anonymous> (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\e-init.js:165:3)\\n    at Module._compile (internal/modules/cjs/loader.js:1072:14)\\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1101:10)\\n    at Module.load (internal/modules/cjs/loader.js:937:32)\\n    at Function.Module._load (internal/modules/cjs/loader.js:778:12)\\n```\\n\\nこのエラーは通常、pywin32パッケージのインストールスクリプトがリモートサーバー上の必要なファイルを見つけられないために発生します。これにより、指定されたURLでファイルが利用できないことを示す404エラーが発生します。\\n\\n### エラーの理解\\n\\nエラーメッセージの重要な部分は次のとおりです：\\n\\n```bash\\nERROR: The remote file either doesn\'t exist, is unauthorized, or is forbidden for url \'http://sourceforge.net/projects/pywin32/files/pywin32/Build%20219/pywin32-219.win-amd64-py3.9.exe/download\'. Exception calling \\"GetResponse\\" with \\"0\\" argument(s): \\"The remote server returned an error: (404) Not Found.\\"\\n\\nこのことは、pywin32のダウンロードURLが無効になっていることを示しており、Chocolateyが必要なインストールファイルを取得できないことを意味します。\\n\\n### トラブルシューティングの手順\\n\\nこの問題を解決するために取るべきいくつかの手順を以下に示します：\\n\\n#### 1. Chocolateyのインストールを確認\\n\\nChocolateyが正しくインストールされ、最新バージョンに更新されていることを確認してください。Chocolateyのバージョンを確認するには、以下を使用します：\\n\\n```bash\\nchoco --version\\n```\\n\\nChocolateyを更新するには、以下を使用します：\\n\\n```bash\\nchoco upgrade chocolatey\\n```\\n\\n#### 2. pywin32を手動でインストール\\n\\n自動インストールが失敗しているため、pywin32を手動でインストールしてみてください。適切なバージョンを公式の[pywin32 GitHubリリースページ](https://github.com/mhammond/pywin32/releases)からダウンロードし、手動でインストールしてください。\\n\\n#### 3. インストールスクリプトを修正\\n\\nElectron Build Toolsスクリプトを制御できる場合は、pywin32の有効なURLを指すように修正するか、手動インストールプロセスを処理するようにスクリプトを修正できます。\\n\\n#### 4. 代替パッケージマネージャーを使用\\n\\nChocolateyが引き続き失敗する場合、Pythonパッケージの代替パッケージマネージャーであるpipを使用することを検討してください：\\n\\n```bash\\npip install pywin32\\n```\\n\\n### pywin32を手動でインストールする例\\n\\n1. [公式GitHubリリース](https://github.com/mhammond/pywin32/releases)から適切なpywin32インストーラーをダウンロードします。\\n2. インストーラーを実行し、インストール手順に従います。\\n3. 簡単なPythonスクリプトを実行して、pywin32のインストールを確認します：\\n\\n```python\\nimport win32api\\nprint(win32api.GetVersionEx())\\n```\\n\\n「`choco install pywin32 --yes`を実行できませんでした」というエラーに遭遇すると、開発プロセスが妨げられることがあります。しかし、根本的な原因を理解し、上記の手順に従うことで、この問題を克服し、Electronプロジェクトのセットアップを続けることができます。\\n"},{"lang":"ja","group":"blog","slug":"blog/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining","frontmatter":{"title":"ビットコインと暗号通貨マイニングのためのフルカスタムASIC設計の秘密","date":"2022-05-30T00:00:00.000Z","categories":["半導体","ビットコイン","暗号通貨","ブロックチェーン"],"author":"タン・シュアイ","tags":["ASIC","ビットコイン","マイニング","BTC"],"draft":false,"contact":"タン・シュアイ | tanshuai@btc.com | tanshuai.com"},"content":"\\nタン・シュアイ  \\n[tanshuai@btc.com](mailto:tanshuai@btc.com)  \\n[tanshuai.com](https://tanshuai.com)\\n\\n---\\n\\n## 概要\\n\\n仮想通貨マイニングの競争激しい世界では、電力効率、ハッシュレート性能、信頼性が非常に重要です。本稿では、トップクラスのフルカスタムASIC（特定用途向け集積回路）設計について、業界の秘密と専門的な手法を明らかにします。この論文は、トップASICマイナー企業の技術専門家によって書かれており、高性能なビットコインや仮想通貨マイニングを支えるための高度な設計技術、詳細な物理レイアウト、および包括的な検証プロセスを駆使して、フルカスタムASICの卓越した能力を最大限に引き出す方法を紹介しています。\\n\\n## はじめに\\n\\n仮想通貨マイニング、特にビットコインマイニングの進化は、汎用CPU、FPGA、およびGPUから、専用のASICへとシフトしてきました。これらのASICは、比類のない性能とエネルギー効率を提供します。フルカスタムASIC設計はこの進化の頂点を示し、マイニングオペレーションの特定の要求に応じたカスタマイズされたソリューションを可能にします。\\n\\n仮想通貨マイニング向けASIC設計に関する既存の文献の多くは、学界や非マイニング企業から出されており、実際の適用性に欠けることが多いです。これまでのところ、主に中国（例：MicroBT、Bitmain）を中心に、数社のみが市場性のあるビットコインマイニングASICを成功裏に開発してきました。本稿は、実際の業界の実践から得られた洞察を提供し、マイニングセクターの現実に基づいた視点を提供することを目的としています。\\n\\n技術業界で10年以上の経験を持つ著者は、世界最高のビットコインASICマイナー（WhatsMiner）、LTC/DOGEおよびETHマイナーを開発し、MicroBT、BTC.COM、その他のパブリックファブレス企業で重要な役割を果たしてきました。著者は、NASDAQ、HKSE、およびNYSEに上場している企業で要職を歴任し、TSMC、テキサス・インスツルメンツ、ARM、インテルとのパートナーシップを確立する豊富な経験を持ち、ビットコインおよび仮想通貨マイニング向けのカスタムASIC設計の分野に豊富な知識と実践的な専門知識をもたらします。\\n\\n## 手法と設計フロー\\n\\n### 設計理念\\n\\n我々のフルカスタムASIC設計へのアプローチは、特に低電圧動作条件下でPPA（Power, Performance, and Area）を最大化することに重点を置いています。このセクションでは、我々の設計理念と手法について説明します。\\n\\n1. **パイプラインアーキテクチャ**: パイプライン構造の持つ特性を活かしたマイニングアルゴリズムに最適な設計。レジスタと組み合わせ論理段階により構成されるパイプラインアーキテクチャを使用することで、暗号通貨マイニングに必要な高周波動作を効率的に処理します。\\n2. **手動ネットリストと配置**: クリティカルパスの最適化のための詳細なスクリプトによるネットリスト作成と手動セル配置。これにより、タイミングの精密な制御が可能になり、寄生効果を減少させます。\\n3. **カスタムセルライブラリ**: トランジスタ数を最適化し、動的省電力機能を備えた特別なセルの開発。カスタムセルは可能な限り低い電圧で動作するよう設計されており、電力消費を最小限に抑えます。\\n\\n### PPAのメリットを達成するために\\n\\nカスタム設計によるPPAのメリットを達成するための詳細な戦略：\\n\\n1. **カスタムレジスタ設計**: クロックパワーを削減し、タイミング借用を改善するためのマルチビットレジスタとラッチベースの設計。マルチビットレジスタはクロックツリーの電力消費を最小限に抑え、全体の面積を削減します。\\n2. **手動配置**: 配線長を短縮し、セットアップタイムとホールドタイムのバランスを取り、全体のパフォーマンスを向上。手動配置により、相互接続遅延やクロストークをより良く制御し、信号の整合性を向上させ、電力消費を削減します。\\n3. **最適化されたセル設計**: カスタムセルは低電圧で動作するよう設計され、動的電力消費を最小限に抑え、効率を最大化します。セル設計をマイニングアルゴリズムの特定のニーズに合わせることで、パフォーマンスの大幅な向上を実現します。\\n\\n### 低電圧での信頼性\\n\\n低電圧でカスタム設計されたタイミングロジックの信頼性を確保するためには：\\n\\n1. **正確なシミュレーション**: 特定の条件下でカスタムセルの動作を検証するための回路レベルシミュレーション。SPICEなどのツールを使用して詳細な電気シミュレーションを行い、すべてのPVT（プロセス、電圧、温度）コーナーでセルが正しく動作することを確認します。\\n2. **一貫性のある配置**: 均一性を確保し、変動性を減少させるための手動配置。物理レイアウトを制御することで、プロセス変動の影響を最小限に抑え、一貫したパフォーマンスを確保します。\\n3. **正確なPVTキャリブレーション**: プロセス、電圧、温度の変動に対する検証。異なる動作条件下での設計の堅牢性を確保するために、広範なテストとキャリブレーションを実施します。\\n\\n## ケーススタディと結果\\n\\nフルマスクテープアウトの実例データとケーススタディを紹介します：\\n\\n| プロジェクト | プロセスノード | 電圧/電力効率 | アルゴリズム |\\n| ----------- | ------------- | ------------- | ------------ |\\n| SC          | TSMC 28nm     | 0.45V, 257J/T | Blake2b      |\\n| DCR         | TSMC 28nm     | 0.45V, 150J/T | Blake256     |\\n| DASH        | TSMC 16nm     | 0.38V, 6.2J/G | X11          |\\n| BTC         | TSMC 16nm     | 0.38V, 65J/T  | SHA-256d     |\\n| BTC         | TSMC 7nm      | 0.30V, 37J/T  | SHA-256d     |\\n| BTC         | Samsung 8nm   | 0.31V, 45J/T  | SHA-256d     |\\n| BTC         | SMIC N+1      | 0.30V, 35J/T  | SHA-256d     |\\n\\nこれらの結果は、私たちのカスタム設計アプローチによって達成可能な効率と性能の大幅な向上を示しています。\\n\\n## 統合と検証\\n\\n### ミックスセルサインオフ\\n\\n- **カスタムセルの統合**: カスタムセルは、TSMCや他のファウンドリからの標準セルと統合され、互換性と性能を確保します。カスタムセルは標準セルライブラリの要件に一致するように特性評価と検証が行われ、シームレスな統合が可能です。\\n- **サインオフ戦略**: シームレスな互換性と性能を確保するための戦略には、詳細なDRC（設計規則チェック）およびLVS（レイアウトと回路図の一致チェック）、および業界標準のEDA（電子設計自動化）ツールを使用したタイミングおよび電力解析が含まれます。\\n\\n### デジタルとアナログの共同設計\\n\\n- **統合技術**: 全体のチップ性能を最適化するためにデジタルおよびアナログコンポーネントを統合します。適切な統合と機能を確保するために、ミックスシグナル検証および共同シミュレーションなどの技術が使用されます。\\n- **検証手法**: 異なる動作条件での堅牢性を確保するための手法には、コーナー分析、モンテカルロシミュレーション、およびエージングや電気移動に対処するための信頼性検証が含まれます。\\n\\n## 結論\\n\\nフルカスタムASIC設計は、ビットコインおよび暗号通貨のマイニングにおいて、比類のない性能、電力効率、および信頼性を提供します。本稿では、トップクラスのカスタムASIC設計の秘密を明らかにし、業界のリーダーを際立たせる手法と革新を強調しています。暗号通貨のマイニングが進化を続ける中で、カスタムASICは高効率・高性能の次世代マイニングハードウェアを推進する上で重要な役割を果たすでしょう。\\n\\n論文の[PDF版](/docs/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining.pdf)\\n"},{"lang":"ja","group":"blog","slug":"blog/get-current-commit-id-of-git-and-update-to-package-json","frontmatter":{"title":"Gitの現在のコミットIDを取得してpackage.jsonに更新する","date":"2021-08-21T09:19:58.875Z","draft":false,"author":"Tan Shuai","tags":["Git","Package.json","Node.js"],"categories":["ソフトウェア開発"]},"content":"\\nNode.jsプロジェクトを開発する際に、Gitリポジトリの現在のコミットIDを追跡したい場合があります。この情報は、デバッグ、バージョニング、またはデプロイメントの目的で役立つことがあります。これを実現する一つの方法は、ビルドプロセス中に`package.json`ファイルを現在のコミットIDで更新することです。この記事では、Gitの現在のコミットIDを取得し、それをNode.jsを使用して`package.json`ファイルに更新する手順を説明します。\\n\\n```bash\\n\\"predev\\": \\"node ./node_modules/json/lib/json.js -I -f package.json -e \\\\\\\\\\\\\\"this.commit=\'$(git rev-parse --short HEAD)\'\\\\\\\\\\\\\\"\\",\\n"},{"lang":"ja","group":"blog","slug":"blog/migrate-a-github-lfs-git-large-file-storage-repository-to-aws-codecommit","frontmatter":{"title":"GitHub LFS (Git Large File Storage) リポジトリを AWS CodeCommit に移行する","date":"2022-02-09T09:36:57.481Z","draft":false,"author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["ソフトウェア開発"]},"content":"\\n最近、Git Large File Storage (LFS) を使用している GitHub リポジトリの一つを AWS CodeCommit に移行しました。同じことを考えている方のために、その手順を共有したいと思います。以下は私の経験に基づいたステップバイステップガイドです。\\n\\n## 前提条件\\n\\n始める前に、以下のツールがインストールされていることを確認してください：\\n\\n- Git\\n- Git LFS\\n- AWS CLI\\n\\n## ステップバイステップガイド\\n\\n### 1. リポジトリをクローン\\n\\nまず、`--mirror` オプションを使用して GitHub リポジトリをクローンします。これにより、すべてのブランチとタグを含むベアクローンが作成されます。\\n\\n```zsh\\ngit clone --mirror https://github.com/tanshuai/designs.git designs\\n```\\n\\n### 2. LFSファイルを確認\\n\\n次に、Git LFS で管理されているすべてのファイルをリスト表示し、すべてが揃っていることを確認します。\\n\\n```zsh\\ngit lfs ls-files\\n```\\n\\n以下のような出力が見られるはずです：\\n\\n```\\ncadfa0bc9e * Brochure-Trifold-Draft.ai\\naf9b8b8a1c * Brochure-Trifold-English.ai\\n27bb5f4e61 * Brochure-Trifold.ai\\n```\\n\\n### 3. LFSファイルを移行\\n\\n次に、LFSファイルをエクスポートします。このステップにより、これらのファイルがリポジトリの履歴の一部として保存されます。\\n\\n```zsh\\ngit lfs migrate export --include=\\"*.ai\\" --everything\\n```\\n\\n以下のような進行状況メッセージが表示されます：\\n\\n```\\nmigrate: Sorting commits: ..., done.\\nmigrate: Rewriting commits: 100% (20/20), done.\\nmaster 98a3c48d85... -> 82f8873b41...\\nmigrate: Updating refs: ..., done.\\nmigrate: checkout: ..., done.\\nprune: 3 local object(s), 0 retained, done.\\ncadfa0bc9e... (133 MB)\\n27bb5f4e61... (131 MB)\\naf9b8b8a1c... (130 MB), done.\\nprune: Deleting objects: 100% (3/3), done.\\n```\\n\\n### 4. LFSをクリーンアップ\\n\\nGit LFS の追跡情報を削除し、Git LFS をアンインストールします。\\n\\n```zsh\\ngit lfs ls-files\\ngit rm .gitattributes -f\\ngit lfs uninstall\\n```\\n\\n### 5. AWS CodeCommit にプッシュ\\n\\n最後に、リポジトリを AWS CodeCommit にプッシュします。\\n\\n```zsh\\ngit push https://git-codecommit.us-east-2.amazonaws.com/v1/repos/designs --all\\n```\\n\\nこれで完了です！これらの手順に従うことで、GitHub LFS リポジトリを AWS CodeCommit に無事に移行することができました。大きなファイルとリポジトリの履歴も完璧に保存されました。\\n\\n## まとめ\\n\\nGit LFS を使用している GitHub リポジトリを AWS CodeCommit に移行するのは、適切な手順に従えば非常に簡単です。質問や問題がある場合は、[AWS CodeCommit ドキュメント](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) や [Git LFS ドキュメント](https://git-lfs.github.com/) を参照すると良いでしょう。\\n\\nこのガイドがお役に立てれば幸いです。楽しいコーディングを！\\n"},{"lang":"ja","group":"blog","slug":"blog/reset-restore-all-subdirectories-of-git","frontmatter":{"title":"Gitの全てのサブディレクトリをリセット/復元する","date":"2021-09-22T08:33:49.201Z","draft":false,"author":"Tan Shuai","tags":["Git","バージョン管理"],"categories":["ソフトウェア開発"]},"content":"\\nGit リポジトリを効果的に管理するためには、サブディレクトリをリセットまたは復元して、クリーンで機能的なコードベースを維持する必要があります。このガイドでは、Git リポジトリ内のすべてのサブディレクトリをリセットまたは復元するための簡潔で段階的なアプローチを提供します。\\n\\n## サブディレクトリのリセット\\n\\n次の Git コマンドは、リポジトリからすべての追跡されていないファイルとディレクトリを削除します。これは、リセットまたは復元を行う前に不要なファイルをクリーンアップするのに役立ちます。\\n\\n```bash\\ngit clean -xfdf -- .\\n```\\n\\n### コマンドの内訳:\\n\\n- `-x`: `.gitignore` によって無視されているファイルを含む、すべての追跡されていないファイルを削除します。\\n- `-f`: ファイルの削除を強制します。\\n- `-d`: 追跡されていないディレクトリを削除します。\\n- `-- .`: 現在のディレクトリおよびすべてのサブディレクトリに対してコマンドを適用します。\\n\\n## サブディレクトリの復元\\n\\nリポジトリ内のすべてのファイルを最後にコミットされた状態に復元するには、次のコマンドを使用します。\\n\\n```bash\\ngit checkout {HEAD OR BRANCH} -- .\\n```\\n\\n### コマンドの内訳:\\n\\n- `{HEAD OR BRANCH}`: 最新のコミットにリセットするには `HEAD` を使用するか、特定のブランチにリセットするにはブランチ名を指定します。\\n- `-- .`: 現在のディレクトリおよびすべてのサブディレクトリに対してコマンドを適用します。\\n\\nこれらのコマンドを使用することで、リポジトリを不要なファイルから解放し、すべてのファイルをコミットされた状態に復元できます。このプロセスは、クリーンで整理されたコードベースを維持し、より容易なコラボレーションと開発を促進します。\\n\\nこのガイドを特定のニーズや好みに応じてカスタマイズしてください。より高度な Git 操作については、[公式 Git ドキュメント](https://git-scm.com/doc)を参照してください。\\n"},{"lang":"ja","group":"blog","slug":"blog/ultra-low-cost-ddr3-ddr4-lpddr3-lpddr4-memory-test-system","frontmatter":{"title":"超低コストDDR3、DDR4、LP-DDR3＆LP-DDR4メモリテストシステム","description":"DDR3、DDR4、LP-DDR3、LP-DDR4技術のための超低コストメモリテストシステムをご紹介します。約20万ドルで、高速テスト、多用途、高度な機能、低消費電力を提供します。コスト効率が高く信頼性のあるメモリテストソリューションを求める企業に最適です。","date":"2024-06-01T00:00:00.000Z","categories":["半導体"],"author":"Tan Shuai","tags":["DDR3","DDR4","LP-DDR3","LP-DDR4","メモリテストシステム"],"draft":false},"content":"\\nあなたが私のように、品質を犠牲にすることなくコスト効率の高い解決策を常に探しているなら、今日共有する内容を気に入るでしょう。急速に進化するテクノロジーの世界では、デバイスのメモリが十分であることを確保することが重要です。T5503/T5503HS2のような高級オプションは素晴らしいですが、高価です。幸いなことに、Zeeisはパフォーマンスを犠牲にせずに超低コストのメモリテストシステムを提供しています。\\n\\n## これが重要な理由\\n\\nZeeisのメモリテストシステムについて初めて知ったとき、私は興味を持ちました。このシステムはDDR3、DDR4、LP-DDR3、LP-DDR4のメモリ技術に対応するように設計されています。古いシステムから最新のテクノロジーまで、このシステムはすべてをカバーしています。\\n\\n### 高速テスト\\n\\n注目すべき特徴の一つは、DDR3およびDDR4の両方で800から3200 MT/sのデータ転送速度をサポートする能力です。また、メモリモジュールを最大1600 MHzのクロック速度で評価することができます。これにより、徹底的で信頼性の高いテストが可能となり、デバイスが最高のパフォーマンスを発揮することが保証されます。\\n\\n### 多用途性\\n\\nこのシステムの多用途性は画期的です。複数のメモリ標準に対応しているため、家電製品から高性能コンピューティングまで幅広い用途に適しています。さらに、将来にわたって新しいメモリ技術が登場しても、このシステムは簡単にアップグレードできるので安心です。\\n\\n### コスト効率\\n\\nさて、価格について話しましょう。約200,000ドルで、このシステムは優れた投資回収率を提供します。中小企業にとっても手頃な価格で、トップクラスのテスト機能を提供しながらも予算を超えません。\\n\\n### 高度な機能\\n\\nこのシステムには、統合されたアルゴリズムパターンジェネレータ（ALPG）を含む高度なテストアルゴリズムが搭載されています。これにより、各モジュールが厳しいパフォーマンス基準を満たすことが保証され、正確で信頼性の高いメモリ評価が実現します。\\n\\n### 低消費電力\\n\\nさらに印象的なのは、低消費電力です。これはLP-DDR3およびLP-DDR4メモリ技術で見られる傾向と一致しています。低電圧で動作することにより、エネルギーコストを削減するだけでなく、熱出力を最小限に抑えるため、環境に優しい選択肢となります。\\n\\n## なぜZeeisを選ぶのか？\\n\\n### スケーラビリティ\\n\\nZeeisのシステムはスケーラビリティを念頭に設計されています。新しいメモリ技術が登場するたびに、システムを簡単にアップグレードできるため、長期間の使用が可能であり、頻繁な交換の必要が減少します。\\n\\n### サポートとドキュメント\\n\\nZeeisのもう一つの大きな利点は、充実したサポートとドキュメントです。メモリテストのプロフェッショナルであれ初心者であれ、詳細なガイドと迅速なカスタマーサービスにより、スムーズな体験が保証されます。\\n\\n### 市場の需要に応える\\n\\nスマートフォンからデータセンターに至るまで、高速メモリの需要が高まる中、信頼性が高くコスト効果の高いメモリテストソリューションは不可欠です。Zeeisのシステムはこれらの要求を満たし、市場投入の際に製品が確実に実世界で問題なく動作するようにします。\\n\\n## 結論\\n\\n要するに、Zeeisの超低コストDDR3、DDR4、LP-DDR3 & LP-DDR4メモリテストシステムは、信頼性が高く多用途で手頃な価格のメモリテストソリューションを必要とする方々にとって、素晴らしい選択肢です。他の高級システムの一部のコストで高性能を提供し、企業が高い基準を維持しつつコストを抑えることを可能にします。\\n\\n未来のメモリ技術に対応したシステムでテスト能力を向上させたい方は、どうぞお気軽に[i@tanshuai.com](mailto:i@tanshuai.com)までご連絡ください。\\n\\n良いテストを！\\n"},{"lang":"ja","group":"blog","slug":"blog/usr-bin-sudo-must-be-owned-by-uid-0-and-have-the-setuid-bit-set-on-ubuntu-20-04","frontmatter":{"title":"/usr/bin/sudo は UID 0 の所有であり、Ubuntu 20.04 で setuid ビットが設定されている必要があります","date":"2021-10-08T13:07:25.406Z","draft":false,"author":"Tan Shuai","tags":["Ubuntu","Linux","Sudo"],"categories":["Linux"]},"content":"\\nUbuntu 20.04で「/usr/bin/sudo は uid 0 の所有であり、setuid ビットが設定されている必要があります」というエラーメッセージが表示された場合、次の手順で問題を解決してください。\\n\\n1. 起動プロセス中に「ESC」キーを押してGRUBメニューにアクセスします。\\n\\n![GRUB画面](/images/content/wx20211008-210752.png \\"GRUB画面\\")\\n\\n2. 最初のオプション「Ubuntu」を選択し、「e」キーを押してブートパラメータを編集します。\\n\\n![ブートパラメータを編集](/images/content/wx20211008-210841.png \\"ブートパラメータを編集\\")\\n\\n3. 「linux」で始まる行に次の文字列を追加して、レスキューモードでブートします：\\n\\n```bash\\nsystemd.unit=rescue.target\\n```\\n\\n4. レスキューモードに入ったら、次のコマンドを実行して `/usr/bin/sudo` の正しいパーミッションと所有権を復元します：\\n\\n```bash\\npkexec chmod a=rx,u+ws /usr/bin/sudo\\n```\\n\\nこのコマンドは必要なパーミッションを設定し、`sudo` がrootユーザーの所有であり、setuidビットが設定されていることを保証します。\\n\\nこれらの手順に従うことで、問題を解決し、Ubuntuシステムで`sudo`コマンドの正常な機能を回復することができます。\\n\\n---\\n"},{"lang":"de","group":"blog","slug":"blog/aws-codecommit-the-githubs-large-file-storage-git-lfs-free-alternative","frontmatter":{"title":"AWS CodeCommit： Die kostenlose Alternative zu GitHub Large File Storage (Git LFS)","description":"Entdecken Sie, wie AWS CodeCommit eine kosteng\xfcnstige und effiziente Alternative zu GitHubs Large File Storage (Git LFS) bietet. Dieser Artikel behandelt die Einschr\xe4nkungen von Git LFS, die Vorteile der Nutzung von AWS CodeCommit f\xfcr die Speicherung gro\xdfer Dateien und bietet eine Schritt-f\xfcr-Schritt-Anleitung f\xfcr die Migration von Git LFS zu CodeCommit. Verbessern Sie Ihren Entwicklungsworkflow mit der skalierbaren und sicheren Infrastruktur von AWS.","date":"2022-02-09T00:00:00.000Z","author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["Softwareentwicklung"],"draft":false},"content":"\\nAWS CodeCommit bietet eine robuste Alternative zum Large File Storage (Git LFS) Dienst von GitHub und stellt eine effiziente L\xf6sung f\xfcr das Management gro\xdfer Dateien in Ihren Git-Repositories dar.\\n\\n## Warum Sie die Verwendung von Git LFS \xfcberdenken sollten\\n\\nObwohl Git LFS eine beliebte Wahl f\xfcr den Umgang mit gro\xdfen Dateien in Git-Repositories ist, hat es seine Einschr\xe4nkungen und Herausforderungen. Git LFS erfordert zus\xe4tzliche Einrichtung und Verwaltung, was den Entwicklungsworkflow verkomplizieren kann. Zudem k\xf6nnen die Speicher- und Bandbreitenkosten, die mit Git LFS verbunden sind, schnell ansteigen, insbesondere bei Projekten mit zahlreichen gro\xdfen Dateien oder umfangreicher Zusammenarbeit.\\n\\n## Warum der Large File Storage Dienst von GitHub nicht perfekt ist\\n\\nDer Large File Storage Dienst von GitHub, obwohl n\xfctzlich, weist inh\xe4rente Nachteile auf. Das Hauptproblem sind die Kosten f\xfcr Speicher und Bandbreite, die bei gr\xf6\xdferen Projekten prohibitiv werden k\xf6nnen. Dar\xfcber hinaus kann die Verwaltung von Git LFS umst\xe4ndlich sein, da Entwickler den LFS-Client installieren und konfigurieren, spezifische Dateien verfolgen und mit potenziellen Merge-Konflikten umgehen m\xfcssen, die durch die separate Handhabung gro\xdfer Dateien vom Rest des Repositories entstehen.\\n\\n## Warum Sie AWS CodeCommit zur Speicherung gro\xdfer Dateien in Git verwenden sollten\\n\\nAWS CodeCommit bietet eine \xfcberzeugende Alternative zur Speicherung gro\xdfer Dateien in Git-Repositories, ohne dass Git LFS ben\xf6tigt wird. CodeCommit ist ein vollst\xe4ndig verwalteter Quellcodeverwaltungsdienst, der nahtlos mit anderen AWS-Diensten integriert ist und robuste Skalierbarkeit, Sicherheit und Kosteneffizienz bietet. Durch die Nutzung von CodeCommit k\xf6nnen Entwickler den zus\xe4tzlichen Aufwand der Verwaltung von Git LFS vermeiden und gleichzeitig von der robusten Infrastruktur und dem Pay-as-you-go-Preismodell von AWS profitieren.\\n\\n## Was sind die Einschr\xe4nkungen von AWS CodeCommit im Vergleich zu GitHub\\n\\nTrotz seiner Vorteile hat AWS CodeCommit im Vergleich zu GitHub einige Einschr\xe4nkungen. Die umfangreiche Community-Unterst\xfctzung, das reichhaltige \xd6kosystem an Integrationen und fortschrittliche Funktionen wie GitHub Actions und GitHub Pages sind m\xf6glicherweise nicht vollst\xe4ndig in CodeCommit repliziert. Dar\xfcber hinaus k\xf6nnten Entwickler, die an die Benutzeroberfl\xe4che und die Zusammenarbeitstools von GitHub gew\xf6hnt sind, feststellen, dass der \xdcbergang zu CodeCommit eine gewisse Anpassung erfordert.\\n\\n## So migrieren Sie ein Git LFS-Repository zu CodeCommit\\n\\nDie Migration eines Git LFS-Repository zu CodeCommit umfasst mehrere Schritte. Stellen Sie zun\xe4chst sicher, dass alle gro\xdfen Dateien korrekt in Ihrem Git LFS-Repository verfolgt werden. Klonen Sie anschlie\xdfend das Repository und entfernen Sie die Git LFS-Tracking-Konfiguration. Erstellen Sie danach ein neues Repository in AWS CodeCommit und pushen Sie Ihr lokales Repository dorthin. Ausf\xfchrliche Dokumentationen und Skripte sind verf\xfcgbar, um diesen Prozess zu vereinfachen und einen reibungslosen \xdcbergang ohne Datenverlust oder Unterbrechung zu gew\xe4hrleisten.\\n\\n## Eine bessere L\xf6sung\\n\\nF\xfcr Teams und Projekte, die stark auf Git LFS angewiesen sind, kann die Erkundung von AWS CodeCommit als Alternative erhebliche Vorteile bieten. Die nahtlose Integration von CodeCommit in das AWS-\xd6kosystem, zusammen mit seiner kosteneffizienten und skalierbaren Natur, macht es zu einer attraktiven Option f\xfcr das Verwalten gro\xdfer Dateien in Git-Repositories. Indem die Herausforderungen, die mit Git LFS verbunden sind, gemindert werden, erm\xf6glicht CodeCommit den Entwicklungsteams, sich auf das Codieren und die Zusammenarbeit zu konzentrieren, was die Produktivit\xe4t und Innovation f\xf6rdert.\\n\\nAbschlie\xdfend bietet AWS CodeCommit eine tragf\xe4hige, kosteneffiziente und effiziente Alternative zum Large File Storage-Dienst von GitHub. Durch die Nutzung der robusten Infrastruktur von AWS k\xf6nnen Entwickler gro\xdfe Dateien in Git-Repositories problemlos verwalten, ihre Arbeitsabl\xe4ufe optimieren und den Aufwand reduzieren.\\n"},{"lang":"de","group":"blog","slug":"blog/check-voltage-current-on-macos-for-power-adapter","frontmatter":{"title":"Spannung und Stromst\xe4rke auf MacOS f\xfcr das Netzteil pr\xfcfen","meta_title":"Spannung und Stromst\xe4rke auf MacOS f\xfcr das Netzteil pr\xfcfen","date":"2022-02-14T00:00:00.000Z","author":"Tan Shuai","tags":["MacOS","Netzteil","Spannung","Stromst\xe4rke"],"categories":["MacOS"],"draft":false},"content":"\\nWenn Sie ein MacBook verwenden, m\xf6chten Sie m\xf6glicherweise die Spannung und den Strom des Netzadapters \xfcberpr\xfcfen. Hier ist eine einfache M\xf6glichkeit, die Spannung und den Strom des Netzadapters unter MacOS zu \xfcberpr\xfcfen.\\n\\n\xd6ffnen Sie Terminal.app und geben Sie den folgenden Befehl ein:\\n\\n`ioreg -l -n AppleSmartBattery -r |grep AppleRawAdapterDetails`\\n\\nSie erhalten die folgenden Informationen, einschlie\xdflich Strom und Spannung:\\n\\n```json\\n\\"AppleRawAdapterDetails\\" = ({\\"IsWireless\\"=No,\\"AdapterID\\"=0,\\"FamilyCode\\"=18446744073172697098,\\"Watts\\"=89,**\\"Current\\"=4450**,\\"PMUConfiguration\\"=4448,**\\"Voltage\\"=20000**})\\n"},{"lang":"de","group":"blog","slug":"blog/convert-markdown-academic-paper-pdf-macos","frontmatter":{"title":"Markdown schnell in ein akademisches PDF auf macOS umwandeln","meta_title":"Markdown auf macOS mit Pandoc in ein akademisches PDF umwandeln","description":"Erfahren Sie, wie Sie Markdown-Dokumente auf macOS mit Pandoc und BasicTeX in akademische PDF-Papiere umwandeln k\xf6nnen. Diese schnelle und einfache Methode eignet sich perfekt zur Erstellung professioneller PDF-Dateien f\xfcr akademische Arbeiten.","date":"2022-03-03T00:00:00.000Z","categories":["Softwareentwicklung"],"author":"Tan Shuai","tags":["Pandoc","LaTeX","PDF","Papier","Markdown","macOS"],"draft":false},"content":"\\nIn diesem Leitfaden zeige ich Ihnen, wie ich Markdown-Dokumente auf macOS mit Pandoc und BasicTeX in PDFs im akademischen Stil umwandle. Diese Methode ist schnell und unkompliziert, perfekt, wenn Sie professionell aussehende PDF-Dateien f\xfcr Ihre wissenschaftlichen Arbeiten erstellen m\xfcssen.\\n\\n### Schritt 1: Installation von Pandoc und BasicTeX\\n\\nZuerst m\xfcssen Sie Pandoc und BasicTeX auf Ihrem macOS-System installieren. So habe ich es gemacht:\\n\\n1. **Pandoc installieren**: \xd6ffnen Sie das Terminal und geben Sie den folgenden Befehl ein, um Pandoc zu installieren:\\n\\n   ```bash\\n   brew install pandoc\\n   ```\\n\\n2. **BasicTeX installieren**: Da MacTeX ziemlich gro\xdf ist, habe ich mich f\xfcr das kleinere BasicTeX-Paket entschieden, um Platz zu sparen. F\xfchren Sie diesen Befehl aus:\\n\\n   ```bash\\n   brew install --cask basictex\\n   ```\\n\\n3. **H\xe4ufige LaTeX-Pakete installieren**: Um sicherzustellen, dass Sie die notwendigen Pakete zur Erstellung von PDFs haben, f\xfchren Sie diese Befehle aus:\\n   ```bash\\n   sudo tlmgr update --self\\n   sudo tlmgr install collection-basic collection-latex collection-latexrecommended collection-fontsrecommended\\n   ```\\n\\n### Schritt 2: Bereiten Sie Ihre Markdown-Datei vor\\n\\nErstellen Sie als N\xe4chstes Ihre Markdown-Datei (z. B. `paper.md`). So habe ich meine Datei eingerichtet, einschlie\xdflich Titel, Autor, Datum und Kontaktinformationen:\\n\\n```markdown\\n---\\ntitle: \\"Your Paper Title\\"\\nsubtitle: \\"Optional Subtitle\\"\\ndate: \\\\today\\n\\nauthor: |\\n  | Your Name\\n  | your-email@tanshuai.com\\n  | www.tanshuai.com\\n---\\n\\n# Abstract\\n\\nYour abstract here.\\n\\n# Introduction\\n\\nYour introduction here.\\n\\n# Methodology\\n\\nYour methodology here.\\n\\n# Results\\n\\nYour results here.\\n\\n# Conclusion\\n\\nYour conclusion here. \\n```\\n\\n### Schritt 3: Konvertieren Sie Markdown mit Pandoc in PDF\\n\\nJetzt k\xf6nnen Sie Ihre Markdown-Datei in eine PDF-Datei konvertieren. Ich habe den folgenden Befehl im Terminal verwendet:\\n\\n```bash\\npandoc paper.md -o paper.pdf --pdf-engine=xelatex\\n```\\n\\nDieser Befehl verwendet Pandocs Standard-LaTeX-Vorlage, um die Markdown-Datei in eine PDF-Datei im akademischen Stil umzuwandeln, einschlie\xdflich der Kontaktinformationen des Autors unter dessen Namen.\\n\\n### Zus\xe4tzliche Tipps\\n\\n- **Eigene LaTeX-Vorlage**: Wenn Sie fortgeschrittenere Formatierungen oder spezifische Stile ben\xf6tigen, k\xf6nnen Sie eine eigene LaTeX-Vorlage erstellen oder herunterladen und mit Pandoc verwenden:\\n\\n  ```bash\\n  pandoc paper.md -o paper.pdf --pdf-engine=xelatex --template=your-template.tex\\n  ```\\n\\n- **Mehr Metadaten**: Sie k\xf6nnen zus\xe4tzliche Informationen in der YAML-Metadaten\xfcberschrift hinzuf\xfcgen, wie z. B. ein Abstract oder Schl\xfcsselw\xf6rter, und diese in benutzerdefinierten Vorlagen verwenden.\\n\\n### Fazit\\n\\nMit diesen Schritten k\xf6nnen Sie ganz einfach Markdown-Dokumente auf macOS in PDFs im akademischen Stil umwandeln. Die Verwendung von Pandoc und BasicTeX macht diesen Prozess schnell und effizient, perfekt, wenn Sie professionelle PDF-Dokumente erstellen m\xfcssen. Ob Sie wissenschaftliche Arbeiten, technische Berichte oder andere formelle Dokumente vorbereiten, diese Methode funktioniert hervorragend. Das Hinzuf\xfcgen von Kontaktinformationen in der Metadaten\xfcberschrift verleiht Ihren Dokumenten eine professionelle Note.\\n\\nIch hoffe, Sie finden diesen Leitfaden hilfreich! Wenn Sie Fragen haben oder auf Probleme sto\xdfen, z\xf6gern Sie nicht, uns zu kontaktieren. Viel Spa\xdf beim Schreiben!\\n"},{"lang":"de","group":"blog","slug":"blog/electron-build-tools-error-error-failed-to-run-choco-install-pywin32-yes","frontmatter":{"title":"Electron Build Tools `ERROR Error： Failed to run \\\\\\"choco install pywin32 --yes\\\\\\"`","date":"2021-09-08T00:00:00.000Z","draft":false,"author":"Tan Shuai","tags":["Electron","Build Tools","PyWin32","Chocolatey","Win32"],"categories":["Softwareentwicklung"]},"content":"\\nBei der Arbeit mit Electron Build Tools kann es zu einem Fehler bei der Installation von pywin32 \xfcber Chocolatey kommen. Dies kann frustrierend sein, insbesondere wenn es sich um eine erforderliche Abh\xe4ngigkeit f\xfcr Ihr Projekt handelt. Im Folgenden finden Sie eine detaillierte Erkl\xe4rung des Problems und m\xf6gliche Schritte zu dessen Behebung.\\n\\n### Der Fehler\\n\\nBeim Initialisieren eines Electron-Projekts mit Electron Build Tools kann die folgende Fehlermeldung angezeigt werden:\\n\\n```bash\\nE:\\\\\\\\>e init main-testing -i testing --root=e:/src/electron\\nWARN A fixable error has occurred\\n--> A required dependency \\"pywin32\\" could not be located, it probably has to be installed.\\nDo you want build-tools to try fix this for you? [y/n]: y\\n\\nRunning \\"choco install pywin32 --yes\\"\\nERROR Error: Failed to run \\"choco install pywin32 --yes\\"\\n    at spawnSyncWithLog (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:11:11)\\n    at fix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:39:9)\\n    at maybeAutoFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\maybe-auto-fix.js:13:3)\\n    at whichAndFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\which.js:10:5)\\n    at checkPlatformDependencies (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:61:7)\\n    at Object.<anonymous> (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\e-init.js:165:3)\\n    at Module._compile (internal/modules/cjs/loader.js:1072:14)\\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1101:10)\\n    at Module.load (internal/modules/cjs/loader.js:937:32)\\n    at Function.Module._load (internal/modules/cjs/loader.js:778:12)\\n```\\n\\nDieser Fehler tritt typischerweise auf, weil das Installationsskript f\xfcr das pywin32-Paket die erforderlichen Dateien auf dem Remote-Server nicht finden kann. Dies f\xfchrt zu einem 404-Fehler, der darauf hinweist, dass die Datei unter der angegebenen URL nicht verf\xfcgbar ist.\\n\\n### Verst\xe4ndnis des Fehlers\\n\\nDer entscheidende Teil der Fehlermeldung lautet:\\n\\n```bash\\nERROR: The remote file either doesn\'t exist, is unauthorized, or is forbidden for url \'http://sourceforge.net/projects/pywin32/files/pywin32/Build%20219/pywin32-219.win-amd64-py3.9.exe/download\'. Exception calling \\"GetResponse\\" with \\"0\\" argument(s): \\"The remote server returned an error: (404) Not Found.\\"\\n\\nDies deutet darauf hin, dass die Download-URL f\xfcr pywin32 nicht mehr g\xfcltig ist, was bedeutet, dass Chocolatey die erforderlichen Installationsdateien nicht abrufen kann.\\n\\n### Schritte zur Fehlerbehebung\\n\\nHier sind einige Schritte, die Sie unternehmen k\xf6nnen, um dieses Problem zu l\xf6sen:\\n\\n#### 1. \xdcberpr\xfcfen Sie die Chocolatey-Installation\\n\\nStellen Sie sicher, dass Chocolatey korrekt installiert und auf die neueste Version aktualisiert ist. Sie k\xf6nnen Ihre Chocolatey-Version mit folgendem Befehl \xfcberpr\xfcfen:\\n\\n```bash\\nchoco --version\\n```\\n\\nUm Chocolatey zu aktualisieren, verwenden Sie:\\n\\n```bash\\nchoco upgrade chocolatey\\n```\\n\\n#### 2. Installieren Sie pywin32 manuell\\n\\nDa die automatisierte Installation fehlschl\xe4gt, versuchen Sie, pywin32 manuell zu installieren. Sie k\xf6nnen die entsprechende Version von der offiziellen [pywin32 GitHub Releases Seite](https://github.com/mhammond/pywin32/releases) herunterladen und manuell installieren.\\n\\n#### 3. \xc4ndern Sie das Installationsskript\\n\\nWenn Sie die Kontrolle \xfcber das Electron Build Tools-Skript haben, k\xf6nnen Sie es so \xe4ndern, dass es auf eine g\xfcltige URL f\xfcr pywin32 verweist oder den manuellen Installationsprozess abwickelt.\\n\\n#### 4. Verwenden Sie einen alternativen Paketmanager\\n\\nWenn Chocolatey weiterhin fehlschl\xe4gt, ziehen Sie die Verwendung eines alternativen Paketmanagers wie pip f\xfcr Python-Pakete in Betracht:\\n\\n```bash\\npip install pywin32\\n```\\n\\n### Beispiel f\xfcr die manuelle Installation von pywin32\\n\\n1. Laden Sie den passenden pywin32-Installer von den [offiziellen GitHub Releases](https://github.com/mhammond/pywin32/releases) herunter.\\n2. F\xfchren Sie den Installer aus und folgen Sie den Installationsanweisungen.\\n3. \xdcberpr\xfcfen Sie die Installation, indem Sie ein einfaches Python-Skript ausf\xfchren, das pywin32 importiert:\\n\\n```python\\nimport win32api\\nprint(win32api.GetVersionEx())\\n```\\n\\nDas Auftreten des Fehlers \\"Failed to run `choco install pywin32 --yes`\\" kann ein Hindernis in Ihrem Entwicklungsprozess darstellen. Indem Sie jedoch die Ursache verstehen und die oben beschriebenen Schritte befolgen, k\xf6nnen Sie dieses Problem \xfcberwinden und mit der Einrichtung Ihres Electron-Projekts fortfahren.\\n"},{"lang":"de","group":"blog","slug":"blog/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining","frontmatter":{"title":"Geheimnisse des vollst\xe4ndigen kundenspezifischen ASIC-Designs f\xfcr Bitcoin- und Kryptow\xe4hrungs-Mining","date":"2022-05-30T00:00:00.000Z","categories":["Halbleiter","Bitcoin","Kryptow\xe4hrung","Blockchain"],"author":"Tan Shuai","tags":["ASIC","Bitcoin","Mining","BTC"],"draft":false,"contact":"Tan Shuai | tanshuai@btc.com | tanshuai.com"},"content":"\\n\\\\ntan Shuai  \\n[tanshuai@btc.com](mailto:tanshuai@btc.com)  \\n[tanshuai.com](https://tanshuai.com)\\n\\n---\\n\\n## Zusammenfassung\\n\\nIm wettbewerbsintensiven Bereich des Kryptow\xe4hrungs-Minings sind Energieeffizienz, Hashrate-Performance und Zuverl\xe4ssigkeit von gr\xf6\xdfter Bedeutung. Dieses Papier befasst sich mit dem erstklassigen Full-Custom-ASIC-Design (Application-Specific Integrated Circuit) und enth\xfcllt Branchengeheimnisse und Expertenmethoden, die das Hochleistungs-Bitcoin- und Kryptow\xe4hrungs-Mining vorantreiben. Geschrieben von einem Technologieexperten eines der f\xfchrenden ASIC-Miner-Unternehmen, nutzt dieses Papier fortschrittliche Designtechniken, akribische physische Layouts und umfassende Verifizierungsprozesse, um die au\xdfergew\xf6hnlichen F\xe4higkeiten von Full-Custom-ASICs zur Maximierung der Mining-Effizienz und -Rentabilit\xe4t zu demonstrieren.\\n\\n## Einleitung\\n\\nDie Entwicklung des Kryptow\xe4hrungs-Minings, insbesondere des Bitcoin-Minings, hat einen Wandel von der Nutzung allgemeiner CPUs, FPGAs und GPUs hin zu spezialisierten ASICs erlebt. Diese ASICs bieten unvergleichliche Leistung und Energieeffizienz. Full-Custom-ASIC-Design stellt den H\xf6hepunkt dieser Entwicklung dar und erm\xf6glicht ma\xdfgeschneiderte L\xf6sungen, die den spezifischen Anforderungen von Mining-Betrieben gerecht werden.\\n\\nEin Gro\xdfteil der bestehenden Literatur \xfcber ASIC-Design f\xfcr das Kryptow\xe4hrungs-Mining stammt aus der Wissenschaft oder von nicht im Mining t\xe4tigen Unternehmen und ist oft wenig praxisnah. Bisher haben nur eine Handvoll Unternehmen, haupts\xe4chlich chinesische (z.B. MicroBT, Bitmain), erfolgreich marktf\xe4hige Bitcoin-Mining-ASICs entwickelt. Dieses Papier zielt darauf ab, diese L\xfccke zu schlie\xdfen, indem es Einblicke aus der tats\xe4chlichen Praxis der Branche bietet und eine Perspektive vermittelt, die in den Realit\xe4ten des Mining-Sektors verankert ist.\\n\\nAls Profi mit \xfcber zehn Jahren Erfahrung in der Technologiebranche hat der Autor dieses Papiers den weltweit besten Bitcoin-ASIC-Miner (WhatsMiner), LTC/DOGE- und ETH-Miner entwickelt und eine Schl\xfcsselrolle bei Unternehmen wie MicroBT, BTC.COM und anderen fablesses gespielt. Er hat Schl\xfcsselpositionen in an der NASDAQ, HKSE und NYSE notierten Unternehmen innegehabt. Mit umfangreicher Erfahrung in der Zusammenarbeit mit TSMC, Texas Instruments, ARM und Intel bringt er ein reichhaltiges Wissen und praktische Expertise im Bereich des Custom-ASIC-Designs f\xfcr Bitcoin- und Kryptow\xe4hrungs-Mining mit.\\n\\n## Methodik und Designablauf\\n\\n### Designphilosophie\\n\\nUnser Ansatz f\xfcr das vollst\xe4ndige kundenspezifische ASIC-Design basiert auf einem Fokus auf die Maximierung von PPA (Power, Performance und Area), insbesondere unter Niederspannungsbedingungen. In diesem Abschnitt werden unsere Designphilosophie und Methodik beschrieben:\\n\\n1. **Pipeline-Architektur**: Nutzung der inh\xe4renten Vorteile von Pipeline-Strukturen f\xfcr Mining-Algorithmen, die durch Register und kombinatorische Logikstufen gekennzeichnet sind. Durch den Einsatz einer Pipeline-Architektur k\xf6nnen wir effizient die hochfrequenten Operationen bew\xe4ltigen, die f\xfcr das Kryptow\xe4hrungs-Mining erforderlich sind.\\n2. **Manuelles Netlist und Platzierung**: Detaillierte Skripterstellung f\xfcr die Netlist-Erstellung und manuelle Zellplatzierung zur Optimierung kritischer Pfade. Dies erm\xf6glicht eine pr\xe4zise Steuerung der Zeitgebung und reduziert parasit\xe4re Effekte.\\n3. **Kundenspezifische Zellbibliotheken**: Entwicklung spezialisierter Zellen mit optimierter Transistoranzahl und dynamischen Energiesparfunktionen. Kundenspezifische Zellen sind darauf ausgelegt, bei den niedrigsten m\xf6glichen Spannungen zu arbeiten und so den Energieverbrauch zu minimieren.\\n\\n### Erreichen von PPA-Vorteilen\\n\\nDetaillierte Strategien zur Erreichung von PPA-Vorteilen durch kundenspezifisches Design:\\n\\n1. **Kundenspezifisches Registerdesign**: Einsatz von Mehrbit-Register und latchbasierten Designs zur Reduzierung der Taktleistung und Verbesserung des Timing-Borrowings. Mehrbit-Register minimieren den Stromverbrauch des Taktbaums und reduzieren die gesamte Fl\xe4che.\\n2. **Manuelle Platzierung**: Reduzierung der Leitungsl\xe4ngen und Ausgleich der Setup- und Haltezeiten zur Verbesserung der Gesamtleistung. Die manuelle Platzierung erm\xf6glicht eine bessere Kontrolle \xfcber Interconnect-Verz\xf6gerungen und \xdcbersprechen, was die Signalintegrit\xe4t verbessert und den Energieverbrauch reduziert.\\n3. **Optimiertes Zelldesign**: Kundenspezifische Zellen sind so konzipiert, dass sie bei niedrigeren Spannungen arbeiten und so den dynamischen Energieverbrauch minimieren und die Effizienz maximieren. Durch die Anpassung der Zelldesigns an die spezifischen Anforderungen der Mining-Algorithmen k\xf6nnen wir signifikante Leistungsverbesserungen erzielen.\\n\\n### Zuverl\xe4ssigkeit unter Niederspannung\\n\\nSicherstellung der Zuverl\xe4ssigkeit von kundenspezifisch entworfener Timing-Logik bei Niederspannungen umfasst:\\n\\n1. **Akkurate Simulation**: Schaltungssimulationen zur Validierung des Verhaltens kundenspezifischer Zellen unter spezifischen Bedingungen. Werkzeuge wie SPICE werden f\xfcr detaillierte elektrische Simulationen verwendet, um sicherzustellen, dass die Zellen unter allen PVT (Prozess, Spannung, Temperatur)-Ecken korrekt arbeiten.\\n2. **Konsistenz in der Platzierung**: Manuelle Platzierung zur Sicherstellung der Uniformit\xe4t und Reduzierung der Variabilit\xe4t. Durch die Steuerung des physischen Layouts k\xf6nnen wir den Einfluss von Prozessvariationen minimieren und eine konsistente Leistung gew\xe4hrleisten.\\n3. **Pr\xe4zise PVT-Kalibrierung**: Verifikation gegen Prozess-, Spannungs- und Temperaturvariationen. Umfangreiche Tests und Kalibrierungen werden durchgef\xfchrt, um die Robustheit des Designs unter verschiedenen Betriebsbedingungen sicherzustellen.\\n\\n## Fallstudien und Ergebnisse\\n\\nVorstellung von realen Daten und Fallstudien aus Full-Mask-Tape-Outs:\\n\\n| Projekt | Prozessknoten | Spannungs-/Leistungs-Effizienz | Algorithmus |\\n| ------- | ------------- | ----------------------------- | ----------- |\\n| SC      | TSMC 28nm     | 0,45V, 257J/T                 | Blake2b     |\\n| DCR     | TSMC 28nm     | 0,45V, 150J/T                 | Blake256    |\\n| DASH    | TSMC 16nm     | 0,38V, 6,2J/G                 | X11         |\\n| BTC     | TSMC 16nm     | 0,38V, 65J/T                  | SHA-256d    |\\n| BTC     | TSMC 7nm      | 0,30V, 37J/T                  | SHA-256d    |\\n| BTC     | Samsung 8nm   | 0,31V, 45J/T                  | SHA-256d    |\\n| BTC     | SMIC N+1      | 0,30V, 35J/T                  | SHA-256d    |\\n\\nDiese Ergebnisse demonstrieren die erheblichen Effizienz- und Leistungssteigerungen, die durch unseren kundenspezifischen Designansatz erzielt werden k\xf6nnen.\\n\\n## Integration und Verifikation\\n\\n### Mixed-Cell-Abschluss\\n\\n- **Integration von kundenspezifischen Zellen**: Kundenspezifische Zellen werden mit Standardzellen von TSMC und anderen Foundries integriert, um Kompatibilit\xe4t und Leistung zu gew\xe4hrleisten. Kundenspezifische Zellen werden charakterisiert und validiert, um den Anforderungen der Standardzellenbibliothek zu entsprechen und eine nahtlose Integration zu erm\xf6glichen.\\n- **Abschlussstrategien**: Strategien zur Sicherstellung nahtloser Kompatibilit\xe4t und Leistung umfassen detaillierte DRC (Design Rule Check) und LVS (Layout Versus Schematic) Pr\xfcfungen sowie Timing- und Leistungsanalysen mit branchen\xfcblichen EDA (Electronic Design Automation) Tools.\\n\\n### Digital- und Analog-Co-Design\\n\\n- **Techniken zur Integration**: Integration von digitalen und analogen Komponenten zur Optimierung der Gesamtchip-Leistung. Techniken wie Mixed-Signal-Verifikation und Co-Simulation werden eingesetzt, um eine ordnungsgem\xe4\xdfe Integration und Funktionalit\xe4t sicherzustellen.\\n- **Verifikationsmethodologien**: Methodologien zur Sicherstellung der Robustheit unter verschiedenen Betriebsbedingungen umfassen Eckwertanalysen, Monte-Carlo-Simulationen und Zuverl\xe4ssigkeitspr\xfcfungen zur Ber\xfccksichtigung von Alterung und Elektromigration.\\n\\n## Schlussfolgerung\\n\\nFull-Custom-ASIC-Design bietet erhebliche Vorteile f\xfcr das Bitcoin- und Kryptow\xe4hrungs-Mining und gew\xe4hrleistet unvergleichliche Leistung, Energieeffizienz und Zuverl\xe4ssigkeit. Durch die Enth\xfcllung der Geheimnisse erstklassiger kundenspezifischer ASIC-Designs hebt dieses Papier die Methoden und Innovationen hervor, die Branchenf\xfchrer auszeichnen. W\xe4hrend sich das Kryptow\xe4hrungs-Mining weiterentwickelt, werden kundenspezifische ASICs eine entscheidende Rolle bei der n\xe4chsten Generation von hocheffizienter, leistungsstarker Mining-Hardware spielen.\\n\\n[PDF-Version des Papiers](/docs/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining.pdf)\\n"},{"lang":"de","group":"blog","slug":"blog/get-current-commit-id-of-git-and-update-to-package-json","frontmatter":{"title":"Erhalten Sie die aktuelle Commit-ID von Git und aktualisieren Sie sie in package.json","date":"2021-08-21T09:19:58.875Z","draft":false,"author":"Tan Shuai","tags":["Git","Package.json","Node.js"],"categories":["Softwareentwicklung"]},"content":"\\nBei der Entwicklung eines Node.js-Projekts m\xf6chten Sie m\xf6glicherweise die aktuelle Commit-ID Ihres Git-Repositorys verfolgen. Diese Information kann f\xfcr Debugging-, Versions- oder Bereitstellungszwecke n\xfctzlich sein. Eine M\xf6glichkeit, dies zu erreichen, besteht darin, die `package.json`-Datei w\xe4hrend des Build-Prozesses mit der aktuellen Commit-ID zu aktualisieren. Dieser Artikel f\xfchrt Sie durch die Schritte, um die aktuelle Commit-ID von Git zu erhalten und sie mithilfe von Node.js in die `package.json`-Datei zu aktualisieren.\\n\\n```bash\\n\\"predev\\": \\"node ./node_modules/json/lib/json.js -I -f package.json -e \\\\\\"this.commit=\'$(git rev-parse --short HEAD)\'\\\\\\"\\",\\n"},{"lang":"de","group":"blog","slug":"blog/migrate-a-github-lfs-git-large-file-storage-repository-to-aws-codecommit","frontmatter":{"title":"Migriere ein GitHub LFS (Git Large File Storage) Repository zu AWS CodeCommit","date":"2022-02-09T09:36:57.481Z","draft":false,"author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["Softwareentwicklung"]},"content":"\\nIch habe k\xfcrzlich eines meiner GitHub-Repositories, das Git Large File Storage (LFS) verwendet, auf AWS CodeCommit migriert. Ich m\xf6chte den Prozess mit Ihnen teilen, falls Sie etwas \xc4hnliches vorhaben. Hier ist eine Schritt-f\xfcr-Schritt-Anleitung basierend auf meinen Erfahrungen.\\n\\n## Voraussetzungen\\n\\nBevor wir beginnen, stellen Sie sicher, dass diese Tools installiert sind:\\n\\n- Git\\n- Git LFS\\n- AWS CLI\\n\\n## Schritt-f\xfcr-Schritt-Anleitung\\n\\n### 1. Repository klonen\\n\\nZuerst klonen Sie Ihr GitHub-Repository mit der Option `--mirror`. Dies erstellt einen nackten Klon des Repositories, einschlie\xdflich aller Branches und Tags.\\n\\n```zsh\\ngit clone --mirror https://github.com/tanshuai/designs.git designs\\n```\\n\\n### 2. LFS-Dateien \xfcberpr\xfcfen\\n\\nListen Sie als n\xe4chstes alle Dateien auf, die von Git LFS verwaltet werden, um sicherzustellen, dass alles an seinem Platz ist.\\n\\n```zsh\\ngit lfs ls-files\\n```\\n\\nSie sollten etwas \xc4hnliches sehen:\\n\\n```\\ncadfa0bc9e * Brochure-Trifold-Draft.ai\\naf9b8b8a1c * Brochure-Trifold-English.ai\\n27bb5f4e61 * Brochure-Trifold.ai\\n```\\n\\n### 3. LFS-Dateien migrieren\\n\\nExportieren Sie nun die LFS-Dateien. Dieser Schritt stellt sicher, dass sie Teil der Repository-Historie sind.\\n\\n```zsh\\ngit lfs migrate export --include=\\"*.ai\\" --everything\\n```\\n\\nSie werden einige Fortschrittsmeldungen wie diese sehen:\\n\\n```\\nmigrate: Sorting commits: ..., done.\\nmigrate: Rewriting commits: 100% (20/20), done.\\nmaster    98a3c48d85... -> 82f8873b41...\\nmigrate: Updating refs: ..., done.\\nmigrate: checkout: ..., done.\\nprune: 3 local object(s), 0 retained, done.\\ncadfa0bc9e... (133 MB)\\n27bb5f4e61... (131 MB)\\naf9b8b8a1c... (130 MB), done.\\nprune: Deleting objects: 100% (3/3), done.\\n```\\n\\n### 4. LFS bereinigen\\n\\nEntfernen Sie die Git LFS-Tracking-Informationen und deinstallieren Sie Git LFS.\\n\\n```zsh\\ngit lfs ls-files\\ngit rm .gitattributes -f\\ngit lfs uninstall\\n```\\n\\n### 5. Auf AWS CodeCommit pushen\\n\\nZum Schluss pushen Sie Ihr Repository zu AWS CodeCommit.\\n\\n```zsh\\ngit push https://git-codecommit.us-east-2.amazonaws.com/v1/repos/designs --all\\n```\\n\\nDas war\'s! Durch Befolgen dieser Schritte konnte ich mein GitHub LFS-Repository erfolgreich zu AWS CodeCommit migrieren. Die gro\xdfen Dateien und die Repository-Historie wurden perfekt erhalten.\\n\\n## Zusammenfassung\\n\\nDas Migrieren eines GitHub-Repositories, das Git LFS verwendet, zu AWS CodeCommit ist ziemlich einfach, wenn man die richtigen Schritte befolgt. Wenn Sie Fragen haben oder auf Probleme sto\xdfen, sind die [AWS CodeCommit-Dokumentation](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) und die [Git LFS-Dokumentation](https://git-lfs.github.com/) gro\xdfartige Ressourcen.\\n\\nIch hoffe, du findest diesen Leitfaden hilfreich. Viel Spa\xdf beim Programmieren!\\n"},{"lang":"de","group":"blog","slug":"blog/reset-restore-all-subdirectories-of-git","frontmatter":{"title":"Alle Unterverzeichnisse von Git zur\xfccksetzen/wiederherstellen","date":"2021-09-22T08:33:49.201Z","draft":false,"author":"Tan Shuai","tags":["Git","Versionskontrolle"],"categories":["Softwareentwicklung"]},"content":"\\nEin Git-Repository effektiv zu verwalten, erfordert oft das Zur\xfccksetzen oder Wiederherstellen von Unterverzeichnissen, um eine saubere und funktionsf\xe4hige Codebasis zu erhalten. Diese Anleitung bietet einen pr\xe4gnanten, schrittweisen Ansatz zum Zur\xfccksetzen oder Wiederherstellen aller Unterverzeichnisse in einem Git-Repository.\\n\\n## Zur\xfccksetzen von Unterverzeichnissen\\n\\nDer folgende Git-Befehl entfernt alle nicht verfolgten Dateien und Verzeichnisse aus dem Repository. Dies ist n\xfctzlich, um unn\xf6tige Dateien zu bereinigen, bevor ein Zur\xfccksetzen oder Wiederherstellen durchgef\xfchrt wird.\\n\\n```bash\\ngit clean -xfdf -- .\\n```\\n\\n### Befehlsaufteilung:\\n\\n- `-x`: Entfernt alle nicht verfolgten Dateien, einschlie\xdflich derjenigen, die von `.gitignore` ignoriert werden.\\n- `-f`: Erzwingt das Entfernen von Dateien.\\n- `-d`: Entfernt nicht verfolgte Verzeichnisse.\\n- `-- .`: Wendet den Befehl auf das aktuelle Verzeichnis und alle Unterverzeichnisse an.\\n\\n## Wiederherstellen von Unterverzeichnissen\\n\\nUm alle Dateien im Repository auf ihren letzten commit zur\xfcckzusetzen, verwenden Sie den folgenden Befehl:\\n\\n```bash\\ngit checkout {HEAD ODER BRANCH} -- .\\n```\\n\\n### Befehlsaufteilung:\\n\\n- `{HEAD ODER BRANCH}`: Ersetzen Sie dies durch `HEAD`, um auf den neuesten Commit zur\xfcckzusetzen, oder geben Sie einen Branch-Namen an, um auf einen bestimmten Branch zur\xfcckzusetzen.\\n- `-- .`: Wendet den Befehl auf das aktuelle Verzeichnis und alle Unterverzeichnisse an.\\n\\nMit diesen Befehlen k\xf6nnen Sie sicherstellen, dass Ihr Repository frei von unerw\xfcnschten Dateien ist und dass alle Dateien auf ihre commit-St\xe4nde zur\xfcckgesetzt werden. Dieser Prozess hilft dabei, eine saubere und organisierte Codebasis zu erhalten, was die Zusammenarbeit und Entwicklung erleichtert.\\n\\nPassen Sie diese Anleitung nach Ihren spezifischen Bed\xfcrfnissen und Vorlieben an. F\xfcr weiterf\xfchrende Git-Operationen konsultieren Sie die [offizielle Git-Dokumentation](https://git-scm.com/doc).\\n"},{"lang":"de","group":"blog","slug":"blog/ultra-low-cost-ddr3-ddr4-lpddr3-lpddr4-memory-test-system","frontmatter":{"title":"Ultra-Kosteng\xfcnstiges DDR3-, DDR4-, LP-DDR3- und LP-DDR4-Speichertestsystem","description":"Entdecken Sie das ultra-kosteng\xfcnstige Speichertestsystem f\xfcr DDR3-, DDR4-, LP-DDR3- und LP-DDR4-Technologien. Zum Preis von etwa 200.000 USD bietet es Hochgeschwindigkeitstests, Vielseitigkeit, erweiterte Funktionen und einen geringen Stromverbrauch. Perfekt f\xfcr Unternehmen, die kosteng\xfcnstige und zuverl\xe4ssige Speichertestl\xf6sungen suchen.","date":"2024-06-01T00:00:00.000Z","categories":["Halbleiter"],"author":"Tan Shuai","tags":["DDR3","DDR4","LP-DDR3","LP-DDR4","Speichertestsystem"],"draft":false},"content":"\\nWenn Sie wie ich sind und immer nach kosteng\xfcnstigen L\xf6sungen suchen, ohne dabei an Qualit\xe4t einzub\xfc\xdfen, werden Sie lieben, was ich heute zu teilen habe. In unserer schnelllebigen Technikwelt ist es entscheidend, dass der Speicher unserer Ger\xe4te auf dem neuesten Stand ist. Hochwertige Optionen wie der T5503/T5503HS2 sind fantastisch, aber sie haben einen hohen Preis. Zum Gl\xfcck ist Zeeis mit einem ultra kosteng\xfcnstigen Speichertestsystem auf den Markt gekommen, das keine Leistungseinbu\xdfen hat.\\n\\n## Warum das wichtig ist\\n\\nAls ich zum ersten Mal von dem Speichertestsystem von Zeeis h\xf6rte, war ich fasziniert. Dieses System ist darauf ausgelegt, DDR3-, DDR4-, LP-DDR3- und LP-DDR4-Speichertechnologien zu unterst\xfctzen. Egal, ob Sie mit \xe4lteren Systemen oder der neuesten Technik arbeiten, dieses System deckt alles ab.\\n\\n### Hochgeschwindigkeitstests\\n\\nEine der herausragenden Eigenschaften ist seine F\xe4higkeit, Daten\xfcbertragungsraten von 800 bis 3200 MT/s sowohl f\xfcr DDR3 als auch DDR4 zu unterst\xfctzen. Es kann Speichermodule bei Taktraten von bis zu 1600 MHz bewerten. Das bedeutet gr\xfcndliche und zuverl\xe4ssige Tests, die sicherstellen, dass Ihre Ger\xe4te optimal funktionieren.\\n\\n### Vielseitigkeit\\n\\nDie Vielseitigkeit dieses Systems ist ein echter Wendepunkt. Es unterst\xfctzt mehrere Speicherstandards, was es f\xfcr eine breite Palette von Anwendungen geeignet macht – von Unterhaltungselektronik bis hin zu Hochleistungsrechnern. Au\xdferdem ist es zukunftssicher. Wenn neue Speichertechnologien auf den Markt kommen, kann dieses System leicht aufger\xfcstet werden, um sie zu unterst\xfctzen.\\n\\n### Kosteneffizienz\\n\\nKommen wir nun zum Preis. Bei etwa 200.000 USD bietet dieses System eine ausgezeichnete Kapitalrendite. Es ist erschwinglich genug f\xfcr kleine bis mittelst\xe4ndische Unternehmen und bietet erstklassige Testm\xf6glichkeiten, ohne das Budget zu sprengen.\\n\\n### Erweiterte Funktionen\\n\\nDas System verf\xfcgt \xfcber fortschrittliche Testalgorithmen, einschlie\xdflich eines integrierten algorithmischen Mustergenerators (ALPG). Dies gew\xe4hrleistet eine genaue und zuverl\xe4ssige Speicherbewertung, sodass jedes Modul strenge Leistungsstandards erf\xfcllt.\\n\\n### Niedriger Stromverbrauch\\n\\nBeeindruckend ist auch der geringe Stromverbrauch. Es entspricht den Trends bei LP-DDR3- und LP-DDR4-Speichertechnologien. Durch den Betrieb bei niedrigeren Spannungen werden nicht nur Energiekosten gesenkt, sondern auch die W\xe4rmeabgabe minimiert, was es zu einer umweltfreundlichen Wahl macht.\\n\\n## Warum Zeeis w\xe4hlen?\\n\\n### Skalierbarkeit\\n\\nDas System von Zeeis ist auf Skalierbarkeit ausgelegt. Wenn neue Speichertechnologien auf den Markt kommen, kann das System problemlos aufger\xfcstet werden, was eine langfristige Nutzbarkeit gew\xe4hrleistet und die Notwendigkeit h\xe4ufiger Ersetzungen verringert.\\n\\n### Unterst\xfctzung und Dokumentation\\n\\nEin weiterer gro\xdfer Vorteil ist die umfangreiche Unterst\xfctzung und Dokumentation von Zeeis. Egal, ob Sie ein erfahrener Profi oder neu im Bereich der Speicherpr\xfcfung sind, ihre detaillierten Anleitungen und der reaktionsschnelle Kundenservice sorgen f\xfcr ein reibungsloses Erlebnis.\\n\\n### Erf\xfcllung der Marktnachfrage\\n\\nMit der wachsenden Nachfrage nach Hochgeschwindigkeitsspeichern in allem, von Smartphones bis hin zu Rechenzentren, ist eine zuverl\xe4ssige und kosteneffiziente Speicherpr\xfcfl\xf6sung unerl\xe4sslich. Das System von Zeeis erf\xfcllt diese Anforderungen und stellt sicher, dass Ihre Produkte marktreif sind und in realen Anwendungen einwandfrei funktionieren.\\n\\n## Fazit\\n\\nKurz gesagt, das Ultra Low Cost DDR3, DDR4, LP-DDR3 & LP-DDR4 Memory Test System von Zeeis ist eine fantastische Option f\xfcr alle, die zuverl\xe4ssige, vielseitige und kosteng\xfcnstige Speicherpr\xfcfl\xf6sungen ben\xf6tigen. Es bietet hohe Leistung zu einem Bruchteil der Kosten anderer High-End-Systeme und erm\xf6glicht es Unternehmen, hohe Standards aufrechtzuerhalten, ohne das Budget zu sprengen.\\n\\nWenn Sie daran interessiert sind, Ihre Testkapazit\xe4ten mit einem System zu verbessern, das f\xfcr die Zukunft der Speichertechnologie ausgelegt ist, k\xf6nnen Sie sich gerne f\xfcr weitere Informationen an mich wenden: [i@tanshuai.com](mailto:i@tanshuai.com).\\n\\nViel Erfolg beim Testen!\\n"},{"lang":"de","group":"blog","slug":"blog/usr-bin-sudo-must-be-owned-by-uid-0-and-have-the-setuid-bit-set-on-ubuntu-20-04","frontmatter":{"title":"/usr/bin/sudo muss im Besitz von UID 0 sein und das Setuid-Bit auf Ubuntu 20.04 gesetzt haben","date":"2021-10-08T13:07:25.406Z","draft":false,"author":"Tan Shuai","tags":["Ubuntu","Linux","Sudo"],"categories":["Linux"]},"content":"\\nWenn Sie die Fehlermeldung \\"/usr/bin/sudo must be owned by uid 0 and have the setuid bit set\\" auf Ubuntu 20.04 erhalten, folgen Sie diesen Schritten, um das Problem zu beheben.\\n\\n1. Dr\xfccken Sie w\xe4hrend des Bootvorgangs die \'ESC\'-Taste, um das GRUB-Men\xfc zu \xf6ffnen.\\n\\n![GRUB Bildschirm](/images/content/wx20211008-210752.png \\"GRUB Bildschirm\\")\\n\\n2. W\xe4hlen Sie die erste Option \\"Ubuntu\\" und dr\xfccken Sie die \'e\'-Taste, um die Boot-Parameter zu bearbeiten.\\n\\n![Boot-Parameter bearbeiten](/images/content/wx20211008-210841.png \\"Boot-Parameter bearbeiten\\")\\n\\n3. F\xfcgen Sie die folgende Zeichenkette zu der Zeile hinzu, die mit \'linux\' beginnt, um im Rescue-Modus zu booten:\\n\\n```bash\\nsystemd.unit=rescue.target\\n```\\n\\n4. F\xfchren Sie im Rescue-Modus den folgenden Befehl aus, um die richtigen Berechtigungen und den Besitz f\xfcr `/usr/bin/sudo` wiederherzustellen:\\n\\n```bash\\npkexec chmod a=rx,u+ws /usr/bin/sudo\\n```\\n\\nDieser Befehl setzt die notwendigen Berechtigungen und stellt sicher, dass `sudo` dem Root-Benutzer geh\xf6rt und das setuid-Bit gesetzt ist.\\n\\nDurch das Befolgen dieser Schritte sollten Sie das Problem beheben und die ordnungsgem\xe4\xdfe Funktion des `sudo`-Befehls auf Ihrem Ubuntu-System wiederherstellen k\xf6nnen.\\n\\n---\\n"},{"lang":"fr","group":"blog","slug":"blog/aws-codecommit-the-githubs-large-file-storage-git-lfs-free-alternative","frontmatter":{"title":"AWS CodeCommit ： l\'alternative gratuite \xe0 GitHub Large File Storage (Git LFS)","description":"D\xe9couvrez comment AWS CodeCommit est une alternative rentable et efficace \xe0 GitHub Large File Storage (Git LFS). Cet article couvre les limitations de Git LFS, les avantages de l\'utilisation d\'AWS CodeCommit pour le stockage de fichiers volumineux, et fournit un guide \xe9tape par \xe9tape pour migrer de Git LFS \xe0 CodeCommit. Am\xe9liorez votre flux de d\xe9veloppement avec l\'infrastructure \xe9volutive et s\xe9curis\xe9e d\'AWS.","date":"2022-02-09T00:00:00.000Z","author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["D\xe9veloppement logiciel"],"draft":false},"content":"\\nAWS CodeCommit offre une alternative robuste au service de stockage de fichiers volumineux de GitHub (Git LFS), en fournissant une solution efficace pour g\xe9rer les fichiers volumineux dans vos d\xe9p\xf4ts Git.\\n\\n## Pourquoi vous devriez reconsid\xe9rer l\'utilisation de Git LFS\\n\\nBien que Git LFS soit un choix populaire pour g\xe9rer les fichiers volumineux dans les d\xe9p\xf4ts Git, il pr\xe9sente des limitations et des d\xe9fis. Git LFS n\xe9cessite une configuration et une gestion suppl\xe9mentaires, ce qui peut compliquer le flux de travail de d\xe9veloppement. De plus, les co\xfbts de stockage et de bande passante associ\xe9s \xe0 Git LFS peuvent augmenter rapidement, en particulier pour les projets avec de nombreux fichiers volumineux ou une collaboration \xe9tendue.\\n\\n## Pourquoi le service de stockage de fichiers volumineux de GitHub n\'est pas parfait\\n\\nLe service de stockage de fichiers volumineux de GitHub, bien que utile, pr\xe9sente des inconv\xe9nients inh\xe9rents. La principale pr\xe9occupation est le co\xfbt associ\xe9 au stockage et \xe0 la bande passante, qui peut devenir prohibitif pour les projets plus importants. De plus, la gestion de Git LFS peut \xeatre fastidieuse, n\xe9cessitant des d\xe9veloppeurs d\'installer et de configurer le client LFS, de suivre des fichiers sp\xe9cifiques et de faire face \xe0 des conflits de fusion potentiels dus \xe0 la gestion s\xe9par\xe9e des fichiers volumineux du reste du d\xe9p\xf4t.\\n\\n## Pourquoi utiliser AWS CodeCommit pour stocker des fichiers volumineux dans Git\\n\\nAWS CodeCommit fournit une alternative convaincante pour stocker des fichiers volumineux dans les d\xe9p\xf4ts Git sans avoir besoin de Git LFS. CodeCommit est un service de contr\xf4le de source enti\xe8rement g\xe9r\xe9 qui s\'int\xe8gre parfaitement avec d\'autres services AWS, offrant une \xe9volutivit\xe9, une s\xe9curit\xe9 et une rentabilit\xe9 robustes. En tirant parti de CodeCommit, les d\xe9veloppeurs peuvent \xe9viter les frais g\xe9n\xe9raux suppl\xe9mentaires de gestion de Git LFS tout en b\xe9n\xe9ficiant de l\'infrastructure robuste d\'AWS et de son mod\xe8le de tarification \xe0 la carte.\\n\\n## Quelles sont les limitations d\'AWS CodeCommit par rapport \xe0 GitHub\\n\\nMalgr\xe9 ses avantages, AWS CodeCommit pr\xe9sente certaines limitations par rapport \xe0 GitHub. Le support communautaire \xe9tendu de GitHub, son riche \xe9cosyst\xe8me d\'int\xe9grations et ses fonctionnalit\xe9s avanc\xe9es telles que GitHub Actions et GitHub Pages ne sont peut-\xeatre pas enti\xe8rement reproduits dans CodeCommit. De plus, les d\xe9veloppeurs habitu\xe9s \xe0 l\'interface utilisateur et aux outils de collaboration de GitHub pourraient trouver que la transition vers CodeCommit n\xe9cessite une certaine adaptation.\\n\\n## Comment migrer un d\xe9p\xf4t Git LFS vers CodeCommit\\n\\nLa migration d\'un d\xe9p\xf4t Git LFS vers CodeCommit implique plusieurs \xe9tapes. Tout d\'abord, assurez-vous que tous les fichiers volumineux sont correctement suivis dans votre d\xe9p\xf4t Git LFS. Ensuite, clonez le d\xe9p\xf4t et supprimez la configuration de suivi Git LFS. Apr\xe8s cela, cr\xe9ez un nouveau d\xe9p\xf4t dans AWS CodeCommit et poussez-y votre d\xe9p\xf4t local. Une documentation d\xe9taill\xe9e et des scripts sont disponibles pour simplifier ce processus, assurant une transition en douceur sans perte de donn\xe9es ni interruption.\\n\\n## Une meilleure solution\\n\\nPour les \xe9quipes et projets fortement d\xe9pendants de Git LFS, explorer AWS CodeCommit comme alternative peut offrir des avantages significatifs. L\'int\xe9gration transparente de CodeCommit avec l\'\xe9cosyst\xe8me AWS, coupl\xe9e \xe0 sa nature rentable et \xe9volutive, en fait une option attrayante pour la gestion des fichiers volumineux dans les d\xe9p\xf4ts Git. En att\xe9nuant les d\xe9fis associ\xe9s \xe0 Git LFS, CodeCommit permet aux \xe9quipes de d\xe9veloppement de se concentrer sur la programmation et la collaboration, augmentant ainsi la productivit\xe9 et l\'innovation.\\n\\nEn conclusion, AWS CodeCommit offre une alternative viable, rentable et efficace au service de stockage de fichiers volumineux de GitHub. En tirant parti de l\'infrastructure robuste d\'AWS, les d\xe9veloppeurs peuvent g\xe9rer facilement les fichiers volumineux dans les d\xe9p\xf4ts Git, optimisant leurs flux de travail et r\xe9duisant les co\xfbts.\\n"},{"lang":"fr","group":"blog","slug":"blog/check-voltage-current-on-macos-for-power-adapter","frontmatter":{"title":"V\xe9rifier la Tension et le Courant sur MacOS pour l\'Adaptateur d\'Alimentation","meta_title":"V\xe9rifier la Tension et le Courant sur MacOS pour l\'Adaptateur d\'Alimentation","date":"2022-02-14T00:00:00.000Z","author":"Tan Shuai","tags":["MacOS","Adaptateur d\'Alimentation","Tension","Courant"],"categories":["MacOS"],"draft":false},"content":"\\nLorsque vous utilisez un MacBook, vous pouvez souhaiter v\xe9rifier la tension et le courant de l\'adaptateur secteur. Voici une m\xe9thode simple pour v\xe9rifier la tension et le courant de l\'adaptateur secteur sur MacOS.\\n\\nOuvrez Terminal.app et tapez la commande :\\n\\n`ioreg -l -n AppleSmartBattery -r | grep AppleRawAdapterDetails`\\n\\nVous obtiendrez les informations suivantes, incluant le courant et la tension :\\n\\n```json\\n\\"AppleRawAdapterDetails\\" = ({\\"IsWireless\\"=No,\\"AdapterID\\"=0,\\"FamilyCode\\"=18446744073172697098,\\"Watts\\"=89,**\\"Current\\"=4450**,\\"PMUConfiguration\\"=4448,**\\"Voltage\\"=20000**})\\n"},{"lang":"fr","group":"blog","slug":"blog/convert-markdown-academic-paper-pdf-macos","frontmatter":{"title":"Convertir rapidement des fichiers Markdown en PDF de style acad\xe9mique sur macOS","meta_title":"Convertir des fichiers Markdown en PDF de style acad\xe9mique sur macOS avec Pandoc","description":"D\xe9couvrez comment convertir des documents Markdown en PDF de style acad\xe9mique sur macOS en utilisant Pandoc et BasicTeX. Cette m\xe9thode rapide et simple est parfaite pour cr\xe9er des fichiers PDF professionnels pour les articles acad\xe9miques.","date":"2022-03-03T00:00:00.000Z","categories":["D\xe9veloppement de logiciels"],"author":"Tan Shuai","tags":["Pandoc","LaTeX","PDF","Article","Markdown","macOS"],"draft":false},"content":"\\nDans ce guide, je vais vous expliquer comment je convertis des documents Markdown en PDFs de style acad\xe9mique sur macOS en utilisant Pandoc et BasicTeX. Cette m\xe9thode est rapide et simple, parfaite pour cr\xe9er des fichiers PDF \xe0 l\'aspect professionnel pour vos articles acad\xe9miques.\\n\\n### \xc9tape 1 : Installer Pandoc et BasicTeX\\n\\nTout d\'abord, vous devez installer Pandoc et BasicTeX sur votre syst\xe8me macOS. Voici comment j\'ai proc\xe9d\xe9 :\\n\\n1. **Installer Pandoc** : Ouvrez Terminal et entrez la commande suivante pour installer Pandoc :\\n\\n   ```bash\\n   brew install pandoc\\n   ```\\n\\n2. **Installer BasicTeX** : Comme MacTeX est assez volumineux, j\'ai opt\xe9 pour le plus petit package BasicTeX afin d\'\xe9conomiser de l\'espace. Ex\xe9cutez cette commande :\\n\\n   ```bash\\n   brew install --cask basictex\\n   ```\\n\\n3. **Installer les paquets LaTeX courants** : Pour vous assurer d\'avoir les paquets n\xe9cessaires pour g\xe9n\xe9rer des PDFs, ex\xe9cutez ces commandes :\\n   ```bash\\n   sudo tlmgr update --self\\n   sudo tlmgr install collection-basic collection-latex collection-latexrecommended collection-fontsrecommended\\n   ```\\n\\n### \xc9tape 2 : Pr\xe9parer votre fichier Markdown\\n\\nEnsuite, cr\xe9ez votre fichier Markdown (par exemple, `paper.md`). Voici comment j\'ai configur\xe9 mon fichier, y compris le titre, l\'auteur, la date et les informations de contact :\\n\\n```markdown\\n---\\ntitle: \\"Your Paper Title\\"\\nsubtitle: \\"Optional Subtitle\\"\\ndate: \\\\today\\n\\nauthor: |\\n  | Your Name\\n  | your-email@tanshuai.com\\n  | www.tanshuai.com\\n---\\n\\n# Abstract\\n\\nYour abstract here.\\n\\n# Introduction\\n\\nYour introduction here.\\n\\n# Methodology\\n\\nYour methodology here.\\n\\n# Results\\n\\nYour results here.\\n\\n# Conclusion\\n\\nYour conclusion here.\\n```\\n\\n### \xc9tape 3 : Convertir le Markdown en PDF avec Pandoc\\n\\nMaintenant, vous pouvez convertir votre fichier Markdown en PDF. J\'ai utilis\xe9 la commande suivante dans Terminal :\\n\\n```bash\\npandoc paper.md -o paper.pdf --pdf-engine=xelatex\\n```\\n\\nCette commande utilise le mod\xe8le LaTeX par d\xe9faut de Pandoc pour convertir le fichier Markdown en PDF de style acad\xe9mique, y compris les informations de contact de l\'auteur sous son nom.\\n\\n### Conseils suppl\xe9mentaires\\n\\n- **Mod\xe8le LaTeX personnalis\xe9** : Si vous avez besoin de formatages plus avanc\xe9s ou de styles sp\xe9cifiques, vous pouvez cr\xe9er ou t\xe9l\xe9charger un mod\xe8le LaTeX personnalis\xe9 et l\'utiliser avec Pandoc :\\n\\n  ```bash\\n  pandoc paper.md -o paper.pdf --pdf-engine=xelatex --template=your-template.tex\\n  ```\\n\\n- **Plus de m\xe9tadonn\xe9es** : Vous pouvez ajouter des informations suppl\xe9mentaires dans l\'en-t\xeate de m\xe9tadonn\xe9es YAML, telles qu\'un r\xe9sum\xe9 ou des mots-cl\xe9s, et les utiliser dans des mod\xe8les personnalis\xe9s.\\n\\n### Conclusion\\n\\nEn suivant ces \xe9tapes, vous pouvez facilement convertir des documents Markdown en PDFs de style acad\xe9mique sur macOS. Utiliser Pandoc et BasicTeX rend ce processus rapide et efficace, parfait pour g\xe9n\xe9rer des documents PDF professionnels. Que vous pr\xe9pariez des articles acad\xe9miques, des rapports techniques ou d\'autres documents formels, cette m\xe9thode fonctionne tr\xe8s bien. Inclure des informations de contact dans l\'en-t\xeate de m\xe9tadonn\xe9es ajoute une touche professionnelle \xe0 vos documents.\\n\\nJ\'esp\xe8re que ce guide vous sera utile ! Si vous avez des questions ou rencontrez des probl\xe8mes, n\'h\xe9sitez pas \xe0 me contacter. Bonne r\xe9daction !\\n"},{"lang":"fr","group":"blog","slug":"blog/electron-build-tools-error-error-failed-to-run-choco-install-pywin32-yes","frontmatter":{"title":"Outils de Construction Electron `ERREUR Erreur ： \xc9chec de l\'ex\xe9cution de \\"choco install pywin32 --yes\\"`","date":"2021-09-08T00:00:00.000Z","draft":false,"author":"Tan Shuai","tags":["\xc9lectron","Outils de Construction","PyWin32","Chocolatey","Win32"],"categories":["D\xe9veloppement de Logiciels"]},"content":"\\nLors de l\'utilisation des outils de construction Electron, vous pouvez rencontrer une erreur li\xe9e \xe0 l\'installation de pywin32 via Chocolatey. Cela peut \xeatre frustrant, surtout lorsqu\'il s\'agit d\'une d\xe9pendance requise pour votre projet. Voici une explication d\xe9taill\xe9e du probl\xe8me et des \xe9tapes potentielles pour le r\xe9soudre.\\n\\n### L\'Erreur\\n\\nLors de l\'initialisation d\'un projet Electron \xe0 l\'aide des outils de construction Electron, vous pouvez voir le message d\'erreur suivant :\\n\\n```bash\\nE:\\\\\\\\>e init main-testing -i testing --root=e:/src/electron\\nWARN Une erreur r\xe9parable est survenue\\n--> Une d\xe9pendance requise \\"pywin32\\" n\'a pas pu \xeatre localis\xe9e, elle doit probablement \xeatre install\xe9e.\\nVoulez-vous que les outils de construction essaient de r\xe9soudre ce probl\xe8me ? [y/n] : y\\n\\nEx\xe9cution de \\"choco install pywin32 --yes\\"\\nERROR Erreur : \xc9chec de l\'ex\xe9cution de \\"choco install pywin32 --yes\\"\\n    at spawnSyncWithLog (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:11:11)\\n    at fix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:39:9)\\n    at maybeAutoFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\maybe-auto-fix.js:13:3)\\n    at whichAndFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\which.js:10:5)\\n    at checkPlatformDependencies (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:61:7)\\n    at Object.<anonymous> (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\e-init.js:165:3)\\n    at Module._compile (internal/modules/cjs/loader.js:1072:14)\\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1101:10)\\n    at Module.load (internal/modules/cjs/loader.js:937:32)\\n    at Function.Module._load (internal/modules/cjs/loader.js:778:12)\\n```\\n\\nCette erreur se produit g\xe9n\xe9ralement parce que le script d\'installation du paquet pywin32 ne peut pas trouver les fichiers requis sur le serveur distant. Cela entra\xeene une erreur 404, indiquant que le fichier n\'est pas disponible \xe0 l\'URL sp\xe9cifi\xe9e.\\n\\n### Comprendre l\'Erreur\\n\\nLa partie cl\xe9 du message d\'erreur est :\\n\\n```bash\\nERROR: Le fichier distant n\'existe pas, n\'est pas autoris\xe9, ou est interdit pour l\'URL \'http://sourceforge.net/projects/pywin32/files/pywin32/Build%20219/pywin32-219.win-amd64-py3.9.exe/download\'. Exception en appelant \\"GetResponse\\" avec \\"0\\" argument(s) : \\"Le serveur distant a retourn\xe9 une erreur : (404) Non trouv\xe9.\\"\\n\\nCela indique que l\'URL de t\xe9l\xe9chargement pour pywin32 n\'est plus valide, ce qui signifie que Chocolatey ne peut pas r\xe9cup\xe9rer les fichiers d\'installation n\xe9cessaires.\\n\\n### \xc9tapes de d\xe9pannage\\n\\nVoici quelques \xe9tapes que vous pouvez suivre pour r\xe9soudre ce probl\xe8me :\\n\\n#### 1. V\xe9rifier l\'installation de Chocolatey\\n\\nAssurez-vous que Chocolatey est install\xe9 correctement et mis \xe0 jour vers la derni\xe8re version. Vous pouvez v\xe9rifier votre version de Chocolatey avec :\\n\\n```bash\\nchoco --version\\n```\\n\\nPour mettre \xe0 jour Chocolatey, utilisez :\\n\\n```bash\\nchoco upgrade chocolatey\\n```\\n\\n#### 2. Installer pywin32 manuellement\\n\\n\xc9tant donn\xe9 que l\'installation automatique \xe9choue, essayez d\'installer pywin32 manuellement. Vous pouvez t\xe9l\xe9charger la version appropri\xe9e depuis la [page des versions officielles de pywin32 sur GitHub](https://github.com/mhammond/pywin32/releases) et l\'installer manuellement.\\n\\n#### 3. Modifier le script d\'installation\\n\\nSi vous avez le contr\xf4le sur le script des outils de construction d\'Electron, vous pouvez le modifier pour pointer vers une URL valide pour pywin32 ou g\xe9rer le processus d\'installation manuelle.\\n\\n#### 4. Utiliser un gestionnaire de paquets alternatif\\n\\nSi Chocolatey continue d\'\xe9chouer, envisagez d\'utiliser un gestionnaire de paquets alternatif comme pip pour les paquets Python :\\n\\n```bash\\npip install pywin32\\n```\\n\\n### Exemple d\'installation manuelle de pywin32\\n\\n1. T\xe9l\xe9chargez l\'installateur appropri\xe9 de pywin32 depuis les [versions officielles sur GitHub](https://github.com/mhammond/pywin32/releases).\\n2. Ex\xe9cutez l\'installateur et suivez les instructions d\'installation.\\n3. V\xe9rifiez l\'installation en ex\xe9cutant un script Python simple qui importe pywin32 :\\n\\n```python\\nimport win32api\\nprint(win32api.GetVersionEx())\\n```\\n\\nRencontrer l\'erreur \xab Failed to run `choco install pywin32 --yes` \xbb peut \xeatre un obstacle dans votre processus de d\xe9veloppement. Cependant, en comprenant la cause profonde et en suivant les \xe9tapes d\xe9crites ci-dessus, vous pouvez surmonter ce probl\xe8me et continuer avec la configuration de votre projet Electron.\\n"},{"lang":"fr","group":"blog","slug":"blog/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining","frontmatter":{"title":"Les secrets de la conception ASIC enti\xe8rement personnalis\xe9e pour le minage de Bitcoin et de cryptomonnaies","date":"2022-05-30T00:00:00.000Z","categories":["Semi-conducteurs","Bitcoin","Cryptomonnaie","Blockchain"],"author":"Tan Shuai","tags":["ASIC","Bitcoin","Minage","BTC"],"draft":false,"contact":"Tan Shuai | tanshuai@btc.com | tanshuai.com"},"content":"\\nTan Shuai  \\n[tanshuai@btc.com](mailto:tanshuai@btc.com)  \\n[tanshuai.com](https://tanshuai.com)\\n\\n---\\n\\n## R\xe9sum\xe9\\n\\nDans le monde comp\xe9titif du minage de cryptomonnaies, l\'efficacit\xe9 \xe9nerg\xe9tique, les performances de hashrate et la fiabilit\xe9 sont primordiales. Cet article explore la conception ASIC (circuit int\xe9gr\xe9 sp\xe9cifique \xe0 une application) enti\xe8rement personnalis\xe9e de premier ordre, r\xe9v\xe9lant les secrets de l\'industrie et les m\xe9thodologies expertes qui propulsent le minage de Bitcoin et de cryptomonnaies \xe0 haute performance. \xc9crit par un expert en technologie d\'une des principales entreprises de minage ASIC, cet article s\'appuie sur des techniques de conception avanc\xe9es, une disposition physique m\xe9ticuleuse et des processus de v\xe9rification complets pour d\xe9montrer les capacit\xe9s exceptionnelles des ASIC enti\xe8rement personnalis\xe9s dans l\'optimisation de l\'efficacit\xe9 et de la rentabilit\xe9 du minage.\\n\\n## Introduction\\n\\nL\'\xe9volution du minage de cryptomonnaies, en particulier le minage de Bitcoin, a vu une transition de l\'utilisation de CPU, FPGA et GPU \xe0 usage g\xe9n\xe9ral vers des ASIC sp\xe9cialis\xe9s. Ces ASIC offrent des performances et une efficacit\xe9 \xe9nerg\xe9tique in\xe9gal\xe9es. La conception ASIC enti\xe8rement personnalis\xe9e repr\xe9sente le sommet de cette \xe9volution, permettant des solutions sur mesure qui r\xe9pondent aux exigences sp\xe9cifiques des op\xe9rations de minage.\\n\\nUne grande partie de la litt\xe9rature existante sur la conception ASIC pour le minage de cryptomonnaies provient du milieu acad\xe9mique ou d\'entreprises non li\xe9es au minage, ce qui manque souvent de pertinence pratique. \xc0 ce jour, seules quelques entreprises, principalement chinoises (par exemple, MicroBT, Bitmain), ont r\xe9ussi \xe0 d\xe9velopper des ASIC de minage de Bitcoin commercialisables. Cet article vise \xe0 combler cette lacune en fournissant des informations tir\xe9es de la pratique industrielle r\xe9elle, offrant une perspective ancr\xe9e dans les r\xe9alit\xe9s du secteur minier.\\n\\nEn tant que professionnel avec plus de dix ans d\'exp\xe9rience dans l\'industrie technologique, l\'auteur de cet article a d\xe9velopp\xe9 le meilleur ASIC Miner Bitcoin au monde (WhatsMiner), les Miners LTC/DOGE et ETH, et a jou\xe9 un r\xf4le cl\xe9 dans des entreprises comme MicroBT, BTC.COM, et d\'autres soci\xe9t\xe9s sans usine cot\xe9es en bourse. Il a occup\xe9 des postes cl\xe9s dans des entreprises cot\xe9es au NASDAQ, HKSE et NYSE. Avec une vaste exp\xe9rience dans l\'\xe9tablissement de partenariats avec TSMC, Texas Instruments, ARM et Intel, il apporte une richesse de connaissances et d\'expertise pratique dans le domaine de la conception ASIC personnalis\xe9e pour le minage de Bitcoin et de cryptomonnaies.\\n\\n## M\xe9thodologie et Flux de Conception\\n\\n### Philosophie de Conception\\n\\nNotre approche de la conception ASIC enti\xe8rement personnalis\xe9e est guid\xe9e par un objectif de maximisation de la PPA (Puissance, Performance et Surface), en particulier dans des conditions de fonctionnement \xe0 basse tension. Cette section d\xe9crit notre philosophie et m\xe9thodologie de conception :\\n\\n1. **Architecture Pipeline** : Exploiter les avantages inh\xe9rents des structures pipeline pour les algorithmes de minage, caract\xe9ris\xe9s par des registres et des \xe9tapes de logique combinatoire. En utilisant une architecture pipeline, nous pouvons g\xe9rer efficacement les op\xe9rations \xe0 haute fr\xe9quence requises pour le minage de cryptomonnaie.\\n2. **Netlist et Placement Manuels** : Script d\xe9taill\xe9 pour la cr\xe9ation de la netlist et placement manuel des cellules afin d\'optimiser les chemins critiques. Cela permet un contr\xf4le pr\xe9cis du timing et r\xe9duit les effets parasites.\\n3. **Biblioth\xe8ques de Cellules Personnalis\xe9es** : D\xe9velopper des cellules sp\xe9cialis\xe9es avec des nombres de transistors optimis\xe9s et des caract\xe9ristiques dynamiques d\'\xe9conomie d\'\xe9nergie. Les cellules personnalis\xe9es sont con\xe7ues pour fonctionner \xe0 des tensions aussi basses que possible, garantissant une consommation d\'\xe9nergie minimale.\\n\\n### Atteindre les B\xe9n\xe9fices de la PPA\\n\\nStrat\xe9gies d\xe9taill\xe9es pour atteindre les b\xe9n\xe9fices de la PPA gr\xe2ce \xe0 une conception personnalis\xe9e :\\n\\n1. **Conception de Registres Personnalis\xe9s** : Utiliser des registres multi-bits et des conceptions bas\xe9es sur des verrouillages pour r\xe9duire la puissance d\'horloge et am\xe9liorer l\'emprunt de timing. Les registres multi-bits minimisent la consommation d\'\xe9nergie de l\'arbre d\'horloge et r\xe9duisent la surface globale.\\n2. **Placement Manuel** : R\xe9duire la longueur des fils et \xe9quilibrer les temps de configuration et de maintien pour am\xe9liorer la performance globale. Le placement manuel permet un meilleur contr\xf4le des d\xe9lais d\'interconnexion et des diaphonies, am\xe9liorant l\'int\xe9grit\xe9 du signal et r\xe9duisant la consommation d\'\xe9nergie.\\n3. **Conception de Cellules Optimis\xe9e** : Les cellules personnalis\xe9es sont con\xe7ues pour fonctionner \xe0 des tensions plus basses, minimisant la consommation d\'\xe9nergie dynamique et maximisant l\'efficacit\xe9. En adaptant les conceptions des cellules aux besoins sp\xe9cifiques des algorithmes de minage, nous pouvons obtenir des am\xe9liorations significatives en termes de performance.\\n\\n### Fiabilit\xe9 Sous Basse Tension\\n\\nAssurer la fiabilit\xe9 de la logique de timing con\xe7ue sur mesure \xe0 basse tension implique :\\n\\n1. **Simulation Pr\xe9cise** : Simulations au niveau du circuit pour valider le comportement des cellules personnalis\xe9es dans des conditions sp\xe9cifiques. Des outils comme SPICE sont utilis\xe9s pour des simulations \xe9lectriques d\xe9taill\xe9es afin de garantir que les cellules fonctionnent correctement sous tous les coins PVT (Processus, Tension, Temp\xe9rature).\\n2. **Coh\xe9rence dans le Placement** : Placement manuel pour assurer l\'uniformit\xe9 et r\xe9duire la variabilit\xe9. En contr\xf4lant la disposition physique, nous pouvons minimiser l\'impact des variations de processus et garantir des performances constantes.\\n3. **Calibration PVT Pr\xe9cise** : V\xe9rification par rapport aux variations de processus, de tension et de temp\xe9rature. Des tests et une calibration approfondis sont effectu\xe9s pour garantir la robustesse de la conception dans diff\xe9rentes conditions de fonctionnement.\\n\\n## \xc9tudes de cas et r\xe9sultats\\n\\nPr\xe9sentation de donn\xe9es r\xe9elles et d\'\xe9tudes de cas provenant de tape-outs complets de masques :\\n\\n| Projet | Nœud de proc\xe9d\xe9 | Efficacit\xe9 Tension/Puissance | Algorithme |\\n| ------- | ------------ | ------------------------ | --------- |\\n| SC      | TSMC 28nm    | 0,45V, 257J/T            | Blake2b   |\\n| DCR     | TSMC 28nm    | 0,45V, 150J/T            | Blake256  |\\n| DASH    | TSMC 16nm    | 0,38V, 6,2J/G            | X11       |\\n| BTC     | TSMC 16nm    | 0,38V, 65J/T             | SHA-256d  |\\n| BTC     | TSMC 7nm     | 0,30V, 37J/T             | SHA-256d  |\\n| BTC     | Samsung 8nm  | 0,31V, 45J/T             | SHA-256d  |\\n| BTC     | SMIC N+1     | 0,30V, 35J/T             | SHA-256d  |\\n\\nCes r\xe9sultats d\xe9montrent les gains substantiels en efficacit\xe9 et en performance r\xe9alisables gr\xe2ce \xe0 notre approche de conception personnalis\xe9e.\\n\\n## Int\xe9gration et v\xe9rification\\n\\n### Validation des cellules mixtes\\n\\n- **Int\xe9gration de cellules personnalis\xe9es** : Les cellules personnalis\xe9es sont int\xe9gr\xe9es avec des cellules standard de TSMC et d\'autres fonderies, assurant compatibilit\xe9 et performance. Les cellules personnalis\xe9es sont caract\xe9ris\xe9es et valid\xe9es pour correspondre aux exigences de la biblioth\xe8que de cellules standard, permettant une int\xe9gration transparente.\\n- **Strat\xe9gies de validation** : Les strat\xe9gies pour assurer une compatibilit\xe9 et une performance sans faille incluent des v\xe9rifications d\xe9taill\xe9es DRC (Design Rule Check) et LVS (Layout Versus Schematic), ainsi que des analyses de timing et de puissance \xe0 l\'aide d\'outils EDA (Electronic Design Automation) standard de l\'industrie.\\n\\n### Co-conception num\xe9rique et analogique\\n\\n- **Techniques d\'int\xe9gration** : Int\xe9gration des composants num\xe9riques et analogiques pour optimiser les performances globales de la puce. Des techniques telles que la v\xe9rification mixte de signaux et la co-simulation sont utilis\xe9es pour garantir une int\xe9gration et une fonctionnalit\xe9 correctes.\\n- **M\xe9thodologies de v\xe9rification** : Les m\xe9thodologies pour assurer la robustesse dans diff\xe9rentes conditions op\xe9rationnelles incluent l\'analyse de coin, les simulations Monte Carlo et la v\xe9rification de la fiabilit\xe9 pour aborder le vieillissement et l\'\xe9lectromigration.\\n\\n## Conclusion\\n\\nLa conception ASIC enti\xe8rement personnalis\xe9e offre des avantages significatifs pour le minage de Bitcoin et de cryptomonnaies, fournissant des performances, une efficacit\xe9 \xe9nerg\xe9tique et une fiabilit\xe9 in\xe9gal\xe9es. En d\xe9voilant les secrets de la conception ASIC personnalis\xe9e de haut niveau, ce document met en lumi\xe8re les m\xe9thodologies et les innovations qui distinguent les leaders de l\'industrie. Alors que le minage de cryptomonnaies continue d\'\xe9voluer, les ASIC personnalis\xe9s joueront un r\xf4le crucial dans la conduite de la prochaine g\xe9n\xe9ration de mat\xe9riel de minage \xe0 haute efficacit\xe9 et haute performance.\\n\\n[Version PDF de l\'article](/docs/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining.pdf)\\n"},{"lang":"fr","group":"blog","slug":"blog/get-current-commit-id-of-git-and-update-to-package-json","frontmatter":{"title":"Obtenir l\'ID de commit actuel de Git et le mettre \xe0 jour dans package.json","date":"2021-08-21T09:19:58.875Z","draft":false,"author":"Tan Shuai","tags":["Git","Package.json","Node.js"],"categories":["D\xe9veloppement logiciel"]},"content":"\\nLors du d\xe9veloppement d\'un projet Node.js, vous pouvez vouloir suivre l\'ID de commit actuel de votre d\xe9p\xf4t Git. Cette information peut \xeatre utile pour le d\xe9bogage, la gestion des versions ou les d\xe9ploiements. Une fa\xe7on d\'y parvenir est de mettre \xe0 jour le fichier `package.json` avec l\'ID de commit actuel pendant le processus de build. Cet article vous guidera \xe0 travers les \xe9tapes pour obtenir l\'ID de commit actuel de Git et le mettre \xe0 jour dans le fichier `package.json` en utilisant Node.js.\\n\\n```bash\\n\\"predev\\": \\"node ./node_modules/json/lib/json.js -I -f package.json -e \\\\\\\\\\\\\\"this.commit=\'$(git rev-parse --short HEAD)\'\\\\\\\\\\\\\\"\\",\\n"},{"lang":"fr","group":"blog","slug":"blog/migrate-a-github-lfs-git-large-file-storage-repository-to-aws-codecommit","frontmatter":{"title":"Migrer un d\xe9p\xf4t GitHub LFS (Git Large File Storage) vers AWS CodeCommit","date":"2022-02-09T09:36:57.481Z","draft":false,"author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["D\xe9veloppement logiciel"]},"content":"\\nJ\'ai r\xe9cemment migr\xe9 l\'un de mes d\xe9p\xf4ts GitHub, qui utilise Git Large File Storage (LFS), vers AWS CodeCommit. J\'ai pens\xe9 partager le processus avec vous au cas o\xf9 vous chercheriez \xe0 faire quelque chose de similaire. Voici un guide \xe9tape par \xe9tape bas\xe9 sur mon exp\xe9rience.\\n\\n## Pr\xe9requis\\n\\nAvant de commencer, assurez-vous d\'avoir install\xe9 ces outils :\\n\\n- Git\\n- Git LFS\\n- AWS CLI\\n\\n## Guide \xe9tape par \xe9tape\\n\\n### 1. Cloner le d\xe9p\xf4t\\n\\nTout d\'abord, clonez votre d\xe9p\xf4t GitHub en utilisant l\'option `--mirror`. Cela cr\xe9e un clone nu du d\xe9p\xf4t, incluant toutes les branches et tags.\\n\\n```zsh\\ngit clone --mirror https://github.com/tanshuai/designs.git designs\\n```\\n\\n### 2. V\xe9rifier les fichiers LFS\\n\\nEnsuite, listez tous les fichiers g\xe9r\xe9s par Git LFS pour vous assurer que tout est en place.\\n\\n```zsh\\ngit lfs ls-files\\n```\\n\\nVous devriez voir quelque chose comme ceci :\\n\\n```\\ncadfa0bc9e * Brochure-Trifold-Draft.ai\\naf9b8b8a1c * Brochure-Trifold-English.ai\\n27bb5f4e61 * Brochure-Trifold.ai\\n```\\n\\n### 3. Migrer les fichiers LFS\\n\\nMaintenant, exportez les fichiers LFS. Cette \xe9tape permet de s\'assurer qu\'ils font partie de l\'historique de votre d\xe9p\xf4t.\\n\\n```zsh\\ngit lfs migrate export --include=\\"*.ai\\" --everything\\n```\\n\\nVous verrez des messages de progression comme ceux-ci :\\n\\n```\\nmigrate: Sorting commits: ..., done.\\nmigrate: Rewriting commits: 100% (20/20), done.\\nmaster    98a3c48d85... -> 82f8873b41...\\nmigrate: Updating refs: ..., done.\\nmigrate: checkout: ..., done.\\nprune: 3 local object(s), 0 retained, done.\\ncadfa0bc9e... (133 MB)\\n27bb5f4e61... (131 MB)\\naf9b8b8a1c... (130 MB), done.\\nprune: Deleting objects: 100% (3/3), done.\\n```\\n\\n### 4. Nettoyer LFS\\n\\nSupprimez les informations de suivi Git LFS et d\xe9sinstallez Git LFS.\\n\\n```zsh\\ngit lfs ls-files\\ngit rm .gitattributes -f\\ngit lfs uninstall\\n```\\n\\n### 5. Pousser vers AWS CodeCommit\\n\\nEnfin, poussez votre d\xe9p\xf4t vers AWS CodeCommit.\\n\\n```zsh\\ngit push https://git-codecommit.us-east-2.amazonaws.com/v1/repos/designs --all\\n```\\n\\nC\'est tout ! En suivant ces \xe9tapes, j\'ai r\xe9ussi \xe0 migrer mon d\xe9p\xf4t GitHub LFS vers AWS CodeCommit. Les gros fichiers et l\'historique du d\xe9p\xf4t ont \xe9t\xe9 parfaitement pr\xe9serv\xe9s.\\n\\n## Conclusion\\n\\nMigrer un d\xe9p\xf4t GitHub qui utilise Git LFS vers AWS CodeCommit est assez simple si vous suivez les bonnes \xe9tapes. Si vous avez des questions ou rencontrez des probl\xe8mes, la [documentation AWS CodeCommit](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) et la [documentation Git LFS](https://git-lfs.github.com/) sont d\'excellentes ressources.\\n\\nJ\'esp\xe8re que ce guide vous sera utile. Bon codage !\\n"},{"lang":"fr","group":"blog","slug":"blog/reset-restore-all-subdirectories-of-git","frontmatter":{"title":"R\xe9initialiser/Restaurer tous les sous-r\xe9pertoires de Git","date":"2021-09-22T08:33:49.201Z","draft":false,"author":"Tan Shuai","tags":["Git","Contr\xf4le de version"],"categories":["D\xe9veloppement logiciel"]},"content":"\\nG\xe9rer efficacement un d\xe9p\xf4t Git n\xe9cessite souvent de r\xe9initialiser ou de restaurer des sous-r\xe9pertoires pour maintenir une base de code propre et fonctionnelle. Ce guide fournit une approche concise et \xe9tape par \xe9tape pour r\xe9initialiser ou restaurer tous les sous-r\xe9pertoires d\'un d\xe9p\xf4t Git.\\n\\n## R\xe9initialisation des sous-r\xe9pertoires\\n\\nLa commande Git suivante supprime tous les fichiers et r\xe9pertoires non suivis du d\xe9p\xf4t. Cela est utile pour nettoyer les fichiers inutiles avant d\'effectuer une r\xe9initialisation ou une restauration.\\n\\n```bash\\ngit clean -xfdf -- .\\n```\\n\\n### D\xe9composition de la commande :\\n\\n- `-x` : Supprimer tous les fichiers non suivis, y compris ceux ignor\xe9s par `.gitignore`.\\n- `-f` : Forcer la suppression des fichiers.\\n- `-d` : Supprimer les r\xe9pertoires non suivis.\\n- `-- .` : Appliquer la commande au r\xe9pertoire courant et \xe0 tous les sous-r\xe9pertoires.\\n\\n## Restauration des sous-r\xe9pertoires\\n\\nPour restaurer tous les fichiers du d\xe9p\xf4t \xe0 leur \xe9tat de dernier commit, utilisez la commande suivante :\\n\\n```bash\\ngit checkout {HEAD OR BRANCH} -- .\\n```\\n\\n### D\xe9composition de la commande :\\n\\n- `{HEAD OR BRANCH}` : Remplacer par `HEAD` pour r\xe9initialiser au dernier commit ou sp\xe9cifier un nom de branche pour r\xe9initialiser \xe0 une branche sp\xe9cifique.\\n- `-- .` : Appliquer la commande au r\xe9pertoire courant et \xe0 tous les sous-r\xe9pertoires.\\n\\nEn utilisant ces commandes, vous pouvez vous assurer que votre d\xe9p\xf4t est exempt de fichiers ind\xe9sirables et que tous les fichiers sont restaur\xe9s \xe0 leur \xe9tat de commit. Ce processus aide \xe0 maintenir une base de code propre et organis\xe9e, facilitant ainsi la collaboration et le d\xe9veloppement.\\n\\nN\'h\xe9sitez pas \xe0 personnaliser ce guide selon vos besoins et pr\xe9f\xe9rences sp\xe9cifiques. Pour des op\xe9rations Git plus avanc\xe9es, consultez la [documentation officielle de Git](https://git-scm.com/doc).\\n"},{"lang":"fr","group":"blog","slug":"blog/ultra-low-cost-ddr3-ddr4-lpddr3-lpddr4-memory-test-system","frontmatter":{"title":"Syst\xe8me de Test de M\xe9moire DDR3, DDR4, LP-DDR3 et LP-DDR4 \xe0 Tr\xe8s Bas Co\xfbt","description":"D\xe9couvrez un syst\xe8me de test de m\xe9moire \xe0 tr\xe8s bas co\xfbt pour les technologies DDR3, DDR4, LP-DDR3 et LP-DDR4. Propos\xe9 \xe0 environ 200 000 USD, il offre des tests \xe0 haute vitesse, une grande polyvalence, des fonctionnalit\xe9s avanc\xe9es et une faible consommation d\'\xe9nergie. Parfait pour les entreprises \xe0 la recherche de solutions de test de m\xe9moire \xe9conomiques et fiables.","date":"2024-06-01T00:00:00.000Z","categories":["Semi-conducteurs"],"author":"Tan Shuai","tags":["DDR3","DDR4","LP-DDR3","LP-DDR4","Syst\xe8me de Test de M\xe9moire"],"draft":false},"content":"\\nSi vous \xeates comme moi, toujours \xe0 la recherche de solutions \xe9conomiques sans compromettre la qualit\xe9, vous allez adorer ce que j\'ai \xe0 partager aujourd\'hui. Dans notre monde technologique en perp\xe9tuel mouvement, il est crucial de s\'assurer que la m\xe9moire de nos appareils est \xe0 la hauteur. Les options haut de gamme comme le T5503/T5503HS2 sont fantastiques, mais elles sont accompagn\xe9es d\'un prix \xe9lev\xe9. Heureusement, Zeeis a lanc\xe9 un syst\xe8me de test de m\xe9moire ultra-\xe9conomique qui ne sacrifie pas la performance.\\n\\n## Pourquoi c\'est important\\n\\nLorsque j\'ai entendu parler du syst\xe8me de test de m\xe9moire de Zeeis pour la premi\xe8re fois, j\'ai \xe9t\xe9 intrigu\xe9. Ce syst\xe8me est con\xe7u pour g\xe9rer les technologies de m\xe9moire DDR3, DDR4, LP-DDR3 et LP-DDR4. Que vous travailliez avec des syst\xe8mes plus anciens ou la technologie la plus r\xe9cente, ce syst\xe8me r\xe9pond \xe0 vos besoins.\\n\\n### Test \xe0 haute vitesse\\n\\nL\'une des caract\xe9ristiques remarquables est sa capacit\xe9 \xe0 supporter des taux de transfert de donn\xe9es allant de 800 \xe0 3200 MT/s pour le DDR3 et le DDR4. Il peut \xe9valuer les modules de m\xe9moire \xe0 des vitesses d\'horloge allant jusqu\'\xe0 1600 MHz. Cela signifie des tests approfondis et fiables, garantissant que vos appareils fonctionnent au mieux.\\n\\n### Polyvalence\\n\\nLa polyvalence de ce syst\xe8me est r\xe9volutionnaire. Il prend en charge plusieurs standards de m\xe9moire, le rendant adapt\xe9 \xe0 une large gamme d\'applications, des \xe9lectroniques grand public \xe0 l\'informatique haute performance. De plus, il est \xe9volutif. \xc0 mesure que de nouvelles technologies de m\xe9moire \xe9mergent, ce syst\xe8me peut \xeatre facilement mis \xe0 jour pour les supporter.\\n\\n### Rentabilit\xe9\\n\\nParlons maintenant du prix. \xc0 environ 200 000 USD, ce syst\xe8me offre un excellent retour sur investissement. Il est suffisamment abordable pour les petites et moyennes entreprises, garantissant des capacit\xe9s de test de premier ordre sans se ruiner.\\n\\n### Caract\xe9ristiques avanc\xe9es\\n\\nLe syst\xe8me est dot\xe9 d\'algorithmes de test avanc\xe9s, y compris un g\xe9n\xe9rateur de motifs algorithmiques int\xe9gr\xe9 (ALPG). Cela garantit une \xe9valuation pr\xe9cise et fiable de la m\xe9moire, de sorte que chaque module r\xe9pond \xe0 des normes de performance strictes.\\n\\n### Faible consommation d\'\xe9nergie\\n\\nCe qui est \xe9galement impressionnant, c\'est sa faible consommation d\'\xe9nergie. Cela s\'aligne avec les tendances observ\xe9es dans les technologies de m\xe9moire LP-DDR3 et LP-DDR4. En fonctionnant \xe0 des tensions plus basses, il r\xe9duit non seulement les co\xfbts \xe9nerg\xe9tiques mais aussi la production thermique, ce qui en fait un choix \xe9cologique.\\n\\n## Pourquoi choisir Zeeis ?\\n\\n### Scalabilit\xe9\\n\\nLe syst\xe8me de Zeeis est con\xe7u pour \xeatre \xe9volutif. \xc0 mesure que de nouvelles technologies de m\xe9moire \xe9mergent, le syst\xe8me peut \xeatre facilement mis \xe0 jour, garantissant une utilisation \xe0 long terme et r\xe9duisant le besoin de remplacements fr\xe9quents.\\n\\n### Support et Documentation\\n\\nUn autre grand avantage est le support et la documentation \xe9tendus de Zeeis. Que vous soyez un professionnel chevronn\xe9 ou novice en mati\xe8re de test de m\xe9moire, leurs guides d\xe9taill\xe9s et leur service client r\xe9actif assurent une exp\xe9rience fluide.\\n\\n### R\xe9pondre aux exigences du march\xe9\\n\\nAvec la demande croissante de m\xe9moire haute vitesse, allant des smartphones aux centres de donn\xe9es, disposer d\'une solution de test de m\xe9moire fiable et rentable est essentiel. Le syst\xe8me de Zeeis r\xe9pond \xe0 ces exigences, garantissant que vos produits sont pr\xeats pour le march\xe9 et fonctionnent parfaitement dans des applications r\xe9elles.\\n\\n## Conclusion\\n\\nEn r\xe9sum\xe9, le syst\xe8me de test de m\xe9moire DDR3, DDR4, LP-DDR3 et LP-DDR4 ultra-\xe9conomique de Zeeis est une option fantastique pour ceux d\'entre nous qui ont besoin de solutions de test de m\xe9moire fiables, polyvalentes et abordables. Il offre des performances \xe9lev\xe9es \xe0 une fraction du co\xfbt des autres syst\xe8mes haut de gamme, permettant aux entreprises de maintenir des standards \xe9lev\xe9s sans se ruiner.\\n\\nSi vous \xeates int\xe9ress\xe9 par l\'am\xe9lioration de vos capacit\xe9s de test avec un syst\xe8me con\xe7u pour l\'avenir de la technologie de m\xe9moire, n\'h\xe9sitez pas \xe0 me contacter pour plus d\'informations \xe0 [i@tanshuai.com](mailto:i@tanshuai.com).\\n\\nBon test !\\n"},{"lang":"fr","group":"blog","slug":"blog/usr-bin-sudo-must-be-owned-by-uid-0-and-have-the-setuid-bit-set-on-ubuntu-20-04","frontmatter":{"title":"/usr/bin/sudo doit appartenir \xe0 uid 0 et avoir le bit setuid activ\xe9 sur Ubuntu 20.04","date":"2021-10-08T13:07:25.406Z","draft":false,"author":"Tan Shuai","tags":["Ubuntu","Linux","Sudo"],"categories":["Linux"]},"content":"\\nSi vous rencontrez le message d\'erreur \xab /usr/bin/sudo must be owned by uid 0 and have the setuid bit set \xbb sur Ubuntu 20.04, suivez ces \xe9tapes pour r\xe9soudre le probl\xe8me.\\n\\n1. Pendant le processus de d\xe9marrage, appuyez sur la touche ‘ESC’ pour acc\xe9der au menu GRUB.\\n\\n![\xc9cran GRUB](/images/content/wx20211008-210752.png \\"\xc9cran GRUB\\")\\n\\n2. S\xe9lectionnez la premi\xe8re option, \xab Ubuntu \xbb, et appuyez sur la touche ‘e’ pour modifier les param\xe8tres de d\xe9marrage.\\n\\n![Modifier les param\xe8tres de d\xe9marrage](/images/content/wx20211008-210841.png \\"Modifier les param\xe8tres de d\xe9marrage\\")\\n\\n3. Ajoutez la cha\xeene suivante \xe0 la ligne commen\xe7ant par ‘linux’ pour d\xe9marrer en mode de r\xe9cup\xe9ration :\\n\\n```bash\\nsystemd.unit=rescue.target\\n```\\n\\n4. Une fois en mode de r\xe9cup\xe9ration, ex\xe9cutez la commande suivante pour restaurer les permissions et la propri\xe9t\xe9 correctes de `/usr/bin/sudo` :\\n\\n```bash\\npkexec chmod a=rx,u+ws /usr/bin/sudo\\n```\\n\\nCette commande d\xe9finit les permissions n\xe9cessaires et s\'assure que `sudo` est poss\xe9d\xe9 par l\'utilisateur root avec le bit setuid activ\xe9.\\n\\nEn suivant ces \xe9tapes, vous devriez pouvoir r\xe9soudre le probl\xe8me et restaurer le bon fonctionnement de la commande `sudo` sur votre syst\xe8me Ubuntu.\\n\\n---\\n"},{"lang":"ru","group":"blog","slug":"blog/aws-codecommit-the-githubs-large-file-storage-git-lfs-free-alternative","frontmatter":{"title":"AWS CodeCommit： бесплатная альтернатива GitHub Large File Storage (Git LFS)","description":"Узнайте, как AWS CodeCommit является экономичной и эффективной альтернативой GitHub Large File Storage (Git LFS). В этой статье рассматриваются ограничения Git LFS, преимущества использования AWS CodeCommit для хранения больших файлов и предоставляется пошаговое руководство по переходу с Git LFS на CodeCommit. Улучшите ваш рабочий процесс разработки с помощью масштабируемой и безопасной инфраструктуры AWS.","date":"2022-02-09T00:00:00.000Z","author":"Тан Шуай","tags":["AWS","Git","GitHub","LFS"],"categories":["Разработка программного обеспечения"],"draft":false},"content":"\\nAWS CodeCommit предлагает надёжную альтернативу службе Large File Storage (Git LFS) от GitHub, предоставляя эффективное решение для управления большими файлами в ваших Git-репозиториях.\\n\\n## Почему стоит пересмотреть использование Git LFS\\n\\nХотя Git LFS является популярным выбором для работы с большими файлами в Git-репозиториях, у него есть свои ограничения и проблемы. Git LFS требует дополнительной настройки и управления, что может усложнить рабочий процесс разработки. Кроме того, затраты на хранение и пропускную способность, связанные с Git LFS, могут быстро увеличиваться, особенно для проектов с многочисленными большими файлами или при интенсивном сотрудничестве.\\n\\n## Почему служба Large File Storage от GitHub не является идеальной\\n\\nСлужба Large File Storage от GitHub, хотя и полезна, имеет свои недостатки. Основная проблема — это стоимость, связанная с хранением и пропускной способностью, которая может стать непомерной для больших проектов. Кроме того, управление Git LFS может быть затруднительным, требуя от разработчиков установки и настройки клиента LFS, отслеживания конкретных файлов и решения возможных конфликтов слияния, возникающих из-за обработки больших файлов отдельно от остальной части репозитория.\\n\\n## Почему стоит использовать AWS CodeCommit для хранения больших файлов в Git\\n\\nAWS CodeCommit предлагает убедительную альтернативу для хранения больших файлов в Git-репозиториях без необходимости использования Git LFS. CodeCommit — это полностью управляемая служба контроля версий, которая бесшовно интегрируется с другими сервисами AWS, предлагая надёжную масштабируемость, безопасность и экономичность. Используя CodeCommit, разработчики могут избежать дополнительной нагрузки, связанной с управлением Git LFS, и воспользоваться надёжной инфраструктурой AWS и моделью оплаты по мере использования.\\n\\n## Каковы ограничения AWS CodeCommit по сравнению с GitHub\\n\\nНесмотря на свои преимущества, AWS CodeCommit имеет некоторые ограничения по сравнению с GitHub. Обширная поддержка сообщества GitHub, богатая экосистема интеграций и передовые функции, такие как GitHub Actions и GitHub Pages, могут быть не полностью воспроизведены в CodeCommit. Кроме того, разработчики, привыкшие к пользовательскому интерфейсу и инструментам совместной работы GitHub, могут столкнуться с необходимостью адаптации при переходе на CodeCommit.\\n\\n## Как перенести репозиторий Git LFS в CodeCommit\\n\\nПеренос репозитория Git LFS в CodeCommit включает несколько шагов. Сначала убедитесь, что все большие файлы правильно отслеживаются в вашем репозитории Git LFS. Затем клонируйте репозиторий и удалите конфигурацию отслеживания Git LFS. После этого создайте новый репозиторий в AWS CodeCommit и отправьте в него ваш локальный репозиторий. Подробная документация и скрипты доступны для упрощения этого процесса, обеспечивая плавный переход без потери данных или сбоев.\\n\\n## Лучшее решение\\n\\nДля команд и проектов, сильно зависящих от Git LFS, изучение AWS CodeCommit как альтернативы может предложить значительные преимущества. Бесшовная интеграция CodeCommit с экосистемой AWS, в сочетании с его экономичностью и масштабируемостью, делает его привлекательным вариантом для управления большими файлами в Git-репозиториях. Устраняя проблемы, связанные с Git LFS, CodeCommit позволяет командам разработчиков сосредоточиться на кодировании и сотрудничестве, повышая производительность и стимулируя инновации.\\n\\nВ заключение, AWS CodeCommit предоставляет жизнеспособную, экономичную и эффективную альтернативу службе хранения больших файлов GitHub. Используя надежную инфраструктуру AWS, разработчики могут легко управлять большими файлами в Git-репозиториях, оптимизируя свои рабочие процессы и снижая накладные расходы.\\n"},{"lang":"ru","group":"blog","slug":"blog/check-voltage-current-on-macos-for-power-adapter","frontmatter":{"title":"Проверка напряжения и тока на MacOS для адаптера питания","meta_title":"Проверка напряжения и тока на MacOS для адаптера питания","date":"2022-02-14T00:00:00.000Z","author":"Тан Шуай","tags":["MacOS","Адаптер питания","Напряжение","Ток"],"categories":["MacOS"],"draft":false},"content":"\\nКогда вы используете MacBook, вам может понадобиться проверить напряжение и ток адаптера питания. Вот простой способ проверить напряжение и ток адаптера питания на MacOS.\\n\\nОткройте Terminal.app и введите команду:\\n\\n`ioreg -l -n AppleSmartBattery -r |grep AppleRawAdapterDetails`\\n\\nВы получите следующую информацию, включая ток и напряжение:\\n\\n```json\\n\\"AppleRawAdapterDetails\\" = ({\\"IsWireless\\"=No,\\"AdapterID\\"=0,\\"FamilyCode\\"=18446744073172697098,\\"Watts\\"=89,**\\"Current\\"=4450**,\\"PMUConfiguration\\"=4448,**\\"Voltage\\"=20000**})\\n"},{"lang":"ru","group":"blog","slug":"blog/convert-markdown-academic-paper-pdf-macos","frontmatter":{"title":"Быстрое преобразование Markdown в PDF в академическом стиле на macOS","meta_title":"Преобразование Markdown в PDF в академическом стиле на macOS с помощью Pandoc","description":"Узнайте, как преобразовать документы Markdown в PDF в академическом стиле на macOS с использованием Pandoc и BasicTeX. Этот быстрый и простой метод идеально подходит для создания профессиональных PDF файлов для академических работ.","date":"2022-03-03T00:00:00.000Z","categories":["Разработка программного обеспечения"],"author":"Тан Шуай","tags":["Pandoc","LaTeX","PDF","Статья","Markdown","macOS"],"draft":false},"content":"\\nВ этом руководстве я покажу вам, как я конвертирую документы Markdown в PDF в академическом стиле на macOS с помощью Pandoc и BasicTeX. Этот метод быстрый и простой, идеально подходит для создания профессионально выглядящих PDF файлов для ваших научных работ.\\n\\n### Шаг 1: Установка Pandoc и BasicTeX\\n\\nСначала вам нужно установить Pandoc и BasicTeX на вашу систему macOS. Вот как я это сделал:\\n\\n1. **Установите Pandoc**: Откройте Терминал и введите следующую команду для установки Pandoc:\\n\\n   ```bash\\n   brew install pandoc\\n   ```\\n\\n2. **Установите BasicTeX**: Поскольку MacTeX довольно большой, я выбрал меньший пакет BasicTeX, чтобы сэкономить место. Выполните эту команду:\\n\\n   ```bash\\n   brew install --cask basictex\\n   ```\\n\\n3. **Установите основные пакеты LaTeX**: Чтобы убедиться, что у вас есть необходимые пакеты для создания PDF, выполните следующие команды:\\n   ```bash\\n   sudo tlmgr update --self\\n   sudo tlmgr install collection-basic collection-latex collection-latexrecommended collection-fontsrecommended\\n   ```\\n\\n### Шаг 2: Подготовьте ваш файл Markdown\\n\\nЗатем создайте ваш файл Markdown (например, `paper.md`). Вот как я настроил свой файл, включая заголовок, автора, дату и контактную информацию:\\n\\n```markdown\\n---\\ntitle: \\"Your Paper Title\\"\\nsubtitle: \\"Optional Subtitle\\"\\ndate: \\\\today\\n\\nauthor: |\\n  | Your Name\\n  | your-email@tanshuai.com\\n  | www.tanshuai.com\\n---\\n\\n# Abstract\\n\\nYour abstract here.\\n\\n# Introduction\\n\\nYour introduction here.\\n\\n# Methodology\\n\\nYour methodology here.\\n\\n# Results\\n\\nYour results here.\\n\\n# Conclusion\\n\\nYour conclusion here.\\n```\\n\\n### Шаг 3: Конвертируйте Markdown в PDF с помощью Pandoc\\n\\nТеперь вы можете конвертировать ваш файл Markdown в PDF. Я использовал следующую команду в Терминале:\\n\\n```bash\\npandoc paper.md -o paper.pdf --pdf-engine=xelatex\\n```\\n\\nЭта команда использует стандартный шаблон LaTeX от Pandoc для конвертации файла Markdown в PDF в академическом стиле, включая контактную информацию автора под его именем.\\n\\n### Дополнительные советы\\n\\n- **Пользовательский шаблон LaTeX**: Если вам нужны более продвинутые форматы или специфические стили, вы можете создать или скачать пользовательский шаблон LaTeX и использовать его с Pandoc:\\n\\n  ```bash\\n  pandoc paper.md -o paper.pdf --pdf-engine=xelatex --template=your-template.tex\\n  ```\\n\\n- **Больше метаданных**: Вы можете добавить дополнительную информацию в заголовок метаданных YAML, такую как аннотацию или ключевые слова, и использовать их в пользовательских шаблонах.\\n\\n### Заключение\\n\\nСледуя этим шагам, вы легко сможете конвертировать документы Markdown в PDF в академическом стиле на macOS. Использование Pandoc и BasicTeX делает этот процесс быстрым и эффективным, идеально подходящим для создания профессиональных PDF документов. Независимо от того, готовите ли вы научные работы, технические отчеты или другие формальные документы, этот метод отлично работает. Включение контактной информации в заголовок метаданных придаёт вашим документам профессиональный вид.\\n\\nНадеюсь, что это руководство окажется для вас полезным! Если у вас возникнут вопросы или проблемы, не стесняйтесь обращаться. Удачи в написании!\\n"},{"lang":"ru","group":"blog","slug":"blog/electron-build-tools-error-error-failed-to-run-choco-install-pywin32-yes","frontmatter":{"title":"Инструменты сборки Electron `ОШИБКА Error： Не удалось выполнить \\\\\\"choco install pywin32 --yes\\\\\\"`","date":"2021-09-08T00:00:00.000Z","draft":false,"author":"Тан Шуай","tags":["Electron","Инструменты сборки","PyWin32","Chocolatey","Win32"],"categories":["Разработка программного обеспечения"]},"content":"\\nПри работе с инструментами сборки Electron вы можете столкнуться с ошибкой, связанной с установкой pywin32 через Chocolatey. Это может быть неприятно, особенно если эта зависимость необходима для вашего проекта. Ниже приводится подробное объяснение проблемы и возможные шаги для ее решения.\\n\\n### Ошибка\\n\\nПри инициализации проекта Electron с использованием инструментов сборки Electron вы можете увидеть следующее сообщение об ошибке:\\n\\n```bash\\nE:\\\\\\\\>e init main-testing -i testing --root=e:/src/electron\\nWARN A fixable error has occurred\\n--> A required dependency \\"pywin32\\" could not be located, it probably has to be installed.\\nDo you want build-tools to try fix this for you? [y/n]: y\\n\\nRunning \\"choco install pywin32 --yes\\"\\nERROR Error: Failed to run \\"choco install pywin32 --yes\\"\\n    at spawnSyncWithLog (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:11:11)\\n    at fix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:39:9)\\n    at maybeAutoFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\maybe-auto-fix.js:13:3)\\n    at whichAndFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\which.js:10:5)\\n    at checkPlatformDependencies (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:61:7)\\n    at Object.<anonymous> (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\e-init.js:165:3)\\n    at Module._compile (internal/modules/cjs/loader.js:1072:14)\\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1101:10)\\n    at Module.load (internal/modules/cjs/loader.js:937:32)\\n    at Function.Module._load (internal/modules/cjs/loader.js:778:12)\\n```\\n\\nЭта ошибка обычно возникает из-за того, что скрипт установки пакета pywin32 не может найти необходимые файлы на удаленном сервере. Это приводит к ошибке 404, указывающей на то, что файл недоступен по указанному URL.\\n\\n### Понимание ошибки\\n\\nКлючевая часть сообщения об ошибке:\\n\\n```bash\\nERROR: The remote file either doesn\'t exist, is unauthorized, or is forbidden for url \'http://sourceforge.net/projects/pywin32/files/pywin32/Build%20219/pywin32-219.win-amd64-py3.9.exe/download\'. Exception calling \\"GetResponse\\" with \\"0\\" argument(s): \\"The remote server returned an error: (404) Not Found.\\"\\n\\nЭто указывает на то, что URL-адрес для загрузки pywin32 больше не действителен, что означает, что Chocolatey не может получить необходимые файлы для установки.\\n\\n### Шаги по устранению неполадок\\n\\nВот несколько шагов, которые вы можете предпринять для решения этой проблемы:\\n\\n#### 1. Проверьте установку Chocolatey\\n\\nУбедитесь, что Chocolatey установлен правильно и обновлен до последней версии. Вы можете проверить версию Chocolatey с помощью команды:\\n\\n```bash\\nchoco --version\\n```\\n\\nДля обновления Chocolatey используйте команду:\\n\\n```bash\\nchoco upgrade chocolatey\\n```\\n\\n#### 2. Установите pywin32 вручную\\n\\nПоскольку автоматическая установка не удается, попробуйте установить pywin32 вручную. Вы можете скачать соответствующую версию с официальной [страницы релизов pywin32 на GitHub](https://github.com/mhammond/pywin32/releases) и установить ее вручную.\\n\\n#### 3. Измените скрипт установки\\n\\nЕсли у вас есть контроль над скриптом Electron Build Tools, вы можете изменить его, чтобы он указывал на действительный URL для pywin32 или обрабатывал процесс ручной установки.\\n\\n#### 4. Используйте альтернативный менеджер пакетов\\n\\nЕсли Chocolatey продолжает выдавать ошибки, рассмотрите возможность использования альтернативного менеджера пакетов, такого как pip для пакетов Python:\\n\\n```bash\\npip install pywin32\\n```\\n\\n### Пример ручной установки pywin32\\n\\n1. Скачайте подходящий установщик pywin32 с [официальной страницы релизов на GitHub](https://github.com/mhammond/pywin32/releases).\\n2. Запустите установщик и следуйте инструкциям по установке.\\n3. Проверьте установку, запустив простой скрипт на Python, который импортирует pywin32:\\n\\n```python\\nimport win32api\\nprint(win32api.GetVersionEx())\\n```\\n\\nВозникновение ошибки \\"Failed to run `choco install pywin32 --yes`\\" может стать препятствием в процессе разработки. Однако, поняв основную причину и следуя приведенным выше шагам, вы сможете преодолеть эту проблему и продолжить настройку вашего проекта Electron.\\n"},{"lang":"ru","group":"blog","slug":"blog/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining","frontmatter":{"title":"Секреты Полного Пользовательского Проектирования ASIC для Биткойн- и Криптовалютного Майнинга","date":"2022-05-30T00:00:00.000Z","categories":["Полупроводники","Биткойн","Криптовалюта","Блокчейн"],"author":"Тан Шуай","tags":["ASIC","Биткойн","Майнинг","BTC"],"draft":false,"contact":"Тан Шуай | tanshuai@btc.com | tanshuai.com"},"content":"\\nТан Шуай  \\n[tanshuai@btc.com](mailto:tanshuai@btc.com)  \\n[tanshuai.com](https://tanshuai.com)\\n\\n---\\n\\n## Аннотация\\n\\nВ конкурентном мире криптовалютного майнинга первостепенное значение имеют энергоэффективность, производительность хэшрейта и надежность. В этой статье рассматривается первоклассный полный заказной дизайн ASIC (специализированной интегральной схемы), раскрывающий отраслевые секреты и экспертные методики, которые обеспечивают высокую производительность майнинга биткойнов и криптовалют. Написанная техническим экспертом одной из ведущих компаний по производству ASIC-майнеров, эта статья использует передовые методы проектирования, тщательную физическую компоновку и всесторонние процессы проверки, чтобы продемонстрировать исключительные возможности полноценных заказных ASIC в максимизации эффективности и прибыльности майнинга.\\n\\n## Введение\\n\\nЭволюция криптовалютного майнинга, особенно майнинга биткойнов, привела к переходу от использования универсальных ЦПУ, ПЛИС и графических процессоров к специализированным ASIC. Эти ASIC обеспечивают непревзойденную производительность и энергоэффективность. Полный заказной дизайн ASIC представляет собой вершину этой эволюции, позволяя создавать индивидуальные решения, которые отвечают специфическим требованиям майнинговых операций.\\n\\nБольшая часть существующей литературы по проектированию ASIC для криптовалютного майнинга исходит из академических кругов или не-майнинговых предприятий, что часто лишает её практической применимости. На сегодняшний день лишь несколько компаний, главным образом китайских (например, MicroBT, Bitmain), успешно разработали коммерческие ASIC для майнинга биткойнов. Эта статья стремится заполнить этот пробел, предоставляя информацию, основанную на реальной практике отрасли, предлагая перспективу, основанную на реалиях майнингового сектора.\\n\\nКак профессионал с более чем десятью годами опыта в технической индустрии, автор этой статьи разработал лучший в мире биткойн ASIC-майнер (WhatsMiner), а также майнеры для LTC/DOGE и ETH, и сыграл ключевую роль в таких компаниях, как MicroBT, BTC.COM и других публичных фаблессах. Он занимал ключевые должности в компаниях, котирующихся на NASDAQ, HKSE и NYSE. Имея обширный опыт установления партнерских отношений с TSMC, Texas Instruments, ARM и Intel, он приносит богатые знания и практический опыт в область разработки заказных ASIC для майнинга биткойнов и криптовалют.\\n\\n## Методология и проектный поток\\n\\n### Проектная философия\\n\\nНаш подход к полному кастомному проектированию ASIC основан на максимизации PPA (энергопотребление, производительность и площадь), особенно при низковольтных условиях эксплуатации. В этом разделе описана наша проектная философия и методология:\\n\\n1. **Конвейерная архитектура**: Использование преимуществ конвейерных структур для майнинговых алгоритмов, характеризующихся регистрами и этапами комбинационной логики. Применение конвейерной архитектуры позволяет эффективно обрабатывать высокочастотные операции, необходимые для майнинга криптовалют.\\n2. **Ручная разработка нетлиста и размещение**: Подробное написание скриптов для создания нетлиста и ручное размещение ячеек для оптимизации критических путей. Это позволяет точно контролировать временные характеристики и снижать паразитные эффекты.\\n3. **Кастомные библиотеки ячеек**: Разработка специализированных ячеек с оптимизированным количеством транзисторов и функциями экономии динамической мощности. Кастомные ячейки разрабатываются для работы при минимально возможных напряжениях, обеспечивая минимальное энергопотребление.\\n\\n### Достижение преимуществ PPA\\n\\nПодробные стратегии достижения преимуществ PPA через кастомное проектирование:\\n\\n1. **Разработка кастомных регистров**: Использование многоразрядных регистров и схем на основе защелок для снижения энергопотребления часов и улучшения заимствования времени. Многоразрядные регистры минимизируют энергопотребление дерева часов и уменьшают общую площадь.\\n2. **Ручное размещение**: Сокращение длины проводов и балансировка времен установления и удержания для повышения общей производительности. Ручное размещение позволяет лучше контролировать задержки межсоединений и перекрестные помехи, улучшая целостность сигнала и снижая энергопотребление.\\n3. **Оптимизированное проектирование ячеек**: Кастомные ячейки разрабатываются для работы при более низких напряжениях, минимизируя динамическое энергопотребление и максимизируя эффективность. Подстраивая проектирование ячеек под конкретные потребности майнинговых алгоритмов, мы можем добиться значительных улучшений производительности.\\n\\n### Надежность при низких напряжениях\\n\\nОбеспечение надежности кастомной проектной логики при низких напряжениях включает:\\n\\n1. **Точные симуляции**: Симуляции на уровне схем для валидации поведения кастомных ячеек в конкретных условиях. Инструменты, такие как SPICE, используются для детализированных электрических симуляций, чтобы обеспечить корректную работу ячеек при всех углах ПВТ (Процесс, Напряжение, Температура).\\n2. **Согласованность размещения**: Ручное размещение для обеспечения однородности и уменьшения вариабельности. Контролируя физическую компоновку, мы можем минимизировать влияние процессных вариаций и обеспечить стабильную производительность.\\n3. **Точная калибровка ПВТ**: Верификация с учетом вариаций процесса, напряжения и температуры. Проводятся обширные тестирования и калибровка, чтобы гарантировать\\n\\n## Исследования и результаты\\n\\nПредставляем данные и исследования реальных случаев, полученные при полном масочном проектировании:\\n\\n| Проект | Технологический процесс | Напряжение/Энергоэффективность | Алгоритм |\\n| ------ | ---------------------- | ----------------------------- | -------- |\\n| SC     | TSMC 28nm              | 0.45V, 257J/T                 | Blake2b  |\\n| DCR    | TSMC 28nm              | 0.45V, 150J/T                 | Blake256 |\\n| DASH   | TSMC 16nm              | 0.38V, 6.2J/G                 | X11      |\\n| BTC    | TSMC 16nm              | 0.38V, 65J/T                  | SHA-256d |\\n| BTC    | TSMC 7nm               | 0.30V, 37J/T                  | SHA-256d |\\n| BTC    | Samsung 8nm            | 0.31V, 45J/T                  | SHA-256d |\\n| BTC    | SMIC N+1               | 0.30V, 35J/T                  | SHA-256d |\\n\\nЭти результаты демонстрируют значительные улучшения в эффективности и производительности, достижимые благодаря нашему индивидуальному подходу к проектированию.\\n\\n## Интеграция и проверка\\n\\n### Подтверждение смешанных ячеек\\n\\n- **Интеграция индивидуальных ячеек**: Индивидуальные ячейки интегрируются со стандартными ячейками от TSMC и других производителей, обеспечивая совместимость и производительность. Индивидуальные ячейки характеризуются и проверяются на соответствие требованиям стандартной библиотеки ячеек, что позволяет их бесшовную интеграцию.\\n- **Стратегии подтверждения**: Стратегии, обеспечивающие бесшовную совместимость и производительность, включают детализированные проверки DRC (Design Rule Check) и LVS (Layout Versus Schematic), а также анализ времени и мощности с использованием отраслевых инструментов EDA (Electronic Design Automation).\\n\\n### Цифровое и аналоговое совместное проектирование\\n\\n- **Техники интеграции**: Интеграция цифровых и аналоговых компонентов для оптимизации общей производительности чипа. Для обеспечения правильной интеграции и функциональности используются такие техники, как смешанная верификация сигналов и совместное моделирование.\\n- **Методологии проверки**: Методологии для обеспечения надежности в различных эксплуатационных условиях включают угловой анализ, имитации Монте-Карло и проверку надежности для решения проблем старения и электромиграции.\\n\\n## Заключение\\n\\nПолный индивидуальный дизайн ASIC предлагает значительные преимущества для майнинга Bitcoin и криптовалют, обеспечивая непревзойденную производительность, энергоэффективность и надежность. Раскрывая секреты высококлассного индивидуального дизайна ASIC, эта статья подчеркивает методологии и инновации, которые отличают лидеров отрасли. По мере развития майнинга криптовалют, индивидуальные ASIC будут играть ключевую роль в продвижении следующего поколения высокоэффективного и высокопроизводительного майнингового оборудования.\\n\\n[PDF версия статьи](/docs/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining.pdf)\\n"},{"lang":"ru","group":"blog","slug":"blog/get-current-commit-id-of-git-and-update-to-package-json","frontmatter":{"title":"Получить текущий идентификатор коммита Git и обновить его в package.json","date":"2021-08-21T09:19:58.875Z","draft":false,"author":"Тан Шуай","tags":["Git","Package.json","Node.js"],"categories":["Разработка программного обеспечения"]},"content":"\\nПри разработке проекта на Node.js может понадобиться отслеживать текущий идентификатор коммита в вашем репозитории Git. Эта информация может быть полезной для отладки, версионирования или развертывания. Один из способов добиться этого — обновить файл `package.json` с текущим идентификатором коммита во время процесса сборки. Эта статья проведет вас через шаги получения текущего идентификатора коммита Git и обновления его в файле `package.json` с использованием Node.js.\\n\\n```bash\\n\\"predev\\": \\"node ./node_modules/json/lib/json.js -I -f package.json -e \\\\\\\\\\\\\\"this.commit=\'$(git rev-parse --short HEAD)\'\\\\\\\\\\\\\\"\\\\\\",\\n"},{"lang":"ru","group":"blog","slug":"blog/migrate-a-github-lfs-git-large-file-storage-repository-to-aws-codecommit","frontmatter":{"title":"Миграция репозитория GitHub LFS (Git Large File Storage) в AWS CodeCommit","date":"2022-02-09T09:36:57.481Z","draft":false,"author":"Тань Шуай","tags":["AWS","Git","GitHub","LFS"],"categories":["Разработка программного обеспечения"]},"content":"\\nНедавно я перенёс один из своих репозиториев на GitHub, который использует Git Large File Storage (LFS), на AWS CodeCommit. Решил поделиться процессом с вами, если вы планируете сделать что-то подобное. Вот пошаговое руководство, основанное на моем опыте.\\n\\n## Требования\\n\\nПрежде чем мы начнем, убедитесь, что у вас установлены следующие инструменты:\\n\\n- Git\\n- Git LFS\\n- AWS CLI\\n\\n## Пошаговое руководство\\n\\n### 1. Клонирование репозитория\\n\\nСначала клонируйте ваш репозиторий на GitHub с использованием опции `--mirror`. Это создаст зеркальную копию репозитория, включая все ветки и теги.\\n\\n```zsh\\ngit clone --mirror https://github.com/tanshuai/designs.git designs\\n```\\n\\n### 2. Проверка файлов LFS\\n\\nДалее, перечислите все файлы, управляемые Git LFS, чтобы убедиться, что всё на месте.\\n\\n```zsh\\ngit lfs ls-files\\n```\\n\\nВы должны увидеть что-то вроде этого:\\n\\n```\\ncadfa0bc9e * Brochure-Trifold-Draft.ai\\naf9b8b8a1c * Brochure-Trifold-English.ai\\n27bb5f4e61 * Brochure-Trifold.ai\\n```\\n\\n### 3. Миграция файлов LFS\\n\\nТеперь экспортируйте файлы LFS. Этот шаг гарантирует, что они являются частью истории вашего репозитория.\\n\\n```zsh\\ngit lfs migrate export --include=\\"*.ai\\" --everything\\n```\\n\\nВы увидите сообщения о прогрессе, такие как эти:\\n\\n```\\nmigrate: Sorting commits: ..., done.\\nmigrate: Rewriting commits: 100% (20/20), done.\\nmaster\\t98a3c48d85... -> 82f8873b41...\\nmigrate: Updating refs: ..., done.\\nmigrate: checkout: ..., done.\\nprune: 3 local object(s), 0 retained, done.\\ncadfa0bc9e... (133 MB)\\n27bb5f4e61... (131 MB)\\naf9b8b8a1c... (130 MB), done.\\nprune: Deleting objects: 100% (3/3), done.\\n```\\n\\n### 4. Очистка LFS\\n\\nУдалите информацию о трекинге Git LFS и деинсталлируйте Git LFS.\\n\\n```zsh\\ngit lfs ls-files\\ngit rm .gitattributes -f\\ngit lfs uninstall\\n```\\n\\n### 5. Публикация на AWS CodeCommit\\n\\nНаконец, отправьте ваш репозиторий на AWS CodeCommit.\\n\\n```zsh\\ngit push https://git-codecommit.us-east-2.amazonaws.com/v1/repos/designs --all\\n```\\n\\nВот и всё! Следуя этим шагам, я успешно перенёс свой репозиторий GitHub LFS на AWS CodeCommit. Большие файлы и история репозитория были сохранены идеально.\\n\\n## Завершение\\n\\nМиграция репозитория GitHub, который использует Git LFS, на AWS CodeCommit довольно проста, если следовать правильным шагам. Если у вас есть вопросы или возникнут проблемы, [документация AWS CodeCommit](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) и [документация Git LFS](https://git-lfs.github.com/) являются отличными ресурсами.\\n\\nНадеюсь, этот гид будет вам полезен. Удачного программирования!\\n"},{"lang":"ru","group":"blog","slug":"blog/reset-restore-all-subdirectories-of-git","frontmatter":{"title":"Сброс/Восстановление всех подкаталогов Git","date":"2021-09-22T08:33:49.201Z","draft":false,"author":"Тан Шуай","tags":["Git","Контроль версий"],"categories":["Разработка программного обеспечения"]},"content":"\\nЭффективное управление репозиторием Git часто требует сброса или восстановления подкаталогов для поддержания чистого и функционального кода. Это руководство предоставляет краткий, пошаговый подход к сбросу или восстановлению всех подкаталогов в репозитории Git.\\n\\n## Сброс подкаталогов\\n\\nСледующая команда Git удаляет все неотслеживаемые файлы и каталоги из репозитория. Это полезно для очистки ненужных файлов перед выполнением сброса или восстановления.\\n\\n```bash\\ngit clean -xfdf -- .\\n```\\n\\n### Разбор команды:\\n\\n- `-x`: Удалить все неотслеживаемые файлы, включая игнорируемые `.gitignore`.\\n- `-f`: Принудительное удаление файлов.\\n- `-d`: Удалить неотслеживаемые каталоги.\\n- `-- .`: Применить команду к текущему каталогу и всем подкаталогам.\\n\\n## Восстановление подкаталогов\\n\\nЧтобы восстановить все файлы в репозитории до их последнего зафиксированного состояния, используйте следующую команду:\\n\\n```bash\\ngit checkout {HEAD OR BRANCH} -- .\\n```\\n\\n### Разбор команды:\\n\\n- `{HEAD OR BRANCH}`: Замените на `HEAD` для сброса к последнему коммиту или укажите имя ветки для сброса к конкретной ветке.\\n- `-- .`: Применить команду к текущему каталогу и всем подкаталогам.\\n\\nИспользуя эти команды, вы можете убедиться, что ваш репозиторий свободен от нежелательных файлов, а все файлы восстановлены до их зафиксированных состояний. Этот процесс помогает поддерживать чистоту и организованность кода, что облегчает совместную работу и разработку.\\n\\nНе стесняйтесь настраивать это руководство в соответствии с вашими конкретными потребностями и предпочтениями. Для более продвинутых операций с Git обратитесь к [официальной документации Git](https://git-scm.com/doc).\\n"},{"lang":"ru","group":"blog","slug":"blog/ultra-low-cost-ddr3-ddr4-lpddr3-lpddr4-memory-test-system","frontmatter":{"title":"Система тестирования памяти DDR3, DDR4, LP-DDR3 и LP-DDR4 по сверхнизкой цене","description":"Откройте для себя сверхнизкую стоимость системы тестирования памяти для технологий DDR3, DDR4, LP-DDR3 и LP-DDR4. По цене около 200 000 долларов США она предлагает высокоскоростное тестирование, универсальность, продвинутые функции и низкое энергопотребление. Идеально подходит для бизнеса, ищущего экономичные и надежные решения для тестирования памяти.","date":"2024-06-01T00:00:00.000Z","categories":["Полупроводники"],"author":"Тан Шуай","tags":["DDR3","DDR4","LP-DDR3","LP-DDR4","Система тестирования памяти"],"draft":false},"content":"\\nЕсли вы, как и я, всегда ищете экономичные решения, не уступающие в качестве, вам понравится то, чем я хочу поделиться сегодня. В нашем стремительно развивающемся мире технологий важно, чтобы память наших устройств была на должном уровне. Высококлассные варианты, такие как T5503/T5503HS2, великолепны, но они имеют высокую цену. К счастью, Zeeis представила ультраэкономичную систему тестирования памяти, которая не жертвует производительностью.\\n\\n## Почему это важно\\n\\nКогда я впервые узнал о системе тестирования памяти от Zeeis, я был заинтригован. Эта система предназначена для работы с технологиями памяти DDR3, DDR4, LP-DDR3 и LP-DDR4. Будь то старые системы или новейшие технологии, эта система справится с любой задачей.\\n\\n### Высокоскоростное тестирование\\n\\nОдной из выдающихся характеристик является её способность поддерживать скорость передачи данных в диапазоне от 800 до 3200 MT/s как для DDR3, так и для DDR4. Она может оценивать модули памяти на частотах до 1600 МГц. Это означает тщательное и надёжное тестирование, обеспечивающее максимальную производительность ваших устройств.\\n\\n### Универсальность\\n\\nУниверсальность этой системы меняет правила игры. Она поддерживает множество стандартов памяти, что делает её подходящей для широкого спектра применений — от бытовой электроники до высокопроизводительных вычислений. Более того, она защищена от устаревания. По мере появления новых технологий памяти, эту систему можно легко модернизировать для их поддержки.\\n\\n### Экономическая эффективность\\n\\nТеперь поговорим о цене. Примерно за 200 000 долларов США эта система предлагает отличную отдачу от инвестиций. Она достаточно доступна для малых и средних предприятий, обеспечивая высококлассные возможности тестирования без значительных затрат.\\n\\n### Продвинутые функции\\n\\nСистема оснащена передовыми алгоритмами тестирования, включая интегрированный генератор алгоритмических шаблонов (ALPG). Это обеспечивает точную и надёжную оценку памяти, чтобы каждый модуль соответствовал строгим стандартам производительности.\\n\\n### Низкое энергопотребление\\n\\nЧто также впечатляет, так это низкое энергопотребление системы. Это соответствует тенденциям, наблюдаемым в технологиях памяти LP-DDR3 и LP-DDR4. Работая при низких напряжениях, она не только снижает затраты на энергию, но и минимизирует тепловыделение, что делает её экологичным выбором.\\n\\n## Почему выбрать Zeeis?\\n\\n### Масштабируемость\\n\\nСистема Zeeis разработана с учетом масштабируемости. По мере появления новых технологий памяти, систему можно легко модернизировать, что обеспечивает долгосрочную пригодность и снижает необходимость в частых заменах.\\n\\n### Поддержка и документация\\n\\nЕще один большой плюс – это обширная поддержка и документация от Zeeis. Независимо от того, являетесь ли вы опытным профессионалом или новичком в тестировании памяти, их подробные руководства и оперативная служба поддержки обеспечивают плавный опыт.\\n\\n### Соответствие рыночным требованиям\\n\\nС учетом растущего спроса на высокоскоростную память везде, от смартфонов до дата-центров, наличие надежного и экономически эффективного решения для тестирования памяти является необходимостью. Система Zeeis отвечает этим требованиям, гарантируя, что ваши продукты будут готовы к рынку и безупречно функционировать в реальных условиях.\\n\\n## Заключение\\n\\nВ двух словах, Ultra Low Cost DDR3, DDR4, LP-DDR3 и LP-DDR4 Memory Test System от Zeeis – это отличный выбор для тех, кому нужны надежные, универсальные и доступные решения для тестирования памяти. Она предлагает высокую производительность по цене, значительно ниже стоимости других высококлассных систем, что позволяет компаниям поддерживать высокие стандарты без больших затрат.\\n\\nЕсли вы заинтересованы в повышении ваших возможностей тестирования с системой, разработанной для будущих технологий памяти, пожалуйста, свяжитесь со мной для получения дополнительной информации по адресу [i@tanshuai.com](mailto:i@tanshuai.com).\\n\\nУдачного тестирования!\\n"},{"lang":"ru","group":"blog","slug":"blog/usr-bin-sudo-must-be-owned-by-uid-0-and-have-the-setuid-bit-set-on-ubuntu-20-04","frontmatter":{"title":"/usr/bin/sudo должен принадлежать uid 0 и иметь установленный бит setuid в Ubuntu 20.04","date":"2021-10-08T13:07:25.406Z","draft":false,"author":"Тан Шуай","tags":["Ubuntu","Linux","Sudo"],"categories":["Linux"]},"content":"\\nЕсли вы сталкиваетесь с сообщением об ошибке \xab/usr/bin/sudo должен принадлежать uid 0 и иметь установлен бит setuid\xbb на Ubuntu 20.04, выполните следующие шаги для устранения проблемы.\\n\\n1. Во время процесса загрузки нажмите клавишу \'ESC\', чтобы получить доступ к меню GRUB.\\n\\n![Экран GRUB](/images/content/wx20211008-210752.png \\"Экран GRUB\\")\\n\\n2. Выберите первый вариант, \xabUbuntu\xbb, и нажмите клавишу \'e\' для редактирования параметров загрузки.\\n\\n![Редактирование параметров загрузки](/images/content/wx20211008-210841.png \\"Редактирование параметров загрузки\\")\\n\\n3. Добавьте следующую строку к строке, начинающейся с \'linux\', чтобы загрузиться в режиме восстановления:\\n\\n```bash\\nsystemd.unit=rescue.target\\n```\\n\\n4. После входа в режим восстановления выполните следующую команду для восстановления правильных разрешений и владельца для `/usr/bin/sudo`:\\n\\n```bash\\npkexec chmod a=rx,u+ws /usr/bin/sudo\\n```\\n\\nЭта команда устанавливает необходимые разрешения и гарантирует, что `sudo` принадлежит пользователю root с установленным битом setuid.\\n\\nСледуя этим шагам, вы сможете устранить проблему и восстановить правильную работу команды `sudo` на вашей системе Ubuntu.\\n"},{"lang":"es","group":"blog","slug":"blog/aws-codecommit-the-githubs-large-file-storage-git-lfs-free-alternative","frontmatter":{"title":"AWS CodeCommit： La alternativa gratuita a GitHub Large File Storage (Git LFS)","description":"Descubre c\xf3mo AWS CodeCommit funciona como una alternativa rentable y eficiente al almacenamiento de archivos grandes de GitHub (Git LFS). Este art\xedculo cubre las limitaciones de Git LFS, los beneficios de usar AWS CodeCommit para el almacenamiento de archivos grandes, y proporciona una gu\xeda paso a paso para migrar de Git LFS a CodeCommit. Mejora tu flujo de trabajo de desarrollo con la infraestructura escalable y segura de AWS.","date":"2022-02-09T00:00:00.000Z","author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["Desarrollo de Software"],"draft":false},"content":"\\nAWS CodeCommit ofrece una alternativa robusta al servicio de almacenamiento de archivos grandes de GitHub (Git LFS), proporcionando una soluci\xf3n eficiente para gestionar archivos grandes en tus repositorios Git.\\n\\n## Por Qu\xe9 Deber\xedas Reconsiderar el Uso de Git LFS\\n\\nAunque Git LFS es una opci\xf3n popular para manejar archivos grandes en repositorios Git, tiene sus limitaciones y desaf\xedos. Git LFS requiere una configuraci\xf3n y gesti\xf3n adicionales, lo que puede complicar el flujo de trabajo de desarrollo. Adem\xe1s, los costos de almacenamiento y ancho de banda asociados con Git LFS pueden aumentar r\xe1pidamente, especialmente en proyectos con numerosos archivos grandes o una colaboraci\xf3n extensa.\\n\\n## Por Qu\xe9 el Servicio de Almacenamiento de Archivos Grandes de GitHub No es Perfecto\\n\\nEl servicio de almacenamiento de archivos grandes de GitHub, aunque \xfatil, tiene inconvenientes inherentes. La preocupaci\xf3n principal es el costo asociado con el almacenamiento y el ancho de banda, que puede volverse prohibitivo para proyectos m\xe1s grandes. Adem\xe1s, gestionar Git LFS puede ser engorroso, requiriendo que los desarrolladores instalen y configuren el cliente LFS, rastreen archivos espec\xedficos y lidien con posibles conflictos de fusi\xf3n que surgen debido al manejo de archivos grandes por separado del resto del repositorio.\\n\\n## Por Qu\xe9 Usar AWS CodeCommit para Almacenar Archivos Grandes en Git\\n\\nAWS CodeCommit proporciona una alternativa convincente para almacenar archivos grandes en repositorios Git sin la necesidad de Git LFS. CodeCommit es un servicio de control de versiones totalmente gestionado que se integra perfectamente con otros servicios de AWS, ofreciendo una escalabilidad, seguridad y eficiencia en costos robustas. Al aprovechar CodeCommit, los desarrolladores pueden evitar la sobrecarga adicional de gestionar Git LFS mientras se benefician de la infraestructura robusta de AWS y su modelo de precios basado en el consumo.\\n\\n## Cu\xe1les Son las Limitaciones de AWS CodeCommit Comparado con GitHub\\n\\nA pesar de sus ventajas, AWS CodeCommit tiene algunas limitaciones en comparaci\xf3n con GitHub. El extenso soporte de la comunidad de GitHub, su rico ecosistema de integraciones y funciones avanzadas como GitHub Actions y GitHub Pages pueden no estar completamente replicadas en CodeCommit. Adem\xe1s, los desarrolladores acostumbrados a la interfaz de usuario y las herramientas de colaboraci\xf3n de GitHub pueden encontrar que la transici\xf3n a CodeCommit requiere cierta adaptaci\xf3n.\\n\\n## C\xf3mo Migrar un Repositorio Git LFS a CodeCommit\\n\\nMigrar un repositorio Git LFS a CodeCommit implica varios pasos. Primero, aseg\xfarate de que todos los archivos grandes est\xe9n correctamente rastreados en tu repositorio Git LFS. Luego, clona el repositorio y elimina la configuraci\xf3n de rastreo de Git LFS. Despu\xe9s de eso, crea un nuevo repositorio en AWS CodeCommit y sube tu repositorio local a \xe9l. Hay documentaci\xf3n detallada y scripts disponibles para agilizar este proceso, asegurando una transici\xf3n sin p\xe9rdida de datos ni interrupciones.\\n\\n## Una Mejor Soluci\xf3n\\n\\nPara equipos y proyectos que dependen en gran medida de Git LFS, explorar AWS CodeCommit como una alternativa puede ofrecer beneficios significativos. La integraci\xf3n perfecta de CodeCommit con el ecosistema de AWS, junto con su naturaleza rentable y escalable, lo convierte en una opci\xf3n atractiva para gestionar archivos grandes en repositorios Git. Al mitigar los desaf\xedos asociados con Git LFS, CodeCommit permite a los equipos de desarrollo enfocarse en la codificaci\xf3n y la colaboraci\xf3n, impulsando la productividad y la innovaci\xf3n.\\n\\nEn conclusi\xf3n, AWS CodeCommit proporciona una alternativa viable, rentable y eficiente al servicio de Almacenamiento de Archivos Grandes de GitHub. Al aprovechar la robusta infraestructura de AWS, los desarrolladores pueden gestionar archivos grandes en repositorios Git con facilidad, optimizando sus flujos de trabajo y reduciendo los costos.\\n"},{"lang":"es","group":"blog","slug":"blog/check-voltage-current-on-macos-for-power-adapter","frontmatter":{"title":"Verificar Voltaje y Corriente en MacOS para Adaptador de Corriente","meta_title":"Verificar Voltaje y Corriente en MacOS para Adaptador de Corriente","date":"2022-02-14T00:00:00.000Z","author":"Tan Shuai","tags":["MacOS","Adaptador de Corriente","Voltaje","Corriente"],"categories":["MacOS"],"draft":false},"content":"\\nCuando uses un MacBook, es posible que desees verificar el voltaje y la corriente del adaptador de corriente. Aqu\xed tienes una forma sencilla de comprobar el voltaje y la corriente del adaptador de corriente en macOS.\\n\\nAbre Terminal.app y escribe el comando:\\n\\n`ioreg -l -n AppleSmartBattery -r |grep AppleRawAdapterDetails`\\n\\nObtendr\xe1s la siguiente informaci\xf3n que incluye la corriente y el voltaje:\\n\\n```json\\n\\"AppleRawAdapterDetails\\" = ({\\"IsWireless\\"=No,\\"AdapterID\\"=0,\\"FamilyCode\\"=18446744073172697098,\\"Watts\\"=89,**\\"Current\\"=4450**,\\"PMUConfiguration\\"=4448,**\\"Voltage\\"=20000**})\\n"},{"lang":"es","group":"blog","slug":"blog/convert-markdown-academic-paper-pdf-macos","frontmatter":{"title":"Convierta R\xe1pidamente Markdown a PDF de Estilo Acad\xe9mico en macOS","meta_title":"Convertir Markdown a PDF de Estilo Acad\xe9mico en macOS con Pandoc","description":"Aprenda a convertir documentos Markdown a PDFs de estilo acad\xe9mico en macOS utilizando Pandoc y BasicTeX. Este m\xe9todo r\xe1pido y sencillo es perfecto para crear archivos PDF profesionales para trabajos acad\xe9micos.","date":"2022-03-03T00:00:00.000Z","categories":["Desarrollo de Software"],"author":"Tan Shuai","tags":["Pandoc","LaTeX","PDF","Trabajo","Markdown","macOS"],"draft":false},"content":"\\nEn esta gu\xeda, te mostrar\xe9 c\xf3mo convierto documentos Markdown en archivos PDF con estilo acad\xe9mico en macOS utilizando Pandoc y BasicTeX. Este m\xe9todo es r\xe1pido y sencillo, perfecto para cuando necesitas crear archivos PDF de aspecto profesional para tus trabajos acad\xe9micos.\\n\\n### Paso 1: Instalar Pandoc y BasicTeX\\n\\nPrimero, necesitar\xe1s instalar Pandoc y BasicTeX en tu sistema macOS. As\xed es como lo hice:\\n\\n1. **Instalar Pandoc**: Abre Terminal y escribe el siguiente comando para instalar Pandoc:\\n\\n   ```bash\\n   brew install pandoc\\n   ```\\n\\n2. **Instalar BasicTeX**: Dado que MacTeX es bastante grande, opt\xe9 por el paquete m\xe1s peque\xf1o BasicTeX para ahorrar espacio. Ejecuta este comando:\\n\\n   ```bash\\n   brew install --cask basictex\\n   ```\\n\\n3. **Instalar Paquetes Comunes de LaTeX**: Para asegurarte de tener los paquetes necesarios para generar PDFs, ejecuta estos comandos:\\n   ```bash\\n   sudo tlmgr update --self\\n   sudo tlmgr install collection-basic collection-latex collection-latexrecommended collection-fontsrecommended\\n   ```\\n\\n### Paso 2: Prepara tu Archivo Markdown\\n\\nA continuaci\xf3n, crea tu archivo Markdown (por ejemplo, `paper.md`). As\xed es como configur\xe9 mi archivo, incluyendo el t\xedtulo, autor, fecha e informaci\xf3n de contacto:\\n\\n```markdown\\n---\\ntitle: \\"Your Paper Title\\"\\nsubtitle: \\"Optional Subtitle\\"\\ndate: \\\\today\\n\\nauthor: |\\n  | Your Name\\n  | your-email@tanshuai.com\\n  | www.tanshuai.com\\n---\\n\\n# Abstract\\n\\nYour abstract here.\\n\\n# Introduction\\n\\nYour introduction here.\\n\\n# Methodology\\n\\nYour methodology here.\\n\\n# Results\\n\\nYour results here.\\n\\n# Conclusion\\n\\nYour conclusion here.\\n```\\n\\n### Paso 3: Convierte Markdown a PDF con Pandoc\\n\\nAhora, puedes convertir tu archivo Markdown a PDF. Utilic\xe9 el siguiente comando en Terminal:\\n\\n```bash\\npandoc paper.md -o paper.pdf --pdf-engine=xelatex\\n```\\n\\nEste comando utiliza la plantilla LaTeX predeterminada de Pandoc para convertir el archivo Markdown en un PDF con estilo acad\xe9mico, incluyendo la informaci\xf3n de contacto del autor debajo de su nombre.\\n\\n### Consejos Adicionales\\n\\n- **Plantilla LaTeX Personalizada**: Si necesitas un formato m\xe1s avanzado o estilos espec\xedficos, puedes crear o descargar una plantilla LaTeX personalizada y usarla con Pandoc:\\n\\n  ```bash\\n  pandoc paper.md -o paper.pdf --pdf-engine=xelatex --template=your-template.tex\\n  ```\\n\\n- **M\xe1s Metadatos**: Puedes a\xf1adir informaci\xf3n extra en el encabezado de metadatos YAML, como un resumen o palabras clave, y usar estos en plantillas personalizadas.\\n\\n### Conclusi\xf3n\\n\\nSiguiendo estos pasos, puedes convertir f\xe1cilmente documentos Markdown en archivos PDF con estilo acad\xe9mico en macOS. Usar Pandoc y BasicTeX hace que este proceso sea r\xe1pido y eficiente, perfecto para cuando necesitas generar documentos PDF profesionales. Ya sea que est\xe9s preparando trabajos acad\xe9micos, informes t\xe9cnicos u otros documentos formales, este m\xe9todo funciona de maravilla. Incluir informaci\xf3n de contacto en el encabezado de metadatos a\xf1ade un toque profesional a tus documentos.\\n\\n\xa1Espero que encuentres \xfatil esta gu\xeda! Si tienes alguna pregunta o encuentras alg\xfan problema, no dudes en ponerte en contacto. \xa1Feliz escritura!\\n"},{"lang":"es","group":"blog","slug":"blog/electron-build-tools-error-error-failed-to-run-choco-install-pywin32-yes","frontmatter":{"title":"Herramientas de Construcci\xf3n de Electron `ERROR Error： Failed to run \\\\\\"choco install pywin32\\\\n  --yes\\\\\\"`","date":"2021-09-08T00:00:00.000Z","draft":false,"author":"Tan Shuai","tags":["Electron","Build Tools","PyWin32","Chocolatey","Win32"],"categories":["Desarrollo de Software"]},"content":"\\nAl trabajar con Electron Build Tools, es posible que encuentres un error relacionado con la instalaci\xf3n de pywin32 a trav\xe9s de Chocolatey. Esto puede ser frustrante, especialmente cuando es una dependencia requerida para tu proyecto. A continuaci\xf3n, se ofrece una explicaci\xf3n detallada del problema y los posibles pasos para resolverlo.\\n\\n### El error\\n\\nAl iniciar un proyecto de Electron utilizando Electron Build Tools, podr\xedas ver el siguiente mensaje de error:\\n\\n```bash\\nE:\\\\\\\\>e init main-testing -i testing --root=e:/src/electron\\nWARN Se ha producido un error solucionable\\n--> No se pudo localizar una dependencia requerida \\"pywin32\\", probablemente deba instalarse.\\n\xbfQuieres que build-tools intente solucionarlo por ti? [y/n]: y\\n\\nEjecutando \\"choco install pywin32 --yes\\"\\nERROR Error: Fallo al ejecutar \\"choco install pywin32 --yes\\"\\n    en spawnSyncWithLog (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:11:11)\\n    en fix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:39:9)\\n    en maybeAutoFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\maybe-auto-fix.js:13:3)\\n    en whichAndFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\which.js:10:5)\\n    en checkPlatformDependencies (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:61:7)\\n    en Object.<anonymous> (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\e-init.js:165:3)\\n    en Module._compile (internal/modules/cjs/loader.js:1072:14)\\n    en Object.Module._extensions..js (internal/modules/cjs/loader.js:1101:10)\\n    en Module.load (internal/modules/cjs/loader.js:937:32)\\n    en Function.Module._load (internal/modules/cjs/loader.js:778:12)\\n```\\n\\nEste error suele ocurrir porque el script de instalaci\xf3n del paquete pywin32 no puede encontrar los archivos necesarios en el servidor remoto. Esto resulta en un error 404, indicando que el archivo no est\xe1 disponible en la URL especificada.\\n\\n### Entendiendo el error\\n\\nLa parte clave del mensaje de error es:\\n\\n```bash\\nERROR: El archivo remoto no existe, no est\xe1 autorizado o est\xe1 prohibido para la URL \'http://sourceforge.net/projects/pywin32/files/pywin32/Build%20219/pywin32-219.win-amd64-py3.9.exe/download\'. Excepci\xf3n al llamar a \\"GetResponse\\" con \\"0\\" argumento(s): \\"El servidor remoto devolvi\xf3 un error: (404) No encontrado.\\"\\n\\nEsto indica que la URL de descarga para pywin32 ya no es v\xe1lida, lo que significa que Chocolatey no puede recuperar los archivos de instalaci\xf3n necesarios.\\n\\n### Pasos para la Soluci\xf3n de Problemas\\n\\nAqu\xed hay algunos pasos que puedes seguir para resolver este problema:\\n\\n#### 1. Verificar la Instalaci\xf3n de Chocolatey\\n\\nAseg\xfarate de que Chocolatey est\xe9 instalado correctamente y actualizado a la \xfaltima versi\xf3n. Puedes verificar tu versi\xf3n de Chocolatey con:\\n\\n```bash\\nchoco --version\\n```\\n\\nPara actualizar Chocolatey, usa:\\n\\n```bash\\nchoco upgrade chocolatey\\n```\\n\\n#### 2. Instalar pywin32 Manualmente\\n\\nDado que la instalaci\xf3n automatizada est\xe1 fallando, intenta instalar pywin32 manualmente. Puedes descargar la versi\xf3n adecuada desde la [p\xe1gina de lanzamientos de pywin32 en GitHub](https://github.com/mhammond/pywin32/releases) e instalarla manualmente.\\n\\n#### 3. Modificar el Script de Instalaci\xf3n\\n\\nSi tienes control sobre el script de Electron Build Tools, puedes modificarlo para que apunte a una URL v\xe1lida para pywin32 o maneje el proceso de instalaci\xf3n manual.\\n\\n#### 4. Usar un Gestor de Paquetes Alternativo\\n\\nSi Chocolatey sigue fallando, considera usar un gestor de paquetes alternativo como pip para paquetes de Python:\\n\\n```bash\\npip install pywin32\\n```\\n\\n### Ejemplo de Instalaci\xf3n Manual de pywin32\\n\\n1. Descarga el instalador adecuado de pywin32 desde los [lanzamientos oficiales en GitHub](https://github.com/mhammond/pywin32/releases).\\n2. Ejecuta el instalador y sigue las instrucciones de instalaci\xf3n.\\n3. Verifica la instalaci\xf3n ejecutando un simple script de Python que importe pywin32:\\n\\n```python\\nimport win32api\\nprint(win32api.GetVersionEx())\\n```\\n\\nEncontrar el error \\"Failed to run `choco install pywin32 --yes`\\" puede ser un obst\xe1culo en tu proceso de desarrollo. Sin embargo, al comprender la causa ra\xedz y seguir los pasos descritos anteriormente, puedes superar este problema y continuar con la configuraci\xf3n de tu proyecto Electron.\\n"},{"lang":"es","group":"blog","slug":"blog/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining","frontmatter":{"title":"Secretos del Dise\xf1o ASIC Personalizado Completo para la Miner\xeda de Bitcoin y Criptomonedas","date":"2022-05-30T00:00:00.000Z","categories":["Semiconductores","Bitcoin","Criptomonedas","Blockchain"],"author":"Tan Shuai","tags":["ASIC","Bitcoin","Miner\xeda","BTC"],"draft":false,"contact":"Tan Shuai | tanshuai@btc.com | tanshuai.com"},"content":"\\nTan Shuai  \\n[tanshuai@btc.com](mailto:tanshuai@btc.com)  \\n[tanshuai.com](https://tanshuai.com)\\n\\n---\\n\\n## Resumen\\n\\nEn el competitivo mundo de la miner\xeda de criptomonedas, la eficiencia energ\xe9tica, el rendimiento del hashrate y la fiabilidad son primordiales. Este documento explora el dise\xf1o ASIC (Circuito Integrado de Aplicaci\xf3n Espec\xedfica) completamente personalizado de primera categor\xeda, revelando secretos de la industria y metodolog\xedas expertas que impulsan la miner\xeda de Bitcoin y criptomonedas de alto rendimiento. Escrito por un experto tecnol\xf3gico de una de las principales empresas de mineros ASIC, este documento aprovecha t\xe9cnicas avanzadas de dise\xf1o, una disposici\xf3n f\xedsica meticulosa y procesos de verificaci\xf3n completos para mostrar las capacidades excepcionales de los ASIC personalizados en la maximizaci\xf3n de la eficiencia y la rentabilidad de la miner\xeda.\\n\\n## Introducci\xf3n\\n\\nLa evoluci\xf3n de la miner\xeda de criptomonedas, en particular la miner\xeda de Bitcoin, ha experimentado una transici\xf3n del uso de CPU, FPGA y GPU de prop\xf3sito general a ASIC especializados. Estos ASIC ofrecen un rendimiento y una eficiencia energ\xe9tica sin igual. El dise\xf1o de ASIC completamente personalizado representa el pin\xe1culo de esta evoluci\xf3n, permitiendo soluciones adaptadas que satisfacen las demandas espec\xedficas de las operaciones mineras.\\n\\nGran parte de la literatura existente sobre el dise\xf1o de ASIC para la miner\xeda de criptomonedas proviene del \xe1mbito acad\xe9mico o de empresas no mineras, lo que a menudo carece de aplicabilidad en el mundo real. Hasta la fecha, solo un pu\xf1ado de empresas, principalmente chinas (e.g., MicroBT, Bitmain), han desarrollado con \xe9xito ASIC de miner\xeda de Bitcoin comercializables. Este documento busca llenar ese vac\xedo proporcionando conocimientos extra\xeddos de la pr\xe1ctica industrial real, ofreciendo una perspectiva basada en las realidades del sector minero.\\n\\nComo profesional con m\xe1s de diez a\xf1os de experiencia en la industria tecnol\xf3gica, el autor de este documento ha desarrollado el ASIC Miner de Bitcoin m\xe1s avanzado del mundo (WhatsMiner), as\xed como mineros de LTC/DOGE y ETH, y ha desempe\xf1ado un papel clave en empresas como MicroBT, BTC.COM y otras empresas fabless p\xfablicas. Ha ocupado posiciones clave en empresas cotizadas en NASDAQ, HKSE y NYSE. Con una amplia experiencia en el establecimiento de asociaciones con TSMC, Texas Instruments, ARM e Intel, aporta un vasto conocimiento y experiencia pr\xe1ctica al campo del dise\xf1o de ASIC personalizados para la miner\xeda de Bitcoin y criptomonedas.\\n\\n## Metodolog\xeda y Flujo de Dise\xf1o\\n\\n### Filosof\xeda de Dise\xf1o\\n\\nNuestro enfoque para el dise\xf1o ASIC a medida se centra en maximizar PPA (Potencia, Rendimiento y \xc1rea), especialmente bajo condiciones de operaci\xf3n a bajo voltaje. Esta secci\xf3n describir\xe1 nuestra filosof\xeda y metodolog\xeda de dise\xf1o:\\n\\n1. **Arquitectura de Pipeline**: Aprovechando los beneficios inherentes de las estructuras de pipeline para algoritmos de miner\xeda, caracterizados por registros y etapas de l\xf3gica combinacional. Al usar una arquitectura de pipeline, podemos manejar eficientemente las operaciones de alta frecuencia requeridas para la miner\xeda de criptomonedas.\\n2. **Lista de Redes y Colocaci\xf3n Manual**: Scripting detallado para la creaci\xf3n de la lista de redes y colocaci\xf3n manual de celdas para optimizar rutas cr\xedticas. Esto permite un control preciso sobre el tiempo y reduce los efectos par\xe1sitos.\\n3. **Bibliotecas de Celdas Personalizadas**: Desarrollo de celdas especializadas con recuentos de transistores optimizados y caracter\xedsticas de ahorro din\xe1mico de energ\xeda. Las celdas personalizadas est\xe1n dise\xf1adas para operar al menor voltaje posible, asegurando un consumo m\xednimo de energ\xeda.\\n\\n### Logro de Beneficios PPA\\n\\nEstrategias detalladas para lograr beneficios PPA a trav\xe9s del dise\xf1o personalizado:\\n\\n1. **Dise\xf1o de Registro Personalizado**: Utilizaci\xf3n de registros multibit y dise\xf1os basados en latches para reducir el consumo de energ\xeda del reloj y mejorar el pr\xe9stamo de tiempo. Los registros multibit minimizan el consumo de energ\xeda del \xe1rbol de reloj y reducen el \xe1rea total.\\n2. **Colocaci\xf3n Manual**: Reducci\xf3n de la longitud de los cables y balanceo de los tiempos de configuraci\xf3n y retenci\xf3n para mejorar el rendimiento general. La colocaci\xf3n manual permite un mejor control sobre los retrasos de interconexi\xf3n y la diafon\xeda, mejorando la integridad de la se\xf1al y reduciendo el consumo de energ\xeda.\\n3. **Dise\xf1o Optimizado de Celdas**: Las celdas personalizadas est\xe1n dise\xf1adas para operar a voltajes m\xe1s bajos, minimizando el consumo de energ\xeda din\xe1mica y maximizando la eficiencia. Al adaptar los dise\xf1os de celdas a las necesidades espec\xedficas de los algoritmos de miner\xeda, podemos lograr mejoras significativas en el rendimiento.\\n\\n### Fiabilidad Bajo Bajo Voltaje\\n\\nAsegurar la fiabilidad de la l\xf3gica de temporizaci\xf3n dise\xf1ada a medida a bajos voltajes implica:\\n\\n1. **Simulaci\xf3n Precisa**: Simulaciones a nivel de circuito para validar el comportamiento de las celdas personalizadas bajo condiciones espec\xedficas. Se utilizan herramientas como SPICE para simulaciones el\xe9ctricas detalladas para asegurar que las celdas operen correctamente bajo todas las esquinas PVT (Proceso, Voltaje, Temperatura).\\n2. **Consistencia en la Colocaci\xf3n**: Colocaci\xf3n manual para asegurar uniformidad y reducir la variabilidad. Al controlar el dise\xf1o f\xedsico, podemos minimizar el impacto de las variaciones de proceso y asegurar un rendimiento consistente.\\n3. **Calibraci\xf3n Precisa de PVT**: Verificaci\xf3n contra variaciones de proceso, voltaje y temperatura. Se realizan pruebas y calibraciones exhaustivas para asegurar la robustez del dise\xf1o en diferentes condiciones de operaci\xf3n.\\n\\n## Estudios de Casos y Resultados\\n\\nPresentaci\xf3n de datos del mundo real y estudios de casos de tape-outs de m\xe1scara completa:\\n\\n| Proyecto | Nodo de Proceso | Eficiencia de Voltaje/Potencia | Algoritmo |\\n| ------- | -------------- | ----------------------------- | --------- |\\n| SC      | TSMC 28nm      | 0.45V, 257J/T                 | Blake2b   |\\n| DCR     | TSMC 28nm      | 0.45V, 150J/T                 | Blake256  |\\n| DASH    | TSMC 16nm      | 0.38V, 6.2J/G                 | X11       |\\n| BTC     | TSMC 16nm      | 0.38V, 65J/T                  | SHA-256d  |\\n| BTC     | TSMC 7nm       | 0.30V, 37J/T                  | SHA-256d  |\\n| BTC     | Samsung 8nm    | 0.31V, 45J/T                  | SHA-256d  |\\n| BTC     | SMIC N+1       | 0.30V, 35J/T                  | SHA-256d  |\\n\\nEstos resultados demuestran las ganancias sustanciales en eficiencia y rendimiento alcanzables a trav\xe9s de nuestro enfoque de dise\xf1o personalizado.\\n\\n## Integraci\xf3n y Verificaci\xf3n\\n\\n### Signoff de Celdas Mixtas\\n\\n- **Integraci\xf3n de Celdas Personalizadas**: Las celdas personalizadas se integran con celdas est\xe1ndar de TSMC y otras fundiciones, garantizando compatibilidad y rendimiento. Las celdas personalizadas se caracterizan y validan para cumplir con los requisitos de la biblioteca de celdas est\xe1ndar, permitiendo una integraci\xf3n sin problemas.\\n- **Estrategias de Signoff**: Las estrategias para garantizar compatibilidad y rendimiento sin problemas incluyen verificaciones detalladas de DRC (Design Rule Check) y LVS (Layout Versus Schematic), as\xed como an\xe1lisis de tiempo y potencia utilizando herramientas EDA (Automatizaci\xf3n de Dise\xf1o Electr\xf3nico) est\xe1ndar de la industria.\\n\\n### Co-Dise\xf1o Digital y Anal\xf3gico\\n\\n- **T\xe9cnicas de Integraci\xf3n**: Integraci\xf3n de componentes digitales y anal\xf3gicos para optimizar el rendimiento general del chip. Se utilizan t\xe9cnicas como la verificaci\xf3n de se\xf1ales mixtas y la co-simulaci\xf3n para asegurar una integraci\xf3n y funcionalidad adecuadas.\\n- **Metodolog\xedas de Verificaci\xf3n**: Las metodolog\xedas para asegurar la robustez en diferentes condiciones operativas incluyen an\xe1lisis de esquinas, simulaciones Monte Carlo y verificaci\xf3n de confiabilidad para abordar el envejecimiento y la electromigraci\xf3n.\\n\\n## Conclusi\xf3n\\n\\nEl dise\xf1o ASIC completamente personalizado ofrece ventajas significativas para la miner\xeda de Bitcoin y criptomonedas, proporcionando un rendimiento, eficiencia energ\xe9tica y confiabilidad incomparables. Al desvelar los secretos del dise\xf1o ASIC personalizado de primer nivel, este documento destaca las metodolog\xedas e innovaciones que distinguen a los l\xedderes de la industria. A medida que la miner\xeda de criptomonedas contin\xfaa evolucionando, los ASIC personalizados jugar\xe1n un papel crucial en impulsar la pr\xf3xima generaci\xf3n de hardware de miner\xeda de alta eficiencia y alto rendimiento.\\n\\n[Versi\xf3n PDF del Documento](/docs/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining.pdf)\\n"},{"lang":"es","group":"blog","slug":"blog/get-current-commit-id-of-git-and-update-to-package-json","frontmatter":{"title":"Obtener el ID del commit actual de Git y actualizarlo en package.json","date":"2021-08-21T09:19:58.875Z","draft":false,"author":"Tan Shuai","tags":["Git","Package.json","Node.js"],"categories":["Desarrollo de software"]},"content":"\\nAl desarrollar un proyecto de Node.js, es posible que desees realizar un seguimiento del ID de commit actual de tu repositorio Git. Esta informaci\xf3n puede ser \xfatil para la depuraci\xf3n, la gesti\xf3n de versiones o fines de implementaci\xf3n. Una forma de lograr esto es actualizando el archivo `package.json` con el ID de commit actual durante el proceso de construcci\xf3n. Este art\xedculo te guiar\xe1 a trav\xe9s de los pasos para obtener el ID de commit actual de Git y actualizarlo en el archivo `package.json` utilizando Node.js.\\n\\n```bash\\n\\"predev\\": \\"node ./node_modules/json/lib/json.js -I -f package.json -e \\\\\\\\\\\\\\"this.commit=\'$(git rev-parse --short HEAD)\'\\\\\\\\\\\\\\"\\",\\n"},{"lang":"es","group":"blog","slug":"blog/migrate-a-github-lfs-git-large-file-storage-repository-to-aws-codecommit","frontmatter":{"title":"Migrar un repositorio de GitHub LFS (Git Large File Storage) a AWS CodeCommit","date":"2022-02-09T09:36:57.481Z","draft":false,"author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["Desarrollo de Software"]},"content":"\\nRecientemente migr\xe9 uno de mis repositorios de GitHub, que utiliza Git Large File Storage (LFS), a AWS CodeCommit. Pens\xe9 en compartir el proceso contigo por si deseas hacer algo similar. Aqu\xed tienes una gu\xeda paso a paso basada en mi experiencia.\\n\\n## Requisitos previos\\n\\nAntes de empezar, aseg\xfarate de tener estas herramientas instaladas:\\n\\n- Git\\n- Git LFS\\n- AWS CLI\\n\\n## Gu\xeda paso a paso\\n\\n### 1. Clonar el repositorio\\n\\nPrimero, clona tu repositorio de GitHub usando la opci\xf3n `--mirror`. Esto crea una clonaci\xf3n bare del repositorio, incluyendo todas las ramas y etiquetas.\\n\\n```zsh\\ngit clone --mirror https://github.com/tanshuai/designs.git designs\\n```\\n\\n### 2. Verificar archivos LFS\\n\\nA continuaci\xf3n, lista todos los archivos gestionados por Git LFS para asegurarte de que todo est\xe9 en su lugar.\\n\\n```zsh\\ngit lfs ls-files\\n```\\n\\nDeber\xedas ver algo como esto:\\n\\n```\\ncadfa0bc9e * Brochure-Trifold-Draft.ai\\naf9b8b8a1c * Brochure-Trifold-English.ai\\n27bb5f4e61 * Brochure-Trifold.ai\\n```\\n\\n### 3. Migrar archivos LFS\\n\\nAhora, exporta los archivos LFS. Este paso asegura que sean parte del historial de tu repositorio.\\n\\n```zsh\\ngit lfs migrate export --include=\\"*.ai\\" --everything\\n```\\n\\nVer\xe1s algunos mensajes de progreso como estos:\\n\\n```\\nmigrate: Sorting commits: ..., done.\\nmigrate: Rewriting commits: 100% (20/20), done.\\nmaster 98a3c48d85... -> 82f8873b41...\\nmigrate: Updating refs: ..., done.\\nmigrate: checkout: ..., done.\\nprune: 3 local object(s), 0 retained, done.\\ncadfa0bc9e... (133 MB)\\n27bb5f4e61... (131 MB)\\naf9b8b8a1c... (130 MB), done.\\nprune: Deleting objects: 100% (3/3), done.\\n```\\n\\n### 4. Limpiar LFS\\n\\nElimina la informaci\xf3n de seguimiento de Git LFS y desinstala Git LFS.\\n\\n```zsh\\ngit lfs ls-files\\ngit rm .gitattributes -f\\ngit lfs uninstall\\n```\\n\\n### 5. Subir a AWS CodeCommit\\n\\nFinalmente, sube tu repositorio a AWS CodeCommit.\\n\\n```zsh\\ngit push https://git-codecommit.us-east-2.amazonaws.com/v1/repos/designs --all\\n```\\n\\n\xa1Eso es todo! Siguiendo estos pasos, migr\xe9 con \xe9xito mi repositorio de GitHub LFS a AWS CodeCommit. Los archivos grandes y el historial del repositorio se conservaron perfectamente.\\n\\n## Conclusi\xf3n\\n\\nMigrar un repositorio de GitHub que utiliza Git LFS a AWS CodeCommit es bastante sencillo si sigues los pasos correctos. Si tienes alguna pregunta o encuentras problemas, la [documentaci\xf3n de AWS CodeCommit](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) y la [documentaci\xf3n de Git LFS](https://git-lfs.github.com/) son excelentes recursos.\\n\\nEspero que encuentres \xfatil esta gu\xeda. \xa1Feliz programaci\xf3n!\\n"},{"lang":"es","group":"blog","slug":"blog/reset-restore-all-subdirectories-of-git","frontmatter":{"title":"Restablecer/Restaurar Todos los Subdirectorios de Git","date":"2021-09-22T08:33:49.201Z","draft":false,"author":"Tan Shuai","tags":["Git","Control de Versiones"],"categories":["Desarrollo de Software"]},"content":"\\nGestionar un repositorio Git de manera efectiva a menudo requiere restablecer o restaurar subdirectorios para mantener una base de c\xf3digo limpia y funcional. Esta gu\xeda proporciona un enfoque conciso, paso a paso, para restablecer o restaurar todos los subdirectorios en un repositorio Git.\\n\\n## Restablecer Subdirectorios\\n\\nEl siguiente comando de Git elimina todos los archivos y directorios no rastreados del repositorio. Esto es \xfatil para limpiar archivos innecesarios antes de realizar un restablecimiento o restauraci\xf3n.\\n\\n```bash\\ngit clean -xfdf -- .\\n```\\n\\n### Desglose del Comando:\\n\\n- `-x`: Elimina todos los archivos no rastreados, incluidos los ignorados por `.gitignore`.\\n- `-f`: Fuerza la eliminaci\xf3n de archivos.\\n- `-d`: Elimina directorios no rastreados.\\n- `-- .`: Aplica el comando al directorio actual y todos los subdirectorios.\\n\\n## Restaurar Subdirectorios\\n\\nPara restaurar todos los archivos en el repositorio a su estado \xfaltimo comprometido, use el siguiente comando:\\n\\n```bash\\ngit checkout {HEAD OR BRANCH} -- .\\n```\\n\\n### Desglose del Comando:\\n\\n- `{HEAD OR BRANCH}`: Reemplace con `HEAD` para restablecer al \xfaltimo commit o especifique un nombre de rama para restablecer a una rama espec\xedfica.\\n- `-- .`: Aplica el comando al directorio actual y todos los subdirectorios.\\n\\nUsando estos comandos, puede asegurarse de que su repositorio est\xe9 libre de archivos no deseados y que todos los archivos se restauren a sus estados comprometidos. Este proceso ayuda a mantener una base de c\xf3digo limpia y organizada, facilitando la colaboraci\xf3n y el desarrollo.\\n\\nSi\xe9ntase libre de personalizar esta gu\xeda seg\xfan sus necesidades y preferencias espec\xedficas. Para operaciones m\xe1s avanzadas con Git, consulte la [documentaci\xf3n oficial de Git](https://git-scm.com/doc).\\n"},{"lang":"es","group":"blog","slug":"blog/ultra-low-cost-ddr3-ddr4-lpddr3-lpddr4-memory-test-system","frontmatter":{"title":"Sistema de Pruebas de Memoria DDR3, DDR4, LP-DDR3 y LP-DDR4 de Ultra Bajo Costo","description":"Descubra el sistema de pruebas de memoria de ultra bajo costo para tecnolog\xedas DDR3, DDR4, LP-DDR3 y LP-DDR4. Con un precio de alrededor de $200,000 USD, ofrece pruebas de alta velocidad, versatilidad, funciones avanzadas y bajo consumo de energ\xeda. Perfecto para empresas que buscan soluciones de pruebas de memoria rentables y confiables.","date":"2024-06-01T00:00:00.000Z","categories":["Semiconductores"],"author":"Tan Shuai","tags":["DDR3","DDR4","LP-DDR3","LP-DDR4","Sistema de Pruebas de Memoria"],"draft":false},"content":"\\nSi eres como yo, siempre en busca de soluciones rentables sin comprometer la calidad, te encantar\xe1 lo que tengo para compartir hoy. En nuestro mundo tecnol\xf3gico de ritmo acelerado, asegurar que la memoria de nuestros dispositivos est\xe9 a la altura es crucial. Las opciones de gama alta como el T5503/T5503HS2 son fant\xe1sticas, pero vienen con un precio elevado. Afortunadamente, Zeeis ha dado un paso adelante con un sistema de prueba de memoria ultra econ\xf3mico que no sacrifica el rendimiento.\\n\\n## Por Qu\xe9 Esto Importa\\n\\nCuando supe por primera vez del sistema de prueba de memoria de Zeeis, me intrig\xf3. Este sistema est\xe1 dise\xf1ado para manejar tecnolog\xedas de memoria DDR3, DDR4, LP-DDR3 y LP-DDR4. Ya sea que trabajes con sistemas antiguos o con la tecnolog\xeda m\xe1s reciente, este sistema te cubre.\\n\\n### Pruebas de Alta Velocidad\\n\\nUna de las caracter\xedsticas destacadas es su capacidad para soportar velocidades de transferencia de datos que van desde 800 hasta 3200 MT/s para DDR3 y DDR4. Puede evaluar m\xf3dulos de memoria a velocidades de reloj de hasta 1600 MHz. Eso significa pruebas exhaustivas y confiables, asegurando que tus dispositivos funcionen de la mejor manera.\\n\\n### Versatilidad\\n\\nLa versatilidad de este sistema es un cambio de juego. Soporta m\xfaltiples est\xe1ndares de memoria, lo que lo hace adecuado para una amplia gama de aplicaciones, desde la electr\xf3nica de consumo hasta la computaci\xf3n de alto rendimiento. Adem\xe1s, est\xe1 preparado para el futuro. A medida que surgen nuevas tecnolog\xedas de memoria, este sistema puede ser f\xe1cilmente actualizado para soportarlas.\\n\\n### Rentabilidad\\n\\nAhora, hablemos del precio. Con alrededor de 200,000 USD, este sistema ofrece un excelente retorno de inversi\xf3n. Es lo suficientemente asequible para peque\xf1as y medianas empresas, asegurando capacidades de prueba de primer nivel sin arruinarse.\\n\\n### Caracter\xedsticas Avanzadas\\n\\nEl sistema viene con algoritmos de prueba avanzados, incluyendo un generador de patrones algor\xedtmicos integrado (ALPG). Esto asegura una evaluaci\xf3n de memoria precisa y confiable, de modo que cada m\xf3dulo cumpla con los estrictos est\xe1ndares de rendimiento.\\n\\n### Bajo Consumo de Energ\xeda\\n\\nLo que tambi\xe9n es impresionante es su bajo consumo de energ\xeda. Se alinea con las tendencias observadas en las tecnolog\xedas de memoria LP-DDR3 y LP-DDR4. Al operar a voltajes m\xe1s bajos, no solo reduce los costos de energ\xeda, sino que tambi\xe9n minimiza la salida t\xe9rmica, convirti\xe9ndolo en una opci\xf3n ecol\xf3gica.\\n\\n## \xbfPor Qu\xe9 Elegir Zeeis?\\n\\n### Escalabilidad\\n\\nEl sistema de Zeeis est\xe1 dise\xf1ado pensando en la escalabilidad. A medida que surgen nuevas tecnolog\xedas de memoria, el sistema puede ser f\xe1cilmente actualizado, asegurando una usabilidad a largo plazo y reduciendo la necesidad de reemplazos frecuentes.\\n\\n### Soporte y Documentaci\xf3n\\n\\nOtra gran ventaja es el extenso soporte y documentaci\xf3n de Zeeis. Ya seas un profesional experimentado o nuevo en las pruebas de memoria, sus gu\xedas detalladas y su servicio al cliente receptivo aseguran una experiencia fluida.\\n\\n### Satisfaciendo las Demandas del Mercado\\n\\nCon la creciente demanda de memoria de alta velocidad en todo, desde smartphones hasta centros de datos, contar con una soluci\xf3n de prueba de memoria confiable y rentable es esencial. El sistema de Zeeis cumple con estas demandas, asegurando que tus productos est\xe9n listos para el mercado y funcionen perfectamente en aplicaciones del mundo real.\\n\\n## Conclusi\xf3n\\n\\nEn resumen, el Sistema de Pruebas de Memoria DDR3, DDR4, LP-DDR3 y LP-DDR4 de Ultra Bajo Costo de Zeeis es una opci\xf3n fant\xe1stica para aquellos de nosotros que necesitamos soluciones de pruebas de memoria confiables, vers\xe1tiles y asequibles. Ofrece un alto rendimiento a una fracci\xf3n del costo de otros sistemas de alta gama, permitiendo a las empresas mantener altos est\xe1ndares sin arruinarse.\\n\\nSi est\xe1s interesado en mejorar tus capacidades de prueba con un sistema dise\xf1ado para el futuro de la tecnolog\xeda de memoria, no dudes en contactarme para m\xe1s informaci\xf3n en [i@tanshuai.com](mailto:i@tanshuai.com).\\n\\n\xa1Felices pruebas!\\n"},{"lang":"es","group":"blog","slug":"blog/usr-bin-sudo-must-be-owned-by-uid-0-and-have-the-setuid-bit-set-on-ubuntu-20-04","frontmatter":{"title":"/usr/bin/sudo debe ser propiedad del uid 0 y tener el bit setuid activado en Ubuntu 20.04","date":"2021-10-08T13:07:25.406Z","draft":false,"author":"Tan Shuai","tags":["Ubuntu","Linux","Sudo"],"categories":["Linux"]},"content":"\\nSi encuentras el mensaje de error \\"/usr/bin/sudo debe ser propiedad del uid 0 y tener el bit setuid activado\\" en Ubuntu 20.04, sigue estos pasos para resolver el problema.\\n\\n1. Durante el proceso de arranque, presiona la tecla ‘ESC’ para acceder al men\xfa de GRUB.\\n\\n![Pantalla de GRUB](/images/content/wx20211008-210752.png \\"Pantalla de GRUB\\")\\n\\n2. Selecciona la primera opci\xf3n, “Ubuntu”, y presiona la tecla ‘e’ para editar los par\xe1metros de arranque.\\n\\n![Editar Par\xe1metros de Arranque](/images/content/wx20211008-210841.png \\"Editar Par\xe1metros de Arranque\\")\\n\\n3. Agrega la siguiente cadena a la l\xednea que comienza con ‘linux’ para iniciar en modo de rescate:\\n\\n```bash\\nsystemd.unit=rescue.target\\n```\\n\\n4. Una vez en modo de rescate, ejecuta el siguiente comando para restaurar los permisos y la propiedad correctos de `/usr/bin/sudo`:\\n\\n```bash\\npkexec chmod a=rx,u+ws /usr/bin/sudo\\n```\\n\\nEste comando establece los permisos necesarios y asegura que `sudo` sea propiedad del usuario root con el bit setuid activado.\\n\\nSiguiendo estos pasos, deber\xedas poder resolver el problema y restaurar el funcionamiento adecuado del comando `sudo` en tu sistema Ubuntu.\\n\\n---\\n"},{"lang":"ko","group":"blog","slug":"blog/aws-codecommit-the-githubs-large-file-storage-git-lfs-free-alternative","frontmatter":{"title":"AWS CodeCommit： GitHub 대용량 파일 저장소 (Git LFS) 무료 대안","description":"AWS CodeCommit이 GitHub의 대용량 파일 저장소(Git LFS)에 대한 비용 효율적이고 효율적인 대안이 되는 방법을 알아보세요. 이 글에서는 Git LFS의 한계, 대용량 파일 저장을 위한 AWS CodeCommit의 장점, 그리고 Git LFS에서 CodeCommit으로의 마이그레이션을 위한 단계별 가이드를 다룹니다. AWS의 확장 가능하고 안전한 인프라를 통해 개발 워크플로우를 향상시키세요.","date":"2022-02-09T00:00:00.000Z","author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["소프트웨어 개발"],"draft":false},"content":"\\nAWS CodeCommit는 GitHub의 Large File Storage(Git LFS) 서비스에 대한 강력한 대안을 제공하여 Git 리포지토리에서 대용량 파일을 효율적으로 관리할 수 있는 솔루션을 제공합니다.\\n\\n## Git LFS 사용을 재고해야 하는 이유\\n\\nGit LFS는 Git 리포지토리에서 대용량 파일을 처리하는 데 인기 있는 선택이지만, 몇 가지 한계와 도전 과제가 있습니다. Git LFS는 추가 설정 및 관리를 필요로 하여 개발 워크플로를 복잡하게 만들 수 있습니다. 또한, 많은 대용량 파일 또는 광범위한 협업이 있는 프로젝트의 경우 Git LFS와 관련된 저장소 및 대역폭 비용이 빠르게 증가할 수 있습니다.\\n\\n## GitHub의 Large File Storage 서비스가 완벽하지 않은 이유\\n\\nGitHub의 Large File Storage 서비스는 유용하지만, 본질적인 단점이 있습니다. 주요 문제는 저장소 및 대역폭과 관련된 비용으로, 이는 대규모 프로젝트에서는 부담이 될 수 있습니다. 또한, Git LFS 관리는 번거로울 수 있으며, 개발자가 LFS 클라이언트를 설치하고 구성하고 특정 파일을 추적하며 대용량 파일을 리포지토리의 다른 부분과 별도로 처리해야 하므로 병합 충돌이 발생할 수 있습니다.\\n\\n## Git에서 대용량 파일을 저장하기 위해 AWS CodeCommit을 사용하는 이유\\n\\nAWS CodeCommit은 Git LFS 없이 Git 리포지토리에서 대용량 파일을 저장하기 위한 매력적인 대안을 제공합니다. CodeCommit은 다른 AWS 서비스와 원활하게 통합되며, 뛰어난 확장성, 보안성 및 비용 효율성을 제공하는 완전 관리형 소스 제어 서비스입니다. CodeCommit을 활용하면 Git LFS 관리의 추가 오버헤드를 피하면서 AWS의 견고한 인프라와 사용량 기준 요금제의 혜택을 누릴 수 있습니다.\\n\\n## GitHub와 비교할 때 AWS CodeCommit의 한계\\n\\n장점에도 불구하고, AWS CodeCommit에는 GitHub와 비교할 때 몇 가지 한계가 있습니다. GitHub의 광범위한 커뮤니티 지원, 풍부한 통합 생태계 및 GitHub Actions와 GitHub Pages와 같은 고급 기능은 CodeCommit에서 완전히 복제되지 않을 수 있습니다. 또한, GitHub의 사용자 인터페이스와 협업 도구에 익숙한 개발자들은 CodeCommit으로의 전환에 약간의 조정이 필요할 수 있습니다.\\n\\n## Git LFS 리포지토리를 CodeCommit으로 마이그레이션하는 방법\\n\\nGit LFS 리포지토리를 CodeCommit으로 마이그레이션하려면 몇 가지 단계가 필요합니다. 먼저, 모든 대용량 파일이 Git LFS 리포지토리에서 올바르게 추적되고 있는지 확인합니다. 그 다음, 리포지토리를 복제하고 Git LFS 추적 구성을 제거합니다. 그런 다음, AWS CodeCommit에서 새 리포지토리를 생성하고 로컬 리포지토리를 해당 리포지토리에 푸시합니다. 이 과정을 원활하게 진행할 수 있도록 자세한 문서와 스크립트가 제공됩니다.\\n\\n## 더 나은 솔루션\\n\\nGit LFS에 크게 의존하는 팀과 프로젝트는 AWS CodeCommit을 대안으로 탐색하는 것이 상당한 이점을 제공할 수 있습니다. CodeCommit의 AWS 생태계와의 원활한 통합, 비용 효율적이고 확장 가능한 특성은 Git 리포지토리에서 대용량 파일을 관리하는 매력적인 옵션을 제공합니다. Git LFS와 관련된 문제를 완화함으로써, CodeCommit은 개발 팀이 코딩과 협업에 집중할 수 있도록 하여 생산성과 혁신을 촉진합니다.\\n\\n결론적으로, AWS CodeCommit은 GitHub의 Large File Storage 서비스에 대한 실용적이고 비용 효율적이며 효율적인 대안을 제공합니다. AWS의 강력한 인프라를 활용하여 개발자들은 대용량 파일을 Git 리포지토리에서 쉽게 관리할 수 있으며, 워크플로를 최적화하고 오버헤드를 줄일 수 있습니다.\\n"},{"lang":"ko","group":"blog","slug":"blog/check-voltage-current-on-macos-for-power-adapter","frontmatter":{"title":"MacOS에서 전원 어댑터의 전압 및 전류 확인","meta_title":"MacOS에서 전원 어댑터의 전압 및 전류 확인","date":"2022-02-14T00:00:00.000Z","author":"Tan Shuai","tags":["MacOS","전원 어댑터","전압","전류"],"categories":["MacOS"],"draft":false},"content":"\\nMacBook을 사용할 때 전원 어댑터의 전압과 전류를 확인하고 싶을 수 있습니다. MacOS에서 전원 어댑터의 전압과 전류를 확인하는 간단한 방법은 다음과 같습니다.\\n\\nTerminal.app을 열고 다음 명령어를 입력하세요:\\n\\n`ioreg -l -n AppleSmartBattery -r |grep AppleRawAdapterDetails`\\n\\n다음과 같이 전류와 전압을 포함한 정보를 얻을 수 있습니다:\\n\\n```json\\n\\"AppleRawAdapterDetails\\" = ({\\"IsWireless\\"=No,\\"AdapterID\\"=0,\\"FamilyCode\\"=18446744073172697098,\\"Watts\\"=89,**\\"Current\\"=4450**,\\"PMUConfiguration\\"=4448,**\\"Voltage\\"=20000**})\\n"},{"lang":"ko","group":"blog","slug":"blog/convert-markdown-academic-paper-pdf-macos","frontmatter":{"title":"macOS에서 Markdown을 학술 논문 스타일의 PDF로 빠르게 변환하기","meta_title":"Pandoc을 사용하여 macOS에서 Markdown을 학술 논문 스타일의 PDF로 변환하기","description":"Pandoc과 BasicTeX을 사용하여 macOS에서 Markdown 문서를 학술 논문 스타일의 PDF로 변환하는 방법을 배워보세요. 이 빠르고 간단한 방법은 학술 논문을 위한 전문적인 PDF 파일을 만드는 데 완벽합니다.","date":"2022-03-03T00:00:00.000Z","categories":["소프트웨어 개발"],"author":"Tan Shuai","tags":["Pandoc","LaTeX","PDF","논문","Markdown","macOS"],"draft":false},"content":"\\n이 가이드에서는 macOS에서 Pandoc과 BasicTeX을 사용하여 Markdown 문서를 학술 논문 스타일의 PDF로 변환하는 방법을 안내합니다. 이 방법은 빠르고 간단하여 학술 논문용 PDF 파일을 전문적으로 만들 때 유용합니다.\\n\\n### 1단계: Pandoc 및 BasicTeX 설치\\n\\n먼저, macOS 시스템에 Pandoc과 BasicTeX을 설치해야 합니다. 다음은 설치 방법입니다:\\n\\n1. **Pandoc 설치**: 터미널을 열고 다음 명령어를 입력하여 Pandoc을 설치합니다:\\n\\n   ```bash\\n   brew install pandoc\\n   ```\\n\\n2. **BasicTeX 설치**: MacTeX는 용량이 크므로, 공간을 절약하기 위해 더 작은 BasicTeX 패키지를 선택했습니다. 다음 명령어를 실행합니다:\\n\\n   ```bash\\n   brew install --cask basictex\\n   ```\\n\\n3. **일반 LaTeX 패키지 설치**: PDF 생성에 필요한 패키지를 설치하기 위해 다음 명령어를 실행합니다:\\n   ```bash\\n   sudo tlmgr update --self\\n   sudo tlmgr install collection-basic collection-latex collection-latexrecommended collection-fontsrecommended\\n   ```\\n\\n### 2단계: Markdown 파일 준비\\n\\n다음으로, Markdown 파일(`paper.md` 등)을 만듭니다. 제목, 저자, 날짜, 연락처 정보를 포함하여 파일을 설정하는 방법은 다음과 같습니다:\\n\\n```markdown\\n---\\ntitle: \\"Your Paper Title\\"\\nsubtitle: \\"Optional Subtitle\\"\\ndate: \\\\today\\n\\nauthor: |\\n  | Your Name\\n  | your-email@tanshuai.com\\n  | www.tanshuai.com\\n---\\n\\n# Abstract\\n\\nYour abstract here.\\n\\n# Introduction\\n\\nYour introduction here.\\n\\n# Methodology\\n\\nYour methodology here.\\n\\n# Results\\n\\nYour results here.\\n\\n# Conclusion\\n\\nYour conclusion here. \\n```\\n\\n### 3단계: Pandoc을 사용하여 Markdown을 PDF로 변환\\n\\n이제, Markdown 파일을 PDF로 변환할 수 있습니다. 터미널에서 다음 명령어를 사용했습니다:\\n\\n```bash\\npandoc paper.md -o paper.pdf --pdf-engine=xelatex\\n```\\n\\n이 명령어는 Pandoc의 기본 LaTeX 템플릿을 사용하여 Markdown 파일을 학술 논문 스타일의 PDF로 변환하며, 저자의 연락처 정보를 이름 아래에 포함합니다.\\n\\n### 추가 팁\\n\\n- **맞춤 LaTeX 템플릿**: 고급 형식이나 특정 스타일이 필요한 경우, 맞춤 LaTeX 템플릿을 만들거나 다운로드하여 Pandoc과 함께 사용할 수 있습니다:\\n\\n  ```bash\\n  pandoc paper.md -o paper.pdf --pdf-engine=xelatex --template=your-template.tex\\n  ```\\n\\n- **더 많은 메타데이터**: YAML 메타데이터 헤더에 초록이나 키워드 등의 추가 정보를 추가하고, 맞춤 템플릿에서 이를 사용할 수 있습니다.\\n\\n### 결론\\n\\n이 단계를 따르면 macOS에서 Markdown 문서를 학술 논문 스타일의 PDF로 쉽게 변환할 수 있습니다. Pandoc과 BasicTeX을 사용하면 이 과정이 빠르고 효율적이며, 전문적인 PDF 문서를 생성하는 데 적합합니다. 학술 논문, 기술 보고서 또는 기타 정식 문서를 준비할 때 이 방법이 유용합니다. 메타데이터 헤더에 연락처 정보를 포함하면 문서에 전문성을 더할 수 있습니다.\\n\\n이 가이드가 도움이 되길 바랍니다! 질문이나 문제가 있으면 언제든지 연락 주세요. 즐거운 글쓰기 되세요!\\n"},{"lang":"ko","group":"blog","slug":"blog/electron-build-tools-error-error-failed-to-run-choco-install-pywin32-yes","frontmatter":{"title":"Electron 빌드 도구 `ERROR Error： Failed to run \\"choco install pywin32 --yes\\"`","date":"2021-09-08T00:00:00.000Z","draft":false,"author":"Tan Shuai","tags":["Electron","빌드 도구","PyWin32","Chocolatey","Win32"],"categories":["소프트웨어 개발"]},"content":"\\nElectron Build Tools를 사용할 때 Chocolatey를 통해 pywin32를 설치하는 과정에서 오류가 발생할 수 있습니다. 프로젝트에 필요한 의존성이기 때문에 이 오류는 매우 좌절감을 줄 수 있습니다. 아래는 문제에 대한 자세한 설명과 해결 가능한 단계들입니다.\\n\\n### 오류\\n\\nElectron Build Tools를 사용하여 Electron 프로젝트를 초기화할 때 다음과 같은 오류 메시지가 나타날 수 있습니다:\\n\\n```bash\\nE:\\\\\\\\>e init main-testing -i testing --root=e:/src/electron\\nWARN A fixable error has occurred\\n--> A required dependency \\"pywin32\\" could not be located, it probably has to be installed.\\nDo you want build-tools to try fix this for you? [y/n]: y\\n\\nRunning \\"choco install pywin32 --yes\\"\\nERROR Error: Failed to run \\"choco install pywin32 --yes\\"\\n    at spawnSyncWithLog (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:11:11)\\n    at fix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:39:9)\\n    at maybeAutoFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\maybe-auto-fix.js:13:3)\\n    at whichAndFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\which.js:10:5)\\n    at checkPlatformDependencies (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:61:7)\\n    at Object.<anonymous> (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\e-init.js:165:3)\\n    at Module._compile (internal/modules/cjs/loader.js:1072:14)\\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1101:10)\\n    at Module.load (internal/modules/cjs/loader.js:937:32)\\n    at Function.Module._load (internal/modules/cjs/loader.js:778:12)\\n```\\n\\n이 오류는 일반적으로 pywin32 패키지 설치 스크립트가 원격 서버에서 필요한 파일을 찾지 못할 때 발생합니다. 이는 지정된 URL에 파일이 없음을 나타내는 404 오류로 이어집니다.\\n\\n### 오류 이해하기\\n\\n오류 메시지의 핵심 부분은 다음과 같습니다:\\n\\n```bash\\nERROR: The remote file either doesn\'t exist, is unauthorized, or is forbidden for url \'http://sourceforge.net/projects/pywin32/files/pywin32/Build%20219/pywin32-219.win-amd64-py3.9.exe/download\'. Exception calling \\"GetResponse\\" with \\"0\\" argument(s): \\"The remote server returned an error: (404) Not Found.\\"\\n```\\n\\n이는 pywin32의 다운로드 URL이 더 이상 유효하지 않음을 나타내며, Chocolatey가 필요한 설치 파일을 가져올 수 없다는 것을 의미합니다.\\n\\n### 문제 해결 단계\\n\\n다음은 이 문제를 해결하기 위해 시도할 수 있는 몇 가지 단계입니다:\\n\\n#### 1. Chocolatey 설치 확인\\n\\nChocolatey가 올바르게 설치되고 최신 버전으로 업데이트되었는지 확인하십시오. Chocolatey 버전을 확인하려면 다음을 사용하십시오:\\n\\n```bash\\nchoco --version\\n```\\n\\nChocolatey를 업데이트하려면 다음을 사용하십시오:\\n\\n```bash\\nchoco upgrade chocolatey\\n```\\n\\n#### 2. pywin32 수동 설치\\n\\n자동 설치가 실패하는 경우, pywin32를 수동으로 설치해보십시오. [pywin32 GitHub 릴리즈 페이지](https://github.com/mhammond/pywin32/releases)에서 적절한 버전을 다운로드하여 수동으로 설치할 수 있습니다.\\n\\n#### 3. 설치 스크립트 수정\\n\\nElectron Build Tools 스크립트를 제어할 수 있는 경우, pywin32의 유효한 URL을 가리키도록 수정하거나 수동 설치 프로세스를 처리하도록 스크립트를 변경할 수 있습니다.\\n\\n#### 4. 대체 패키지 관리자 사용\\n\\nChocolatey가 계속 실패할 경우, Python 패키지에 대한 pip와 같은 대체 패키지 관리자를 사용하는 것을 고려하십시오:\\n\\n```bash\\npip install pywin32\\n```\\n\\n### pywin32 수동 설치 예시\\n\\n1. [공식 GitHub 릴리즈](https://github.com/mhammond/pywin32/releases)에서 적절한 pywin32 설치 프로그램을 다운로드합니다.\\n2. 설치 프로그램을 실행하고 설치 지침을 따릅니다.\\n3. pywin32를 임포트하는 간단한 Python 스크립트를 실행하여 설치를 확인합니다:\\n\\n```python\\nimport win32api\\nprint(win32api.GetVersionEx())\\n```\\n\\n\\"Failed to run `choco install pywin32 --yes`\\" 오류는 개발 과정에서 장애물이 될 수 있습니다. 그러나 근본 원인을 이해하고 위의 단계를 따르면 이 문제를 극복하고 Electron 프로젝트 설정을 계속할 수 있습니다.\\n"},{"lang":"ko","group":"blog","slug":"blog/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining","frontmatter":{"title":"비트코인 및 암호화폐 채굴을 위한 풀 커스텀 ASIC 설계 비밀","date":"2022-05-30T00:00:00.000Z","categories":["반도체","비트코인","암호화폐","블록체인"],"author":"Tan Shuai","tags":["ASIC","비트코인","채굴","BTC"],"draft":false,"contact":"Tan Shuai | tanshuai@btc.com | tanshuai.com"},"content":"\\n탄 슈아이  \\n[tanshuai@btc.com](mailto:tanshuai@btc.com)  \\n[tanshuai.com](https://tanshuai.com)\\n\\n---\\n\\n## 초록\\n\\n암호화폐 채굴의 경쟁적인 세계에서 전력 효율성, 해시레이트 성능 및 신뢰성은 매우 중요합니다. 이 논문은 최고급 풀 커스텀 ASIC(응용 맞춤형 집적 회로) 설계에 대해 다루며, 고성능 비트코인 및 암호화폐 채굴을 가능하게 하는 업계 비밀과 전문가 방법론을 공개합니다. 주요 ASIC 채굴기 회사의 기술 전문가가 작성한 이 논문은 고급 설계 기술, 세심한 물리적 배치 및 종합적인 검증 과정을 활용하여 풀 커스텀 ASIC의 탁월한 능력을 보여주고, 채굴 효율성과 수익성을 극대화합니다.\\n\\n## 소개\\n\\n암호화폐 채굴, 특히 비트코인 채굴의 진화는 범용 CPU, FPGA 및 GPU에서 특화된 ASIC으로의 변화를 목격했습니다. 이러한 ASIC은 뛰어난 성능과 에너지 효율성을 제공합니다. 풀 커스텀 ASIC 설계는 이러한 진화의 정점을 나타내며, 채굴 작업의 특정 요구를 충족시키는 맞춤형 솔루션을 가능하게 합니다.\\n\\n기존의 암호화폐 채굴용 ASIC 설계에 관한 문헌 대부분은 학계나 비채굴 기업에서 나왔으며, 종종 실질적인 적용 가능성이 부족합니다. 현재까지 시장성 있는 비트코인 채굴용 ASIC을 성공적으로 개발한 회사는 대부분 중국 기업(e.g., MicroBT, Bitmain)입니다. 이 논문은 실제 업계 실무에서 얻은 통찰력을 제공함으로써 그 간극을 메우고, 채굴 부문의 현실에 기반한 관점을 제시하고자 합니다.\\n\\n이 논문의 저자는 기술 업계에서 10년 이상의 경력을 가지고 있으며, 세계 최고의 비트코인 ASIC 채굴기(WhatsMiner), LTC/DOGE 및 ETH 채굴기를 개발하고, MicroBT, BTC.COM 및 기타 상장 무팹리스 회사에서 중요한 역할을 수행했습니다. 저자는 나스닥, 홍콩 증권거래소, 뉴욕 증권거래소에 상장된 회사에서 핵심 직책을 역임했으며, TSMC, 텍사스 인스트루먼트, ARM 및 인텔과의 파트너십을 구축한 광범위한 경험을 가지고 있습니다. 그는 비트코인 및 암호화폐 채굴을 위한 맞춤형 ASIC 설계 분야에 풍부한 지식과 실질적인 전문 지식을 제공합니다.\\n\\n## 방법론 및 설계 흐름\\n\\n### 설계 철학\\n\\n우리의 풀 커스텀 ASIC 설계 접근 방식은 특히 저전압 동작 조건에서 PPA(전력, 성능 및 면적) 극대화에 중점을 둡니다. 이 섹션에서는 우리의 설계 철학과 방법론을 설명합니다:\\n\\n1. **파이프라인 아키텍처**: 레지스터와 조합 논리 단계가 특징인 파이프라인 구조의 채굴 알고리즘의 고유한 이점을 활용합니다. 파이프라인 아키텍처를 사용함으로써 암호화폐 채굴에 필요한 고주파 작업을 효율적으로 처리할 수 있습니다.\\n2. **수동 넷리스트 및 배치**: 넷리스트 작성 및 주요 경로 최적화를 위한 수동 셀 배치에 대한 자세한 스크립팅을 통해 타이밍에 대한 정밀한 제어가 가능하며 기생 효과를 줄일 수 있습니다.\\n3. **맞춤형 셀 라이브러리**: 최적화된 트랜지스터 수와 동적 전력 절약 기능을 갖춘 특수 셀을 개발합니다. 맞춤형 셀은 가능한 최저 전압에서 작동하도록 설계되어 최소한의 전력 소비를 보장합니다.\\n\\n### PPA 혜택 달성\\n\\n커스텀 설계를 통한 PPA 혜택 달성을 위한 상세 전략:\\n\\n1. **커스텀 레지스터 설계**: 멀티비트 레지스터와 래치 기반 설계를 활용하여 클럭 전력을 줄이고 타이밍 차입을 개선합니다. 멀티비트 레지스터는 클럭 트리의 전력 소비를 최소화하고 전체 면적을 줄입니다.\\n2. **수동 배치**: 와이어 길이를 줄이고 설정 및 유지 시간을 균형 있게 하여 전체 성능을 향상시킵니다. 수동 배치는 상호 연결 지연과 교차 간섭을 더 잘 제어하여 신호 무결성을 개선하고 전력 소비를 줄입니다.\\n3. **최적화된 셀 설계**: 커스텀 셀은 낮은 전압에서 작동하도록 설계되어 동적 전력 소비를 최소화하고 효율성을 극대화합니다. 셀 설계를 채굴 알고리즘의 특정 요구 사항에 맞게 조정함으로써 성능을 크게 향상시킬 수 있습니다.\\n\\n### 저전압에서의 신뢰성\\n\\n저전압에서 커스텀 설계 타이밍 로직의 신뢰성을 보장하기 위해서는:\\n\\n1. **정확한 시뮬레이션**: 특정 조건에서 커스텀 셀의 동작을 검증하기 위한 회로 수준 시뮬레이션. SPICE와 같은 도구를 사용하여 세부적인 전기적 시뮬레이션을 수행하여 셀이 모든 PVT(프로세스, 전압, 온도) 조건에서 올바르게 작동하도록 합니다.\\n2. **배치 일관성**: 변동성을 줄이고 균일성을 보장하기 위한 수동 배치. 물리적 레이아웃을 제어하여 프로세스 변동의 영향을 최소화하고 일관된 성능을 보장합니다.\\n3. **정확한 PVT 보정**: 프로세스, 전압 및 온도 변동에 대한 검증. 다양한 운영 조건에서 설계의 견고성을 보장하기 위해 광범위한 테스트와 보정을 수행합니다.\\n\\n## 사례 연구 및 결과\\n\\n풀 마스크 테이프 아웃의 실제 데이터와 사례 연구를 제시합니다:\\n\\n| 프로젝트 | 프로세스 노드 | 전압/전력 효율 | 알고리즘  |\\n| -------- | -------------- | --------------- | ---------- |\\n| SC       | TSMC 28nm      | 0.45V, 257J/T   | Blake2b    |\\n| DCR      | TSMC 28nm      | 0.45V, 150J/T   | Blake256   |\\n| DASH     | TSMC 16nm      | 0.38V, 6.2J/G   | X11        |\\n| BTC      | TSMC 16nm      | 0.38V, 65J/T    | SHA-256d   |\\n| BTC      | TSMC 7nm       | 0.30V, 37J/T    | SHA-256d   |\\n| BTC      | Samsung 8nm    | 0.31V, 45J/T    | SHA-256d   |\\n| BTC      | SMIC N+1       | 0.30V, 35J/T    | SHA-256d   |\\n\\n이 결과는 커스텀 설계 접근 방식을 통해 달성할 수 있는 상당한 효율성과 성능 향상을 보여줍니다.\\n\\n## 통합 및 검증\\n\\n### 혼합 셀 서명\\n\\n- **커스텀 셀 통합**: 커스텀 셀은 TSMC 및 기타 파운드리의 표준 셀과 통합되어 호환성과 성능을 보장합니다. 커스텀 셀은 표준 셀 라이브러리 요구 사항에 맞추어 특성화되고 검증되어 원활한 통합이 가능합니다.\\n- **서명 전략**: 원활한 호환성과 성능을 보장하기 위한 전략에는 상세한 DRC(설계 규칙 검사) 및 LVS(레이아웃 대 회로도) 검사, 산업 표준 EDA(전자 설계 자동화) 도구를 사용한 타이밍 및 전력 분석이 포함됩니다.\\n\\n### 디지털 및 아날로그 공동 설계\\n\\n- **통합 기술**: 전체 칩 성능을 최적화하기 위해 디지털 및 아날로그 구성 요소를 통합하는 기술. 혼합 신호 검증 및 공동 시뮬레이션과 같은 기술이 적절한 통합과 기능을 보장하기 위해 사용됩니다.\\n- **검증 방법론**: 다양한 운영 조건에서 견고성을 보장하기 위한 방법론으로는 코너 분석, 몬테카를로 시뮬레이션, 노화 및 전자 이동성을 해결하기 위한 신뢰성 검증이 포함됩니다.\\n\\n## 결론\\n\\n풀 커스텀 ASIC 설계는 비트코인 및 암호화폐 채굴에 대해 상당한 이점을 제공하며, 탁월한 성능, 전력 효율성 및 신뢰성을 제공합니다. 최상급 커스텀 ASIC 설계의 비밀을 공개함으로써, 이 논문은 업계 선두주자들을 차별화시키는 방법론과 혁신을 강조합니다. 암호화폐 채굴이 계속 진화함에 따라, 커스텀 ASIC은 고효율, 고성능 채굴 하드웨어의 차세대를 이끄는 데 중요한 역할을 할 것입니다.\\n\\n[논문 PDF 버전](/docs/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining.pdf)\\n"},{"lang":"ko","group":"blog","slug":"blog/get-current-commit-id-of-git-and-update-to-package-json","frontmatter":{"title":"Git의 현재 커밋 ID 가져오기 및 package.json에 업데이트","date":"2021-08-21T09:19:58.875Z","draft":false,"author":"Tan Shuai","tags":["Git","Package.json","Node.js"],"categories":["소프트웨어 개발"]},"content":"\\nNode.js 프로젝트를 개발할 때 Git 저장소의 현재 커밋 ID를 추적하고 싶을 수 있습니다. 이 정보는 디버깅, 버전 관리 또는 배포 목적으로 유용할 수 있습니다. 이를 달성하는 한 가지 방법은 빌드 과정에서 현재 커밋 ID를 `package.json` 파일에 업데이트하는 것입니다. 이 글에서는 Node.js를 사용하여 현재 Git 커밋 ID를 가져와 `package.json` 파일에 업데이트하는 방법을 안내합니다.\\n\\n```bash\\n\\"predev\\": \\"node ./node_modules/json/lib/json.js -I -f package.json -e \\\\\\"this.commit=\'$(git rev-parse --short HEAD)\'\\\\\\"\\",\\n"},{"lang":"ko","group":"blog","slug":"blog/migrate-a-github-lfs-git-large-file-storage-repository-to-aws-codecommit","frontmatter":{"title":"GitHub LFS(대용량 파일 저장소) 저장소를 AWS CodeCommit로 마이그레이션","date":"2022-02-09T09:36:57.481Z","draft":false,"author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["소프트웨어 개발"]},"content":"\\n최근 Git Large File Storage(LFS)를 사용하는 GitHub 저장소를 AWS CodeCommit으로 이전했습니다. 비슷한 작업을 계획 중이라면 제 경험을 바탕으로 한 과정을 공유하려고 합니다. 다음은 단계별 가이드입니다.\\n\\n## 사전 준비\\n\\n시작하기 전에 다음 도구들이 설치되어 있는지 확인하세요:\\n\\n- Git\\n- Git LFS\\n- AWS CLI\\n\\n## 단계별 가이드\\n\\n### 1. 저장소 클론\\n\\n먼저, `--mirror` 옵션을 사용하여 GitHub 저장소를 클론하세요. 이렇게 하면 모든 브랜치와 태그를 포함한 bare 클론이 생성됩니다.\\n\\n```zsh\\ngit clone --mirror https://github.com/tanshuai/designs.git designs\\n```\\n\\n### 2. LFS 파일 확인\\n\\n다음으로, Git LFS가 관리하는 모든 파일을 나열하여 모든 것이 제자리에 있는지 확인하세요.\\n\\n```zsh\\ngit lfs ls-files\\n```\\n\\n아래와 같은 출력이 나타납니다:\\n\\n```\\ncadfa0bc9e * Brochure-Trifold-Draft.ai\\naf9b8b8a1c * Brochure-Trifold-English.ai\\n27bb5f4e61 * Brochure-Trifold.ai\\n```\\n\\n### 3. LFS 파일 마이그레이션\\n\\n이제 LFS 파일을 내보내세요. 이 단계는 파일이 저장소의 기록에 포함되도록 합니다.\\n\\n```zsh\\ngit lfs migrate export --include=\\"*.ai\\" --everything\\n```\\n\\n다음과 같은 진행 메시지가 표시됩니다:\\n\\n```\\nmigrate: Sorting commits: ..., done.\\nmigrate: Rewriting commits: 100% (20/20), done.\\nmaster    98a3c48d85... -> 82f8873b41...\\nmigrate: Updating refs: ..., done.\\nmigrate: checkout: ..., done.\\nprune: 3 local object(s), 0 retained, done.\\ncadfa0bc9e... (133 MB)\\n27bb5f4e61... (131 MB)\\naf9b8b8a1c... (130 MB), done.\\nprune: Deleting objects: 100% (3/3), done.\\n```\\n\\n### 4. LFS 정리\\n\\nGit LFS 추적 정보를 제거하고 Git LFS를 제거하세요.\\n\\n```zsh\\ngit lfs ls-files\\ngit rm .gitattributes -f\\ngit lfs uninstall\\n```\\n\\n### 5. AWS CodeCommit에 푸시\\n\\n마지막으로, 저장소를 AWS CodeCommit으로 푸시하세요.\\n\\n```zsh\\ngit push https://git-codecommit.us-east-2.amazonaws.com/v1/repos/designs --all\\n```\\n\\n이제 완료되었습니다! 이 단계를 따라 GitHub LFS 저장소를 AWS CodeCommit으로 성공적으로 이전했습니다. 대용량 파일과 저장소 기록이 완벽하게 보존되었습니다.\\n\\n## 마무리\\n\\nGit LFS를 사용하는 GitHub 저장소를 AWS CodeCommit으로 이전하는 것은 올바른 단계를 따르면 매우 간단합니다. 질문이 있거나 문제가 발생하면 [AWS CodeCommit 문서](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html)와 [Git LFS 문서](https://git-lfs.github.com/)를 참조하세요.\\n\\n이 가이드가 도움이 되길 바랍니다. 즐거운 코딩 되세요!\\n"},{"lang":"ko","group":"blog","slug":"blog/reset-restore-all-subdirectories-of-git","frontmatter":{"title":"모든 Git 하위 디렉토리 재설정/복원","date":"2021-09-22T08:33:49.201Z","draft":false,"author":"Tan Shuai","tags":["Git","버전 관리"],"categories":["소프트웨어 개발"]},"content":"\\nGit 저장소를 효과적으로 관리하려면 서브디렉터리를 재설정하거나 복원하여 깨끗하고 기능적인 코드베이스를 유지해야 합니다. 이 가이드는 Git 저장소에서 모든 서브디렉터리를 재설정하거나 복원하는 간결한 단계별 접근 방식을 제공합니다.\\n\\n## 서브디렉터리 재설정\\n\\n다음 Git 명령어는 저장소에서 추적되지 않은 모든 파일과 디렉터리를 제거합니다. 이는 재설정 또는 복원을 수행하기 전에 불필요한 파일을 정리하는 데 유용합니다.\\n\\n```bash\\ngit clean -xfdf -- .\\n```\\n\\n### 명령어 설명:\\n\\n- `-x`: `.gitignore`에 의해 무시된 파일을 포함하여 모든 추적되지 않은 파일을 제거합니다.\\n- `-f`: 파일 제거를 강제로 실행합니다.\\n- `-d`: 추적되지 않은 디렉터리를 제거합니다.\\n- `-- .`: 현재 디렉터리와 모든 서브디렉터리에 명령을 적용합니다.\\n\\n## 서브디렉터리 복원\\n\\n저장소의 모든 파일을 마지막으로 커밋된 상태로 복원하려면 다음 명령어를 사용하십시오:\\n\\n```bash\\ngit checkout {HEAD OR BRANCH} -- .\\n```\\n\\n### 명령어 설명:\\n\\n- `{HEAD OR BRANCH}`: 최신 커밋으로 재설정하려면 `HEAD`를 사용하고 특정 브랜치로 재설정하려면 브랜치 이름을 지정합니다.\\n- `-- .`: 현재 디렉터리와 모든 서브디렉터리에 명령을 적용합니다.\\n\\n이 명령어를 사용하면 저장소가 원하지 않는 파일에서 자유로워지고 모든 파일이 커밋된 상태로 복원됩니다. 이 과정은 깨끗하고 정리된 코드베이스를 유지하는 데 도움이 되며, 협업과 개발을 더 쉽게 만듭니다.\\n\\n이 가이드를 특정 필요와 선호에 따라 자유롭게 맞춤화하십시오. 더 고급 Git 작업에 대해서는 [공식 Git 문서](https://git-scm.com/doc)를 참조하십시오.\\n"},{"lang":"ko","group":"blog","slug":"blog/ultra-low-cost-ddr3-ddr4-lpddr3-lpddr4-memory-test-system","frontmatter":{"title":"초저가 DDR3, DDR4, LP-DDR3 및 LP-DDR4 메모리 테스트 시스템","description":"DDR3, DDR4, LP-DDR3 및 LP-DDR4 기술을 위한 초저가 메모리 테스트 시스템을 발견하세요. 약 20만 달러에 고속 테스트, 다목적 사용, 고급 기능 및 저전력 소모를 제공합니다. 비용 효율적이고 신뢰할 수 있는 메모리 테스트 솔루션을 찾는 기업에 적합합니다.","date":"2024-06-01T00:00:00.000Z","categories":["반도체"],"author":"Tan Shuai","tags":["DDR3","DDR4","LP-DDR3","LP-DDR4","메모리 테스트 시스템"],"draft":false},"content":"\\n만약 여러분이 저와 같다면, 품질을 타협하지 않으면서 비용 효율적인 해결책을 항상 찾고 있을 것입니다. 오늘 제가 공유할 내용은 바로 그런 해결책입니다. 빠르게 변화하는 기술 세계에서 우리 장치의 메모리가 적합한지 확인하는 것은 매우 중요합니다. T5503/T5503HS2와 같은 고급 옵션은 환상적이지만, 가격이 비쌉니다. 다행히도 Zeeis는 성능을 희생하지 않으면서도 초저가의 메모리 테스트 시스템을 제공하고 있습니다.\\n\\n## 이것이 중요한 이유\\n\\nZeeis의 메모리 테스트 시스템에 대해 처음 알았을 때, 저는 매우 흥미로웠습니다. 이 시스템은 DDR3, DDR4, LP-DDR3, LP-DDR4 메모리 기술을 처리하도록 설계되었습니다. 구형 시스템에서 최신 기술까지 이 시스템이 모두 지원합니다.\\n\\n### 고속 테스트\\n\\n주목할 만한 특징 중 하나는 DDR3와 DDR4 모두에서 800에서 3200 MT/s의 데이터 전송 속도를 지원하는 능력입니다. 또한, 최대 1600 MHz의 클록 속도로 메모리 모듈을 평가할 수 있습니다. 이는 철저하고 신뢰할 수 있는 테스트를 통해 장치가 최상의 성능을 발휘할 수 있도록 보장합니다.\\n\\n### 다재다능성\\n\\n이 시스템의 다재다능성은 게임 체인저입니다. 여러 메모리 표준을 지원하여 소비자 전자제품부터 고성능 컴퓨팅에 이르기까지 다양한 응용 분야에 적합합니다. 또한, 미래 지향적입니다. 새로운 메모리 기술이 등장하면 이 시스템은 쉽게 업그레이드되어 이를 지원할 수 있습니다.\\n\\n### 비용 효율성\\n\\n이제 가격에 대해 이야기해봅시다. 약 20만 달러의 가격으로, 이 시스템은 뛰어난 투자 수익률을 제공합니다. 중소기업에도 충분히 부담 가능한 가격으로, 최고 수준의 테스트 기능을 제공하면서도 큰 비용 부담을 주지 않습니다.\\n\\n### 고급 기능\\n\\n이 시스템은 고급 테스트 알고리즘을 갖추고 있으며, 통합된 알고리즘 패턴 생성기(ALPG)를 포함하고 있습니다. 이는 정확하고 신뢰할 수 있는 메모리 평가를 보장하여 각 모듈이 엄격한 성능 기준을 충족하도록 합니다.\\n\\n### 저전력 소모\\n\\n또한, 이 시스템의 저전력 소모는 인상적입니다. LP-DDR3 및 LP-DDR4 메모리 기술에서 나타나는 트렌드에 부합합니다. 더 낮은 전압으로 작동하여 에너지 비용을 줄일 뿐만 아니라 열 방출도 최소화하여 친환경적인 선택이 됩니다.\\n\\n## 왜 Zeeis를 선택해야 할까?\\n\\n### 확장성\\n\\nZeeis의 시스템은 확장성을 염두에 두고 설계되었습니다. 새로운 메모리 기술이 등장하면 시스템을 쉽게 업그레이드할 수 있어 장기적인 사용 가능성을 보장하고 빈번한 교체 필요성을 줄입니다.\\n\\n### 지원 및 문서화\\n\\n또 하나의 큰 장점은 Zeeis의 광범위한 지원 및 문서화입니다. 메모리 테스트에 익숙한 전문가든 초보자든, 자세한 가이드와 응답성 높은 고객 서비스 덕분에 원활한 경험을 보장받을 수 있습니다.\\n\\n### 시장 수요 충족\\n\\n스마트폰에서 데이터 센터에 이르기까지 고속 메모리에 대한 수요가 증가함에 따라, 신뢰할 수 있고 비용 효율적인 메모리 테스트 솔루션이 필수적입니다. Zeeis의 시스템은 이러한 요구를 충족하여 제품이 시장에 맞게 준비되고 실제 응용 환경에서 완벽하게 작동할 수 있도록 합니다.\\n\\n## 결론\\n\\n요약하자면, Zeeis의 초저가 DDR3, DDR4, LP-DDR3 및 LP-DDR4 메모리 테스트 시스템은 신뢰할 수 있고 다재다능하며 저렴한 메모리 테스트 솔루션이 필요한 사람들에게 훌륭한 선택입니다. 다른 고급 시스템의 일부 비용으로 높은 성능을 제공하여 기업이 높은 기준을 유지하면서도 비용 부담을 덜 수 있도록 합니다.\\n\\n테스트 기능을 미래의 메모리 기술을 위해 설계된 시스템으로 향상시키는 데 관심이 있으시면, [i@tanshuai.com](mailto:i@tanshuai.com)으로 저에게 더 많은 정보를 문의해 주세요.\\n\\n즐거운 테스트 되세요!\\n"},{"lang":"ko","group":"blog","slug":"blog/usr-bin-sudo-must-be-owned-by-uid-0-and-have-the-setuid-bit-set-on-ubuntu-20-04","frontmatter":{"title":"/usr/bin/sudo는 uid 0에 의해 소유되어야 하며 Ubuntu 20.04에서 setuid 비트가 설정되어 있어야 합니다","date":"2021-10-08T13:07:25.406Z","draft":false,"author":"Tan Shuai","tags":["우분투","리눅스","수도"],"categories":["리눅스"]},"content":"\\nUbuntu 20.04에서 \\"/usr/bin/sudo must be owned by uid 0 and have the setuid bit set\\" 오류 메시지를 만나면, 다음 단계를 따라 문제를 해결하세요.\\n\\n1. 부팅 과정에서 ‘ESC’ 키를 눌러 GRUB 메뉴에 접근합니다.\\n\\n![GRUB 화면](/images/content/wx20211008-210752.png \\"GRUB 화면\\")\\n\\n2. 첫 번째 옵션 “Ubuntu”를 선택하고 ‘e’ 키를 눌러 부팅 매개변수를 편집합니다.\\n\\n![부팅 매개변수 편집](/images/content/wx20211008-210841.png \\"부팅 매개변수 편집\\")\\n\\n3. 구조 모드로 부팅하기 위해 \'linux\'로 시작하는 줄에 다음 문자열을 추가합니다:\\n\\n```bash\\nsystemd.unit=rescue.target\\n```\\n\\n4. 구조 모드에 들어가면, 다음 명령어를 실행하여 `/usr/bin/sudo`의 올바른 권한과 소유권을 복원합니다:\\n\\n```bash\\npkexec chmod a=rx,u+ws /usr/bin/sudo\\n```\\n\\n이 명령어는 필요한 권한을 설정하고 `sudo`가 setuid 비트가 설정된 루트 사용자에 의해 소유되도록 합니다.\\n\\n이 단계를 따르면 문제를 해결하고 Ubuntu 시스템에서 `sudo` 명령의 적절한 기능을 복원할 수 있습니다.\\n"},{"lang":"th","group":"blog","slug":"blog/aws-codecommit-the-githubs-large-file-storage-git-lfs-free-alternative","frontmatter":{"title":"AWS CodeCommit： ทางเลือกที่ฟรีสำหรับ GitHub Large File Storage (Git LFS)","description":"ค้นพบวิธีที่ AWS CodeCommit ทำหน้าที่เป็นทางเลือกที่คุ้มค่าและมีประสิทธิภาพต่อ GitHub\'s Large File Storage (Git LFS) บทความนี้ครอบคลุมข้อจำกัดของ Git LFS, ประโยชน์ของการใช้ AWS CodeCommit สำหรับการจัดเก็บไฟล์ขนาดใหญ่, และให้คำแนะนำทีละขั้นตอนในการย้ายจาก Git LFS ไปยัง CodeCommit ปรับปรุงเวิร์กโฟลว์การพัฒนาของคุณด้วยโครงสร้างพื้นฐานที่ปรับขยายได้และปลอดภัยของ AWS","date":"2022-02-09T00:00:00.000Z","author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["การพัฒนาซอฟต์แวร์"],"draft":false},"content":"\\nAWS CodeCommit นำเสนอทางเลือกที่มีประสิทธิภาพสำหรับบริการ Large File Storage (Git LFS) ของ GitHub โดยเป็นโซลูชั่นที่มีประสิทธิภาพในการจัดการไฟล์ขนาดใหญ่ในที่เก็บ Git ของคุณ\\n\\n## ทำไมคุณควรพิจารณาใหม่เกี่ยวกับการใช้ Git LFS\\n\\nในขณะที่ Git LFS เป็นตัวเลือกที่ได้รับความนิยมสำหรับการจัดการไฟล์ขนาดใหญ่ในที่เก็บ Git มันมีข้อจำกัดและความท้าทาย Git LFS ต้องการการตั้งค่าและการจัดการเพิ่มเติม ซึ่งสามารถทำให้กระบวนการพัฒนาซับซ้อนได้ นอกจากนี้ค่าใช้จ่ายในการจัดเก็บและแบนด์วิธที่เกี่ยวข้องกับ Git LFS อาจเพิ่มขึ้นอย่างรวดเร็ว โดยเฉพาะอย่างยิ่งสำหรับโครงการที่มีไฟล์ขนาดใหญ่มากมายหรือการทำงานร่วมกันอย่างกว้างขวาง\\n\\n## ทำไมบริการ Large File Storage ของ GitHub ไม่สมบูรณ์แบบ\\n\\nบริการ Large File Storage ของ GitHub แม้ว่าจะมีประโยชน์ แต่ก็มีข้อบกพร่องโดยเนื้อแท้ ข้อกังวลหลักคือค่าใช้จ่ายที่เกี่ยวข้องกับการจัดเก็บและแบนด์วิธ ซึ่งสามารถกลายเป็นอุปสรรคสำหรับโครงการขนาดใหญ่ นอกจากนี้การจัดการ Git LFS อาจเป็นเรื่องยุ่งยาก ต้องให้ผู้พัฒนาติดตั้งและกำหนดค่า LFS client, ติดตามไฟล์เฉพาะ และจัดการกับความขัดแย้งในการรวมที่อาจเกิดขึ้นเนื่องจากการจัดการไฟล์ขนาดใหญ่แยกต่างหากจากที่เก็บที่เหลือ\\n\\n## ทำไมต้องใช้ AWS CodeCommit ในการจัดเก็บไฟล์ขนาดใหญ่ใน Git\\n\\nAWS CodeCommit นำเสนอทางเลือกที่น่าสนใจในการจัดเก็บไฟล์ขนาดใหญ่ในที่เก็บ Git โดยไม่ต้องใช้ Git LFS CodeCommit เป็นบริการควบคุมเวอร์ชันที่จัดการอย่างเต็มที่ซึ่งผสานรวมอย่างลงตัวกับบริการอื่น ๆ ของ AWS โดยมีความสามารถในการขยายตัว ความปลอดภัย และความคุ้มค่าต่อราคา โดยการใช้ CodeCommit นักพัฒนาสามารถหลีกเลี่ยงค่าใช้จ่ายเพิ่มเติมในการจัดการ Git LFS ในขณะที่ได้รับประโยชน์จากโครงสร้างพื้นฐานที่แข็งแกร่งของ AWS และรูปแบบการคิดราคาตามการใช้งานจริง\\n\\n## ข้อจำกัดของ AWS CodeCommit เมื่อเทียบกับ GitHub\\n\\nแม้จะมีข้อดี AWS CodeCommit ก็มีข้อจำกัดบางประการเมื่อเทียบกับ GitHub ชุมชนสนับสนุนที่กว้างขวางของ GitHub ระบบนิเวศของการรวมที่หลากหลาย และฟีเจอร์ขั้นสูงเช่น GitHub Actions และ GitHub Pages อาจไม่สามารถทำซ้ำได้อย่างเต็มที่ใน CodeCommit นอกจากนี้นักพัฒนาที่คุ้นเคยกับส่วนติดต่อผู้ใช้และเครื่องมือการทำงานร่วมกันของ GitHub อาจพบว่าการเปลี่ยนไปใช้ CodeCommit ต้องการการปรับตัวบางประการ\\n\\n## วิธีการย้ายที่เก็บ Git LFS ไปยัง CodeCommit\\n\\nการย้ายที่เก็บ Git LFS ไปยัง CodeCommit ประกอบด้วยหลายขั้นตอน ขั้นแรกให้แน่ใจว่าไฟล์ขนาดใหญ่ทั้งหมดถูกติดตามอย่างถูกต้องในที่เก็บ Git LFS ของคุณ ต่อไป โคลนที่เก็บและลบการตั้งค่าการติดตาม Git LFS หลังจากนั้นให้สร้างที่เก็บใหม่ใน AWS CodeCommit และส่งที่เก็บท้องถิ่นของคุณไปยังมัน มีเอกสารและสคริปต์โดยละเอียดให้ใช้งานเพื่อทำให้กระบวนการนี้ราบรื่นโดยไม่สูญเสียข้อมูลหรือการขัดจังหวะ\\n\\n## โซลูชันที่ดีกว่า\\n\\nสำหรับทีมและโครงการที่พึ่งพา Git LFS เป็นอย่างมาก การสำรวจ AWS CodeCommit เป็นทางเลือกหนึ่งสามารถเสนอประโยชน์ที่สำคัญ CodeCommit ผสานรวมอย่างลงตัวกับระบบนิเวศของ AWS ควบคู่กับลักษณะที่คุ้มค่าและสามารถขยายได้ ทำให้เป็นตัวเลือกที่น่าสนใจในการจัดการไฟล์ขนาดใหญ่ในที่เก็บ Git โดยการลดความท้าทายที่เกี่ยวข้องกับ Git LFS CodeCommit ทำให้นักพัฒนาสามารถมุ่งเน้นไปที่การเขียนโค้ดและการทำงานร่วมกัน ขับเคลื่อนประสิทธิภาพและนวัตกรรม\\n\\nโดยสรุปแล้ว AWS CodeCommit ให้บริการทางเลือกที่มีประสิทธิภาพ คุ้มค่า และมีประสิทธิภาพแทนการใช้บริการ Large File Storage ของ GitHub โดยการใช้ประโยชน์จากโครงสร้างพื้นฐานที่แข็งแกร่งของ AWS นักพัฒนาสามารถจัดการไฟล์ขนาดใหญ่ใน Git repository ได้อย่างง่ายดาย เพิ่มประสิทธิภาพในการทำงานและลดภาระงาน\\n"},{"lang":"th","group":"blog","slug":"blog/check-voltage-current-on-macos-for-power-adapter","frontmatter":{"title":"ตรวจสอบแรงดันและกระแสไฟบน MacOS สำหรับอะแดปเตอร์ไฟ","meta_title":"ตรวจสอบแรงดันและกระแสไฟบน MacOS สำหรับอะแดปเตอร์ไฟ","date":"2022-02-14T00:00:00.000Z","author":"Tan Shuai","tags":["MacOS","อะแดปเตอร์ไฟ","แรงดันไฟ","กระแสไฟ"],"categories":["MacOS"],"draft":false},"content":"\\nเมื่อคุณใช้ MacBook คุณอาจต้องการตรวจสอบแรงดันไฟฟ้าและกระแสไฟฟ้าของอะแดปเตอร์ไฟฟ้า นี่คือวิธีง่าย ๆ ในการตรวจสอบแรงดันไฟฟ้าและกระแสไฟฟ้าของอะแดปเตอร์ไฟฟ้าบน MacOS\\n\\nเปิด Terminal.app และพิมพ์คำสั่ง:\\n\\n`ioreg -l -n AppleSmartBattery -r |grep AppleRawAdapterDetails`\\n\\nคุณจะได้รับข้อมูลต่อไปนี้ที่รวมถึงกระแสไฟฟ้าและแรงดันไฟฟ้า:\\n\\n```json\\n\\"AppleRawAdapterDetails\\" = ({\\"IsWireless\\"=No,\\"AdapterID\\"=0,\\"FamilyCode\\"=18446744073172697098,\\"Watts\\"=89,**\\"Current\\"=4450**,\\"PMUConfiguration\\"=4448,**\\"Voltage\\"=20000**})\\n"},{"lang":"th","group":"blog","slug":"blog/convert-markdown-academic-paper-pdf-macos","frontmatter":{"title":"แปลง Markdown เป็น PDF สไตล์วิชาการอย่างรวดเร็วบน macOS","meta_title":"แปลง Markdown เป็น PDF สไตล์วิชาการบน macOS ด้วย Pandoc","description":"เรียนรู้วิธีการแปลงเอกสาร Markdown เป็น PDF สไตล์วิชาการบน macOS ด้วย Pandoc และ BasicTeX วิธีการที่รวดเร็วและง่ายดายนี้เหมาะสำหรับการสร้างไฟล์ PDF ระดับมืออาชีพสำหรับงานวิชาการ","date":"2022-03-03T00:00:00.000Z","categories":["การพัฒนาซอฟต์แวร์"],"author":"Tan Shuai","tags":["Pandoc","LaTeX","PDF","เอกสาร","Markdown","macOS"],"draft":false},"content":"\\nในคู่มือนี้ ฉันจะพาคุณผ่านวิธีการแปลงเอกสาร Markdown เป็นไฟล์ PDF สไตล์วิชาการบน macOS โดยใช้ Pandoc และ BasicTeX วิธีนี้รวดเร็วและง่ายดาย เหมาะสำหรับเมื่อคุณต้องการสร้างไฟล์ PDF ที่ดูเป็นมืออาชีพสำหรับบทความวิชาการของคุณ\\n\\n### ขั้นตอนที่ 1: ติดตั้ง Pandoc และ BasicTeX\\n\\nก่อนอื่น คุณจะต้องติดตั้ง Pandoc และ BasicTeX บนระบบ macOS ของคุณ นี่คือวิธีที่ฉันทำ:\\n\\n1. **ติดตั้ง Pandoc**: เปิด Terminal และป้อนคำสั่งต่อไปนี้เพื่อติดตั้ง Pandoc:\\n\\n   ```bash\\n   brew install pandoc\\n   ```\\n\\n2. **ติดตั้ง BasicTeX**: เนื่องจาก MacTeX มีขนาดค่อนข้างใหญ่ ฉันจึงเลือกใช้แพ็กเกจ BasicTeX ที่มีขนาดเล็กกว่าเพื่อประหยัดพื้นที่ รันคำสั่งนี้:\\n\\n   ```bash\\n   brew install --cask basictex\\n   ```\\n\\n3. **ติดตั้งแพ็กเกจ LaTeX ทั่วไป**: เพื่อให้แน่ใจว่าคุณมีแพ็กเกจที่จำเป็นสำหรับการสร้าง PDF ให้รันคำสั่งเหล่านี้:\\n   ```bash\\n   sudo tlmgr update --self\\n   sudo tlmgr install collection-basic collection-latex collection-latexrecommended collection-fontsrecommended\\n   ```\\n\\n### ขั้นตอนที่ 2: เตรียมไฟล์ Markdown ของคุณ\\n\\nถัดไป สร้างไฟล์ Markdown ของคุณ (เช่น `paper.md`) นี่คือวิธีที่ฉันตั้งค่าไฟล์ของฉัน รวมถึงชื่อเรื่อง ผู้แต่ง วันที่ และข้อมูลติดต่อ:\\n\\n```markdown\\n---\\ntitle: \\"Your Paper Title\\"\\nsubtitle: \\"Optional Subtitle\\"\\ndate: \\\\today\\n\\nauthor: |\\n  | Your Name\\n  | your-email@tanshuai.com\\n  | www.tanshuai.com\\n---\\n\\n# Abstract\\n\\nYour abstract here.\\n\\n# Introduction\\n\\nYour introduction here.\\n\\n# Methodology\\n\\nYour methodology here.\\n\\n# Results\\n\\nYour results here.\\n\\n# Conclusion\\n\\nYour conclusion here.\\n```\\n\\n### ขั้นตอนที่ 3: แปลง Markdown เป็น PDF ด้วย Pandoc\\n\\nตอนนี้ คุณสามารถแปลงไฟล์ Markdown ของคุณเป็น PDF ฉันใช้คำสั่งต่อไปนี้ใน Terminal:\\n\\n```bash\\npandoc paper.md -o paper.pdf --pdf-engine=xelatex\\n```\\n\\nคำสั่งนี้ใช้เทมเพลต LaTeX เริ่มต้นของ Pandoc เพื่อแปลงไฟล์ Markdown เป็นไฟล์ PDF สไตล์วิชาการ รวมถึงข้อมูลติดต่อของผู้แต่งใต้ชื่อของพวกเขา\\n\\n### เคล็ดลับเพิ่มเติม\\n\\n- **เทมเพลต LaTeX ที่กำหนดเอง**: หากคุณต้องการการจัดรูปแบบขั้นสูงหรือต้องการสไตล์เฉพาะ คุณสามารถสร้างหรือดาวน์โหลดเทมเพลต LaTeX ที่กำหนดเองและใช้กับ Pandoc:\\n\\n  ```bash\\n  pandoc paper.md -o paper.pdf --pdf-engine=xelatex --template=your-template.tex\\n  ```\\n\\n- **เมทาดาทาเพิ่มเติม**: คุณสามารถเพิ่มข้อมูลเพิ่มเติมในหัวเมทาดาทา YAML เช่น บทคัดย่อหรือคำสำคัญ และใช้ข้อมูลเหล่านี้ในเทมเพลตที่กำหนดเอง\\n\\n### บทสรุป\\n\\nโดยการทำตามขั้นตอนเหล่านี้ คุณสามารถแปลงเอกสาร Markdown เป็นไฟล์ PDF สไตล์วิชาการบน macOS ได้อย่างง่ายดาย การใช้ Pandoc และ BasicTeX ทำให้กระบวนการนี้รวดเร็วและมีประสิทธิภาพ เหมาะสำหรับเมื่อคุณต้องการสร้างเอกสาร PDF ที่เป็นมืออาชีพ ไม่ว่าคุณจะเตรียมบทความวิชาการ รายงานทางเทคนิค หรือเอกสารทางการอื่นๆ วิธีนี้ทำงานได้ดี การรวมข้อมูลติดต่อในหัวเมทาดาทาจะเพิ่มความเป็นมืออาชีพให้กับเอกสารของคุณ\\n\\nฉันหวังว่าคุณจะพบว่าคู่มือนี้มีประโยชน์! หากคุณมีคำถามหรือพบปัญหา อย่าลังเลที่จะติดต่อมา ขอให้เขียนอย่างมีความสุข!\\n"},{"lang":"th","group":"blog","slug":"blog/electron-build-tools-error-error-failed-to-run-choco-install-pywin32-yes","frontmatter":{"title":"เครื่องมือสร้าง Electron `ERROR Error： Failed to run \\"choco install pywin32 --yes\\"`","date":"2021-09-08T00:00:00.000Z","draft":false,"author":"Tan Shuai","tags":["อิเล็กตรอน","เครื่องมือสร้าง","PyWin32","Chocolatey","Win32"],"categories":["การพัฒนาซอฟต์แวร์"]},"content":"\\nเมื่อทำงานกับเครื่องมือ Electron Build Tools คุณอาจพบข้อผิดพลาดที่เกี่ยวข้องกับการติดตั้ง pywin32 ผ่าน Chocolatey ซึ่งอาจทำให้คุณรู้สึกหงุดหงิด โดยเฉพาะเมื่อมันเป็น dependency ที่จำเป็นสำหรับโปรเจ็กต์ของคุณ ด้านล่างนี้เป็นคำอธิบายรายละเอียดของปัญหาและขั้นตอนที่เป็นไปได้ในการแก้ไข\\n\\n### ข้อผิดพลาด\\n\\nเมื่อเริ่มต้นโปรเจ็กต์ Electron โดยใช้เครื่องมือ Electron Build Tools คุณอาจเห็นข้อความแสดงข้อผิดพลาดดังนี้:\\n\\n```bash\\nE:\\\\\\\\>e init main-testing -i testing --root=e:/src/electron\\nWARN A fixable error has occurred\\n--> A required dependency \\"pywin32\\" could not be located, it probably has to be installed.\\nDo you want build-tools to try fix this for you? [y/n]: y\\n\\nRunning \\"choco install pywin32 --yes\\"\\nERROR Error: Failed to run \\"choco install pywin32 --yes\\"\\n    at spawnSyncWithLog (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:11:11)\\n    at fix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:39:9)\\n    at maybeAutoFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\maybe-auto-fix.js:13:3)\\n    at whichAndFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\which.js:10:5)\\n    at checkPlatformDependencies (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:61:7)\\n    at Object.<anonymous> (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\e-init.js:165:3)\\n    at Module._compile (internal/modules/cjs/loader.js:1072:14)\\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1101:10)\\n    at Module.load (internal/modules/cjs/loader.js:937:32)\\n    at Function.Module._load (internal/modules/cjs/loader.js:778:12)\\n```\\n\\nข้อผิดพลาดนี้มักเกิดขึ้นเพราะสคริปต์การติดตั้งแพ็กเกจ pywin32 ไม่สามารถหาชุดไฟล์ที่จำเป็นจากเซิร์ฟเวอร์ระยะไกล ซึ่งทำให้เกิดข้อผิดพลาด 404 บ่งชี้ว่าไฟล์ไม่สามารถหาได้จาก URL ที่ระบุ\\n\\n### การทำความเข้าใจข้อผิดพลาด\\n\\nส่วนสำคัญของข้อความแสดงข้อผิดพลาดคือ:\\n\\n```bash\\nERROR: The remote file either doesn\'t exist, is unauthorized, or is forbidden for url \'http://sourceforge.net/projects/pywin32/files/pywin32/Build%20219/pywin32-219.win-amd64-py3.9.exe/download\'. Exception calling \\"GetResponse\\" with \\"0\\" argument(s): \\"The remote server returned an error: (404) Not Found.\\"\\n```\\n\\nนี่บ่งชี้ว่า URL สำหรับดาวน์โหลด pywin32 ไม่ถูกต้องอีกต่อไป ซึ่งหมายความว่า Chocolatey ไม่สามารถดึงไฟล์การติดตั้งที่จำเป็นได้\\n\\n### ขั้นตอนการแก้ไขปัญหา\\n\\nนี่คือบางขั้นตอนที่คุณสามารถดำเนินการเพื่อแก้ไขปัญหานี้:\\n\\n#### 1. ตรวจสอบการติดตั้ง Chocolatey\\n\\nตรวจสอบให้แน่ใจว่า Chocolatey ติดตั้งถูกต้องและอัปเดตเป็นเวอร์ชันล่าสุด คุณสามารถตรวจสอบเวอร์ชันของ Chocolatey ได้ด้วย:\\n\\n```bash\\nchoco --version\\n```\\n\\nเพื่ออัปเดต Chocolatey ใช้คำสั่ง:\\n\\n```bash\\nchoco upgrade chocolatey\\n```\\n\\n#### 2. ติดตั้ง pywin32 ด้วยตนเอง\\n\\nเนื่องจากการติดตั้งอัตโนมัติล้มเหลว ลองติดตั้ง pywin32 ด้วยตนเอง คุณสามารถดาวน์โหลดเวอร์ชันที่เหมาะสมจาก [หน้าการปล่อยของ pywin32 บน GitHub](https://github.com/mhammond/pywin32/releases) และติดตั้งด้วยตนเอง\\n\\n#### 3. แก้ไขสคริปต์การติดตั้ง\\n\\nหากคุณมีการควบคุมสคริปต์ของเครื่องมือ Electron Build Tools คุณสามารถแก้ไขให้ชี้ไปยัง URL ที่ถูกต้องสำหรับ pywin32 หรือจัดการกระบวนการติดตั้งด้วยตนเอง\\n\\n#### 4. ใช้ตัวจัดการแพ็คเกจทางเลือก\\n\\nหาก Chocolatey ยังคงล้มเหลว ลองใช้ตัวจัดการแพ็คเกจทางเลือกเช่น pip สำหรับแพ็คเกจ Python:\\n\\n```bash\\npip install pywin32\\n```\\n\\n### ตัวอย่างการติดตั้ง pywin32 ด้วยตนเอง\\n\\n1. ดาวน์โหลดโปรแกรมติดตั้ง pywin32 ที่เหมาะสมจาก [GitHub releases อย่างเป็นทางการ](https://github.com/mhammond/pywin32/releases)\\n2. เรียกใช้โปรแกรมติดตั้งและทำตามคำแนะนำการติดตั้ง\\n3. ตรวจสอบการติดตั้งโดยรันสคริปต์ Python ง่ายๆ ที่นำเข้า pywin32:\\n\\n```python\\nimport win32api\\nprint(win32api.GetVersionEx())\\n```\\n\\nการพบข้อผิดพลาด \\"Failed to run `choco install pywin32 --yes`\\" อาจเป็นอุปสรรคในการพัฒนาของคุณ อย่างไรก็ตาม โดยการเข้าใจสาเหตุและทำตามขั้นตอนที่อธิบายข้างต้น คุณสามารถเอาชนะปัญหานี้และดำเนินการตั้งค่าโปรเจค Electron ของคุณต่อไปได้\\n"},{"lang":"th","group":"blog","slug":"blog/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining","frontmatter":{"title":"ความลับในการออกแบบ ASIC แบบกำหนดเองสำหรับการขุดบิตคอยน์และสกุลเงินดิจิทัล","date":"2022-05-30T00:00:00.000Z","categories":["เซมิคอนดักเตอร์","บิตคอยน์","สกุลเงินดิจิทัล","บล็อกเชน"],"author":"Tan Shuai","tags":["ASIC","บิตคอยน์","การขุด","BTC"],"draft":false,"contact":"Tan Shuai | tanshuai@btc.com | tanshuai.com"},"content":"\\nTan Shuai  \\n[tanshuai@btc.com](mailto:tanshuai@btc.com)  \\n[tanshuai.com](https://tanshuai.com)\\n\\n---\\n\\n## บทคัดย่อ\\n\\nในโลกที่มีการแข่งขันสูงของการขุดสกุลเงินดิจิทัล ประสิทธิภาพพลังงาน ประสิทธิภาพการแฮช และความน่าเชื่อถือเป็นสิ่งสำคัญ เอกสารฉบับนี้เจาะลึกถึงการออกแบบ ASIC (Application-Specific Integrated Circuit) แบบเต็มรูปแบบ เปิดเผยความลับของอุตสาหกรรมและวิธีการที่เชี่ยวชาญที่ขับเคลื่อนการขุด Bitcoin และสกุลเงินดิจิทัลที่มีประสิทธิภาพสูง เขียนโดยผู้เชี่ยวชาญด้านเทคโนโลยีจากหนึ่งในบริษัทนักขุด ASIC ชั้นนำ เอกสารฉบับนี้ใช้เทคนิคการออกแบบขั้นสูง การวางผังทางกายภาพอย่างพิถีพิถัน และกระบวนการตรวจสอบที่ครอบคลุม เพื่อแสดงความสามารถพิเศษของ ASIC แบบเต็มรูปแบบในการเพิ่มประสิทธิภาพการขุดและความสามารถในการทำกำไร\\n\\n## บทนำ\\n\\nการพัฒนาการขุดสกุลเงินดิจิทัล โดยเฉพาะการขุด Bitcoin ได้เห็นการเปลี่ยนแปลงจากการใช้ CPU, FPGA และ GPU ทั่วไปไปสู่ ASIC ที่เชี่ยวชาญ ASIC เหล่านี้มีประสิทธิภาพและพลังงานที่ยอดเยี่ยม การออกแบบ ASIC แบบเต็มรูปแบบเป็นยอดของการพัฒนานี้ ทำให้เกิดโซลูชันที่ตรงกับความต้องการเฉพาะของการดำเนินงานขุด\\n\\nวรรณกรรมที่มีอยู่มากมายเกี่ยวกับการออกแบบ ASIC สำหรับการขุดสกุลเงินดิจิทัลมาจากวงการวิชาการหรือองค์กรที่ไม่ใช่การขุด ซึ่งมักขาดการประยุกต์ใช้ในโลกจริง จนถึงปัจจุบัน มีเพียงไม่กี่บริษัท ส่วนใหญ่เป็นบริษัทจีน (เช่น MicroBT, Bitmain) ที่ประสบความสำเร็จในการพัฒนา ASIC ขุด Bitcoin ที่ทำการตลาดได้ เอกสารฉบับนี้มุ่งเติมเต็มช่องว่างนั้นโดยการให้ข้อมูลเชิงลึกจากการปฏิบัติจริงของอุตสาหกรรม ให้มุมมองที่มีพื้นฐานจากความเป็นจริงของภาคการขุด\\n\\nในฐานะมืออาชีพที่มีประสบการณ์กว่า 10 ปีในอุตสาหกรรมเทคโนโลยี ผู้เขียนเอกสารฉบับนี้ได้พัฒนาเครื่องขุด Bitcoin ASIC ชั้นนำของโลก (WhatsMiner), LTC/DOGE และ ETH Miners และมีบทบาทสำคัญในบริษัทต่างๆ เช่น MicroBT, BTC.COM และบริษัทไร้แผงวงจรอื่นๆ เขาเคยดำรงตำแหน่งสำคัญในบริษัทที่จดทะเบียนใน NASDAQ, HKSE และ NYSE ด้วยประสบการณ์มากมายในการสร้างความร่วมมือกับ TSMC, Texas Instruments, ARM และ Intel เขานำความรู้และความเชี่ยวชาญด้านการออกแบบ ASIC แบบเต็มรูปแบบสำหรับการขุด Bitcoin และสกุลเงินดิจิทัลมาสู่เอกสารฉบับนี้\\n\\n## ระเบียบวิธีและกระบวนการออกแบบ\\n\\n### ปรัชญาการออกแบบ\\n\\nวิธีการของเราในการออกแบบ ASIC แบบเต็มรูปแบบถูกขับเคลื่อนโดยการมุ่งเน้นที่การเพิ่มประสิทธิภาพ PPA (พลังงาน ประสิทธิภาพ และพื้นที่) โดยเฉพาะภายใต้สภาวะการทำงานที่มีแรงดันต่ำ ส่วนนี้จะอธิบายปรัชญาและวิธีการออกแบบของเรา:\\n\\n1. **สถาปัตยกรรมแบบท่อส่ง**: ใช้ประโยชน์จากคุณสมบัติของโครงสร้างท่อส่งสำหรับอัลกอริธึมการขุด ซึ่งมีลักษณะเป็นขั้นตอนที่มีการลงทะเบียนและตรรกะเชิงผสม โดยใช้สถาปัตยกรรมแบบท่อส่ง เราสามารถจัดการกับการทำงานความถี่สูงที่จำเป็นสำหรับการขุดสกุลเงินดิจิทัลได้อย่างมีประสิทธิภาพ\\n2. **การสร้างเน็ทลิสต์และการวางเซลล์แบบแมนนวล**: การเขียนสคริปต์อย่างละเอียดสำหรับการสร้างเน็ทลิสต์และการวางเซลล์แบบแมนนวลเพื่อเพิ่มประสิทธิภาพเส้นทางสำคัญ วิธีนี้ช่วยให้ควบคุมเวลาการทำงานได้อย่างแม่นยำและลดผลกระทบของปรสิต\\n3. **ห้องสมุดเซลล์แบบกำหนดเอง**: การพัฒนาเซลล์เฉพาะที่มีจำนวนทรานซิสเตอร์ที่เหมาะสมและฟีเจอร์ประหยัดพลังงานแบบไดนามิก เซลล์แบบกำหนดเองถูกออกแบบให้ทำงานที่แรงดันไฟฟ้าต่ำสุดเท่าที่จะเป็นไปได้ เพื่อให้แน่ใจว่าการใช้พลังงานน้อยที่สุด\\n\\n### การบรรลุประโยชน์ของ PPA\\n\\nกลยุทธ์รายละเอียดสำหรับการบรรลุประโยชน์ของ PPA ผ่านการออกแบบที่กำหนดเอง:\\n\\n1. **การออกแบบรีจิสเตอร์แบบกำหนดเอง**: การใช้รีจิสเตอร์หลายบิตและการออกแบบแบบ latch-based เพื่อลดการใช้พลังงานของสัญญาณนาฬิกาและปรับปรุงการยืมเวลา รีจิสเตอร์หลายบิตช่วยลดการใช้พลังงานของ clock tree และลดพื้นที่ทั้งหมด\\n2. **การวางตำแหน่งแบบแมนนวล**: การลดความยาวของสายไฟและปรับสมดุลเวลา setup และ hold เพื่อเพิ่มประสิทธิภาพโดยรวม การวางตำแหน่งแบบแมนนวลช่วยให้การควบคุมความล่าช้าของการเชื่อมต่อและการรบกวนระหว่างสัญญาณดีขึ้น ปรับปรุงความสมบูรณ์ของสัญญาณและลดการใช้พลังงาน\\n3. **การออกแบบเซลล์ที่ปรับให้เหมาะสม**: เซลล์ที่กำหนดเองถูกออกแบบให้ทำงานที่แรงดันไฟฟ้าต่ำ ลดการใช้พลังงานแบบไดนามิกและเพิ่มประสิทธิภาพสูงสุด โดยการปรับการออกแบบเซลล์ให้ตรงกับความต้องการเฉพาะของอัลกอริทึมการขุด เราสามารถบรรลุการปรับปรุงประสิทธิภาพได้อย่างมีนัยสำคัญ\\n\\n### ความน่าเชื่อถือภายใต้แรงดันไฟฟ้าต่ำ\\n\\nการทำให้มั่นใจถึงความน่าเชื่อถือของลอจิกเวลาแบบกำหนดเองที่ออกแบบไว้ที่แรงดันไฟฟ้าต่ำประกอบด้วย:\\n\\n1. **การจำลองที่แม่นยำ**: การจำลองระดับวงจรเพื่อตรวจสอบพฤติกรรมของเซลล์ที่กำหนดเองภายใต้เงื่อนไขเฉพาะ เครื่องมือเช่น SPICE ถูกใช้สำหรับการจำลองทางไฟฟ้าอย่างละเอียดเพื่อให้แน่ใจว่าเซลล์ทำงานได้ถูกต้องภายใต้ทุกมุม PVT (Process, Voltage, Temperature)\\n2. **ความสม่ำเสมอในการวางตำแหน่ง**: การวางตำแหน่งแบบแมนนวลเพื่อให้แน่ใจถึงความสม่ำเสมอและลดความแปรปรวน โดยการควบคุมการวางผังทางกายภาพ เราสามารถลดผลกระทบของความแปรปรวนในกระบวนการและรับประกันประสิทธิภาพที่สม่ำเสมอ\\n3. **การปรับเทียบ PVT อย่างแม่นยำ**: การตรวจสอบกับการแปรปรวนของกระบวนการ แรงดันไฟฟ้า และอุณหภูมิ มีการทดสอบและการปรับเทียบอย่างกว้างขวางเพื่อให้แน่ใจถึงความทนทานของการออกแบบในสภาพการทำงานต่างๆ\\n\\n## กรณีศึกษาและผลลัพธ์\\n\\nนำเสนอข้อมูลจริงและกรณีศึกษาจากการผลิต full mask tape-outs:\\n\\n| โปรเจกต์ | กระบวนการ | ประสิทธิภาพแรงดัน/พลังงาน | อัลกอริทึม |\\n| -------- | ---------- | -------------------------- | ----------- |\\n| SC       | TSMC 28nm  | 0.45V, 257J/T              | Blake2b     |\\n| DCR      | TSMC 28nm  | 0.45V, 150J/T              | Blake256    |\\n| DASH     | TSMC 16nm  | 0.38V, 6.2J/G              | X11         |\\n| BTC      | TSMC 16nm  | 0.38V, 65J/T               | SHA-256d    |\\n| BTC      | TSMC 7nm   | 0.30V, 37J/T               | SHA-256d    |\\n| BTC      | Samsung 8nm| 0.31V, 45J/T               | SHA-256d    |\\n| BTC      | SMIC N+1   | 0.30V, 35J/T               | SHA-256d    |\\n\\nผลลัพธ์เหล่านี้แสดงให้เห็นถึงการเพิ่มขึ้นอย่างมากในประสิทธิภาพและประสิทธิผลที่สามารถทำได้ผ่านการออกแบบที่กำหนดเองของเรา\\n\\n## การบูรณาการและการตรวจสอบ\\n\\n### Mixed-Cell Signoff\\n\\n- **การบูรณาการเซลล์แบบกำหนดเอง**: เซลล์ที่กำหนดเองถูกรวมเข้ากับเซลล์มาตรฐานจาก TSMC และโรงงานผลิตอื่นๆ เพื่อให้แน่ใจถึงความเข้ากันได้และประสิทธิภาพ เซลล์ที่กำหนดเองได้รับการกำหนดลักษณะและตรวจสอบให้ตรงกับข้อกำหนดของไลบรารีเซลล์มาตรฐาน เพื่อให้การบูรณาการเป็นไปอย่างราบรื่น\\n- **กลยุทธ์การ signoff**: กลยุทธ์สำหรับการทำให้แน่ใจถึงความเข้ากันได้และประสิทธิภาพที่ราบรื่นประกอบด้วยการตรวจสอบ DRC (Design Rule Check) และ LVS (Layout Versus Schematic) อย่างละเอียด รวมถึงการวิเคราะห์เวลาและพลังงานโดยใช้เครื่องมือ EDA (Electronic Design Automation) มาตรฐานอุตสาหกรรม\\n\\n### การออกแบบร่วมดิจิทัลและอนาล็อก\\n\\n- **เทคนิคการบูรณาการ**: การบูรณาการส่วนประกอบดิจิทัลและอนาล็อกเพื่อเพิ่มประสิทธิภาพของชิปโดยรวม เทคนิคเช่นการตรวจสอบสัญญาณผสมและการจำลองร่วมถูกใช้เพื่อให้แน่ใจว่ามีการบูรณาการและการทำงานที่ถูกต้อง\\n- **วิธีการตรวจสอบ**: วิธีการเพื่อให้แน่ใจว่ามีความทนทานภายใต้สภาวะการทำงานที่แตกต่างกันรวมถึงการวิเคราะห์มุม การจำลองมอนติคาร์โล และการตรวจสอบความน่าเชื่อถือเพื่อแก้ไขปัญหาการเสื่อมสภาพและการย้ายตำแหน่งของอิเล็กตรอน\\n\\n## บทสรุป\\n\\nการออกแบบ ASIC แบบเต็มรูปแบบเสนอข้อได้เปรียบที่สำคัญสำหรับการขุด Bitcoin และสกุลเงินดิจิทัล โดยให้ประสิทธิภาพ พลังงาน และความน่าเชื่อถือที่เหนือกว่า โดยการเปิดเผยความลับของการออกแบบ ASIC ที่กำหนดเองระดับสูง บทความนี้เน้นถึงวิธีการและนวัตกรรมที่ทำให้ผู้นำในอุตสาหกรรมโดดเด่น เมื่อการขุดสกุลเงินดิจิทัลยังคงพัฒนาไป ASIC แบบกำหนดเองจะมีบทบาทสำคัญในการขับเคลื่อนฮาร์ดแวร์การขุดประสิทธิภาพสูงรุ่นต่อไป\\n\\n[เวอร์ชัน PDF ของเอกสาร](/docs/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining.pdf)\\n"},{"lang":"th","group":"blog","slug":"blog/get-current-commit-id-of-git-and-update-to-package-json","frontmatter":{"title":"รับรหัสคอมมิตปัจจุบันของ Git และอัปเดตไปยัง package.json","date":"2021-08-21T09:19:58.875Z","draft":false,"author":"Tan Shuai","tags":["Git","Package.json","Node.js"],"categories":["การพัฒนาซอฟต์แวร์"]},"content":"\\nเมื่อพัฒนาโครงการ Node.js คุณอาจต้องการติดตาม ID คอมมิทปัจจุบันของที่เก็บ Git ของคุณ ข้อมูลนี้สามารถเป็นประโยชน์ในการดีบัก กำหนดเวอร์ชัน หรือการปรับใช้ วิธีหนึ่งที่จะทำได้คือการอัปเดตไฟล์ `package.json` ด้วย ID คอมมิทปัจจุบันในระหว่างกระบวนการสร้าง บทความนี้จะแนะนำขั้นตอนในการรับ ID คอมมิทปัจจุบันของ Git และอัปเดตมันลงในไฟล์ `package.json` โดยใช้ Node.js\\n\\n```bash\\n\\"predev\\": \\"node ./node_modules/json/lib/json.js -I -f package.json -e \\\\\\\\\\\\\\"this.commit=\'$(git rev-parse --short HEAD)\'\\\\\\\\\\\\\\"\\",\\n"},{"lang":"th","group":"blog","slug":"blog/migrate-a-github-lfs-git-large-file-storage-repository-to-aws-codecommit","frontmatter":{"title":"ย้ายที่เก็บข้อมูล GitHub LFS (Git Large File Storage) ไปยัง AWS CodeCommit","date":"2022-02-09T09:36:57.481Z","draft":false,"author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["การพัฒนาซอฟต์แวร์"]},"content":"\\nฉันเพิ่งย้ายที่เก็บของ GitHub หนึ่งในที่เก็บของของฉันที่ใช้ Git Large File Storage (LFS) ไปยัง AWS CodeCommit ฉันคิดว่าฉันจะแบ่งปันกระบวนการกับคุณในกรณีที่คุณกำลังมองหาวิธีการทำเช่นเดียวกัน นี่คือคู่มือแบบขั้นตอนตามประสบการณ์ของฉัน\\n\\n## ข้อกำหนดเบื้องต้น\\n\\nก่อนที่เราจะเริ่มต้น ตรวจสอบให้แน่ใจว่าคุณได้ติดตั้งเครื่องมือต่อไปนี้:\\n\\n- Git\\n- Git LFS\\n- AWS CLI\\n\\n## คู่มือแบบขั้นตอน\\n\\n### 1. โคลนที่เก็บ\\n\\nก่อนอื่น ให้โคลนที่เก็บ GitHub ของคุณโดยใช้ตัวเลือก `--mirror` ซึ่งจะสร้างโคลนแบบเบียร์ของที่เก็บ รวมถึงทุกสาขาและแท็กทั้งหมด\\n\\n```zsh\\ngit clone --mirror https://github.com/tanshuai/designs.git designs\\n```\\n\\n### 2. ตรวจสอบไฟล์ LFS\\n\\nถัดไป ให้รายการไฟล์ทั้งหมดที่จัดการโดย Git LFS เพื่อให้แน่ใจว่าทุกอย่างอยู่ในที่ของมัน\\n\\n```zsh\\ngit lfs ls-files\\n```\\n\\nคุณควรเห็นบางอย่างเช่นนี้:\\n\\n```\\ncadfa0bc9e * Brochure-Trifold-Draft.ai\\naf9b8b8a1c * Brochure-Trifold-English.ai\\n27bb5f4e61 * Brochure-Trifold.ai\\n```\\n\\n### 3. ย้ายไฟล์ LFS\\n\\nตอนนี้ ส่งออกไฟล์ LFS ขั้นตอนนี้ทำให้แน่ใจว่าพวกมันเป็นส่วนหนึ่งของประวัติศาสตร์ที่เก็บของคุณ\\n\\n```zsh\\ngit lfs migrate export --include=\\"*.ai\\" --everything\\n```\\n\\nคุณจะเห็นข้อความความคืบหน้าบางอย่างเช่นนี้:\\n\\n```\\nmigrate: Sorting commits: ..., done.\\nmigrate: Rewriting commits: 100% (20/20), done.\\nmaster\\t98a3c48d85... -> 82f8873b41...\\nmigrate: Updating refs: ..., done.\\nmigrate: checkout: ..., done.\\nprune: 3 local object(s), 0 retained, done.\\ncadfa0bc9e... (133 MB)\\n27bb5f4e61... (131 MB)\\naf9b8b8a1c... (130 MB), done.\\nprune: Deleting objects: 100% (3/3), done.\\n```\\n\\n### 4. ทำความสะอาด LFS\\n\\nลบข้อมูลการติดตาม Git LFS และถอนการติดตั้ง Git LFS\\n\\n```zsh\\ngit lfs ls-files\\ngit rm .gitattributes -f\\ngit lfs uninstall\\n```\\n\\n### 5. ส่งไปที่ AWS CodeCommit\\n\\nสุดท้าย ส่งที่เก็บของคุณไปยัง AWS CodeCommit\\n\\n```zsh\\ngit push https://git-codecommit.us-east-2.amazonaws.com/v1/repos/designs --all\\n```\\n\\nนั่นคือทั้งหมด! ด้วยการทำตามขั้นตอนเหล่านี้ ฉันสามารถย้ายที่เก็บ GitHub LFS ของฉันไปยัง AWS CodeCommit ได้สำเร็จ ไฟล์ขนาดใหญ่และประวัติที่เก็บยังคงถูกเก็บไว้อย่างสมบูรณ์แบบ\\n\\n## สรุป\\n\\nการย้ายที่เก็บ GitHub ที่ใช้ Git LFS ไปยัง AWS CodeCommit ค่อนข้างตรงไปตรงมา หากคุณทำตามขั้นตอนที่ถูกต้อง หากคุณมีคำถามหรือประสบปัญหา เอกสาร [AWS CodeCommit](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) และ [Git LFS](https://git-lfs.github.com/) เป็นแหล่งข้อมูลที่ดี\\n\\nฉันหวังว่าคุณจะพบคู่มือนี้มีประโยชน์ ขอให้เขียนโค้ดสนุก!\\n"},{"lang":"th","group":"blog","slug":"blog/reset-restore-all-subdirectories-of-git","frontmatter":{"title":"รีเซ็ต/คืนค่าไดเรกทอรีย่อยทั้งหมดของ Git","date":"2021-09-22T08:33:49.201Z","draft":false,"author":"Tan Shuai","tags":["Git","การควบคุมเวอร์ชัน"],"categories":["การพัฒนาซอฟต์แวร์"]},"content":"\\nการจัดการ Git repository อย่างมีประสิทธิภาพมักจะต้องการการรีเซ็ตหรือกู้คืนไดเรกทอรีย่อยเพื่อรักษาฐานโค้ดให้สะอาดและใช้งานได้ดี คู่มือนี้ให้วิธีการทีละขั้นตอนเพื่อรีเซ็ตหรือกู้คืนไดเรกทอรีย่อยทั้งหมดใน Git repository\\n\\n## การรีเซ็ตไดเรกทอรีย่อย\\n\\nคำสั่ง Git ต่อไปนี้จะลบไฟล์และไดเรกทอรีที่ไม่ได้ติดตามทั้งหมดออกจาก repository สิ่งนี้มีประโยชน์สำหรับการล้างไฟล์ที่ไม่จำเป็นก่อนการรีเซ็ตหรือกู้คืน\\n\\n```bash\\ngit clean -xfdf -- .\\n```\\n\\n### การอธิบายคำสั่ง:\\n\\n- `-x`: ลบไฟล์ที่ไม่ได้ติดตามทั้งหมด รวมถึงไฟล์ที่ถูกเพิกเฉยโดย `.gitignore`\\n- `-f`: บังคับการลบไฟล์\\n- `-d`: ลบไดเรกทอรีที่ไม่ได้ติดตาม\\n- `-- .`: ใช้คำสั่งกับไดเรกทอรีปัจจุบันและไดเรกทอรีย่อยทั้งหมด\\n\\n## การกู้คืนไดเรกทอรีย่อย\\n\\nเพื่อกู้คืนไฟล์ทั้งหมดใน repository ให้กลับไปอยู่ในสถานะที่ถูกคอมมิตล่าสุด ให้ใช้คำสั่งต่อไปนี้:\\n\\n```bash\\ngit checkout {HEAD OR BRANCH} -- .\\n```\\n\\n### การอธิบายคำสั่ง:\\n\\n- `{HEAD OR BRANCH}`: แทนที่ด้วย `HEAD` เพื่อรีเซ็ตไปยังคอมมิตล่าสุดหรือระบุชื่อสาขาเพื่อรีเซ็ตไปยังสาขาเฉพาะ\\n- `-- .`: ใช้คำสั่งกับไดเรกทอรีปัจจุบันและไดเรกทอรีย่อยทั้งหมด\\n\\nโดยการใช้คำสั่งเหล่านี้ คุณสามารถมั่นใจได้ว่า repository ของคุณปลอดจากไฟล์ที่ไม่ต้องการและไฟล์ทั้งหมดถูกกู้คืนไปยังสถานะที่ถูกคอมมิต กระบวนการนี้ช่วยรักษาฐานโค้ดให้สะอาดและเป็นระเบียบ อำนวยความสะดวกในการทำงานร่วมกันและการพัฒนา\\n\\nสามารถปรับแต่งคู่มือนี้ตามความต้องการและความชอบเฉพาะของคุณได้ สำหรับการดำเนินการ Git ที่ซับซ้อนกว่า โปรดอ้างอิง [เอกสารอย่างเป็นทางการของ Git](https://git-scm.com/doc)\\n"},{"lang":"th","group":"blog","slug":"blog/ultra-low-cost-ddr3-ddr4-lpddr3-lpddr4-memory-test-system","frontmatter":{"title":"ระบบทดสอบหน่วยความจำ DDR3, DDR4, LP-DDR3 & LP-DDR4 ที่มีต้นทุนต่ำมาก","description":"ค้นพบระบบทดสอบหน่วยความจำที่มีต้นทุนต่ำมากสำหรับเทคโนโลยี DDR3, DDR4, LP-DDR3 และ LP-DDR4 ราคาประมาณ 200,000 ดอลลาร์สหรัฐ มีการทดสอบความเร็วสูง, ความหลากหลาย, คุณสมบัติขั้นสูง, และการใช้พลังงานต่ำ เหมาะสำหรับธุรกิจที่ต้องการโซลูชันการทดสอบหน่วยความจำที่เชื่อถือได้และคุ้มค่า","date":"2024-06-01T00:00:00.000Z","categories":["เซมิคอนดักเตอร์"],"author":"Tan Shuai","tags":["DDR3","DDR4","LP-DDR3","LP-DDR4","ระบบทดสอบหน่วยความจำ"],"draft":false},"content":"\\nหากคุณเป็นเหมือนฉัน ที่มองหาวิธีแก้ปัญหาที่คุ้มค่าโดยไม่ลดทอนคุณภาพ คุณจะต้องชอบสิ่งที่ฉันจะแบ่งปันในวันนี้ ในโลกเทคโนโลยีที่เคลื่อนไหวอย่างรวดเร็วของเรา การทำให้แน่ใจว่าหน่วยความจำของอุปกรณ์เราทำงานได้ดีเป็นสิ่งสำคัญ ตัวเลือกระดับไฮเอนด์เช่น T5503/T5503HS2 นั้นยอดเยี่ยม แต่ก็มีราคาสูง โชคดีที่ Zeeis ได้ก้าวเข้ามาด้วยระบบทดสอบหน่วยความจำต้นทุนต่ำที่ไม่ลดทอนประสิทธิภาพ\\n\\n## ทำไมเรื่องนี้ถึงสำคัญ\\n\\nเมื่อฉันได้ยินเกี่ยวกับระบบทดสอบหน่วยความจำของ Zeeis ครั้งแรก ฉันรู้สึกสนใจ ระบบนี้ถูกออกแบบมาเพื่อจัดการกับเทคโนโลยีหน่วยความจำ DDR3, DDR4, LP-DDR3, และ LP-DDR4 ไม่ว่าคุณจะทำงานกับระบบเก่าหรือเทคโนโลยีล่าสุด ระบบนี้รองรับทุกอย่าง\\n\\n### การทดสอบความเร็วสูง\\n\\nหนึ่งในคุณสมบัติที่โดดเด่นคือความสามารถในการรองรับอัตราการส่งข้อมูลตั้งแต่ 800 ถึง 3200 MT/s สำหรับ DDR3 และ DDR4 มันสามารถประเมินโมดูลหน่วยความจำที่ความเร็วสัญญาณนาฬิกาสูงถึง 1600 MHz นั่นหมายถึงการทดสอบที่ละเอียดและเชื่อถือได้ ทำให้อุปกรณ์ของคุณทำงานได้ดีที่สุด\\n\\n### ความอเนกประสงค์\\n\\nความอเนกประสงค์ของระบบนี้เป็นตัวเปลี่ยนเกม มันรองรับมาตรฐานหน่วยความจำหลายแบบ ทำให้เหมาะสำหรับการใช้งานที่หลากหลาย ตั้งแต่อุปกรณ์อิเล็กทรอนิกส์สำหรับผู้บริโภคไปจนถึงการคำนวณประสิทธิภาพสูง อีกทั้งยังสามารถอัพเกรดได้ง่ายเพื่อรองรับเทคโนโลยีหน่วยความจำใหม่ ๆ\\n\\n### ความคุ้มค่า\\n\\nตอนนี้เรามาพูดถึงราคา ที่ประมาณ 200,000 ดอลลาร์สหรัฐ ระบบนี้ให้ผลตอบแทนการลงทุนที่ยอดเยี่ยม มันมีราคาไม่แพงพอสำหรับธุรกิจขนาดเล็กถึงขนาดกลาง ทำให้มีความสามารถในการทดสอบที่ยอดเยี่ยมโดยไม่ต้องเสียค่าใช้จ่ายสูง\\n\\n### คุณสมบัติขั้นสูง\\n\\nระบบนี้มาพร้อมกับอัลกอริธึมการทดสอบขั้นสูง รวมถึงตัวสร้างรูปแบบอัลกอริธึมในตัว (ALPG) สิ่งนี้ทำให้มั่นใจได้ถึงการประเมินหน่วยความจำที่แม่นยำและเชื่อถือได้ ทำให้แต่ละโมดูลผ่านมาตรฐานประสิทธิภาพที่เข้มงวด\\n\\n### การใช้พลังงานต่ำ\\n\\nที่น่าประทับใจอีกอย่างคือการใช้พลังงานต่ำ มันสอดคล้องกับแนวโน้มที่เห็นในเทคโนโลยีหน่วยความจำ LP-DDR3 และ LP-DDR4 โดยทำงานที่แรงดันไฟฟ้าต่ำ ไม่เพียงลดค่าใช้จ่ายด้านพลังงาน แต่ยังลดการปล่อยความร้อน ทำให้เป็นตัวเลือกที่เป็นมิตรกับสิ่งแวดล้อม\\n\\n## ทำไมต้องเลือก Zeeis?\\n\\n### การปรับขยายได้\\n\\nระบบของ Zeeis ถูกออกแบบมาโดยคำนึงถึงการปรับขยาย เมื่อมีเทคโนโลยีหน่วยความจำใหม่ ๆ เกิดขึ้น ระบบสามารถอัพเกรดได้ง่าย ทำให้ใช้งานได้ในระยะยาวและลดความจำเป็นในการเปลี่ยนบ่อย\\n\\n### การสนับสนุนและเอกสาร\\n\\nอีกสิ่งหนึ่งที่น่ายกย่องคือการสนับสนุนและเอกสารที่ครอบคลุมของ Zeeis ไม่ว่าคุณจะเป็นมืออาชีพที่มีประสบการณ์หรือใหม่กับการทดสอบหน่วยความจำ คู่มือรายละเอียดและบริการลูกค้าที่ตอบสนองของพวกเขาช่วยให้ประสบการณ์ราบรื่น\\n\\n### การตอบสนองความต้องการของตลาด\\n\\nด้วยความต้องการหน่วยความจำความเร็วสูงที่เพิ่มขึ้นในทุกสิ่งตั้งแต่สมาร์ทโฟนไปจนถึงศูนย์ข้อมูล การมีโซลูชันการทดสอบหน่วยความจำที่เชื่อถือได้และคุ้มค่าเป็นสิ่งสำคัญ ระบบของ Zeeis ตอบสนองความต้องการเหล่านี้ ทำให้มั่นใจได้ว่าผลิตภัณฑ์ของคุณพร้อมสำหรับตลาดและทำงานได้ดีในแอปพลิเคชันจริง\\n\\n## สรุป\\n\\nโดยสรุป ระบบทดสอบหน่วยความจำ DDR3, DDR4, LP-DDR3 & LP-DDR4 ต้นทุนต่ำพิเศษของ Zeeis เป็นตัวเลือกที่ยอดเยี่ยมสำหรับผู้ที่ต้องการโซลูชันการทดสอบหน่วยความจำที่เชื่อถือได้\\n\\nหากคุณสนใจที่จะเพิ่มศักยภาพในการทดสอบของคุณด้วยระบบที่ออกแบบมาสำหรับเทคโนโลยีหน่วยความจำแห่งอนาคต โปรดติดต่อฉันเพื่อขอข้อมูลเพิ่มเติมได้ที่ [i@tanshuai.com](mailto:i@tanshuai.com)\\n\\nขอให้ทดสอบอย่างมีความสุข!\\n"},{"lang":"th","group":"blog","slug":"blog/usr-bin-sudo-must-be-owned-by-uid-0-and-have-the-setuid-bit-set-on-ubuntu-20-04","frontmatter":{"title":"/usr/bin/sudo ต้องเป็นเจ้าของโดย uid 0 และตั้งค่า setuid บน Ubuntu 20.04","date":"2021-10-08T13:07:25.406Z","draft":false,"author":"Tan Shuai","tags":["Ubuntu","ลินุกซ์","ซูโด"],"categories":["ลินุกซ์"]},"content":"\\nหากคุณพบข้อความแสดงข้อผิดพลาด \\"/usr/bin/sudo ต้องเป็นเจ้าของโดย uid 0 และมี setuid bit ตั้งค่าไว้\\" บน Ubuntu 20.04 ให้ทำตามขั้นตอนเหล่านี้เพื่อแก้ไขปัญหา\\n\\n1. ระหว่างกระบวนการบูต ให้กดปุ่ม \'ESC\' เพื่อเข้าสู่เมนู GRUB\\n\\n![GRUB Screen](/images/content/wx20211008-210752.png \\"GRUB Screen\\")\\n\\n2. เลือกตัวเลือกแรก “Ubuntu” และกดปุ่ม \'e\' เพื่อแก้ไขพารามิเตอร์การบูต\\n\\n![Edit Boot Parameters](/images/content/wx20211008-210841.png \\"Edit Boot Parameters\\")\\n\\n3. เพิ่มสตริงต่อไปนี้ในบรรทัดที่เริ่มต้นด้วย ‘linux’ เพื่อบูตเข้าสู่โหมดกู้ภัย:\\n\\n```bash\\nsystemd.unit=rescue.target\\n```\\n\\n4. เมื่อเข้าสู่โหมดกู้ภัย ให้เรียกใช้คำสั่งต่อไปนี้เพื่อกู้คืนสิทธิ์และการเป็นเจ้าของที่ถูกต้องสำหรับ `/usr/bin/sudo`:\\n\\n```bash\\npkexec chmod a=rx,u+ws /usr/bin/sudo\\n```\\n\\nคำสั่งนี้จะตั้งค่าสิทธิ์ที่จำเป็นและทำให้แน่ใจว่า `sudo` เป็นของผู้ใช้ root และมี setuid bit ตั้งค่าไว้\\n\\nโดยทำตามขั้นตอนเหล่านี้ คุณควรจะแก้ไขปัญหาและคืนค่าการทำงานที่ถูกต้องให้กับคำสั่ง `sudo` บนระบบ Ubuntu ของคุณ\\n"},{"lang":"vi","group":"blog","slug":"blog/aws-codecommit-the-githubs-large-file-storage-git-lfs-free-alternative","frontmatter":{"title":"AWS CodeCommit： Giải ph\xe1p thay thế miễn ph\xed cho GitHub Large File Storage (Git LFS)","description":"Kh\xe1m ph\xe1 c\xe1ch AWS CodeCommit đ\xf3ng vai tr\xf2 l\xe0 một giải ph\xe1p thay thế hiệu quả v\xe0 tiết kiệm chi ph\xed cho GitHub Large File Storage (Git LFS). B\xe0i viết n\xe0y đề cập đến những hạn chế của Git LFS, những lợi \xedch khi sử dụng AWS CodeCommit cho lưu trữ tệp lớn, v\xe0 cung cấp hướng dẫn từng bước để di chuyển từ Git LFS sang CodeCommit. N\xe2ng cao quy tr\xecnh ph\xe1t triển của bạn với cơ sở hạ tầng mở rộng v\xe0 bảo mật của AWS.","date":"2022-02-09T00:00:00.000Z","author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["Ph\xe1t Triển Phần Mềm"],"draft":false},"content":"\\nAWS CodeCommit cung cấp một giải ph\xe1p thay thế mạnh mẽ cho dịch vụ Lưu trữ Tệp Lớn của GitHub (Git LFS), mang lại giải ph\xe1p hiệu quả cho việc quản l\xfd c\xe1c tệp lớn trong kho Git của bạn.\\n\\n## Tại Sao Bạn N\xean Xem Lại Việc Sử Dụng Git LFS\\n\\nMặc d\xf9 Git LFS l\xe0 một lựa chọn phổ biến để xử l\xfd c\xe1c tệp lớn trong kho Git, nhưng n\xf3 c\xf3 những hạn chế v\xe0 th\xe1ch thức ri\xeang. Git LFS y\xeau cầu c\xe0i đặt v\xe0 quản l\xfd th\xeam, điều n\xe0y c\xf3 thể l\xe0m phức tạp quy tr\xecnh ph\xe1t triển. Ngo\xe0i ra, chi ph\xed lưu trữ v\xe0 băng th\xf4ng li\xean quan đến Git LFS c\xf3 thể tăng nhanh, đặc biệt đối với c\xe1c dự \xe1n c\xf3 nhiều tệp lớn hoặc sự hợp t\xe1c mở rộng.\\n\\n## Tại Sao Dịch Vụ Lưu Trữ Tệp Lớn của GitHub Kh\xf4ng Ho\xe0n Hảo\\n\\nDịch vụ Lưu trữ Tệp Lớn của GitHub, d\xf9 hữu \xedch, c\xf3 những nhược điểm nội tại. Mối quan t\xe2m ch\xednh l\xe0 chi ph\xed li\xean quan đến lưu trữ v\xe0 băng th\xf4ng, điều n\xe0y c\xf3 thể trở n\xean cấm kỵ đối với c\xe1c dự \xe1n lớn. Hơn nữa, quản l\xfd Git LFS c\xf3 thể cồng kềnh, y\xeau cầu c\xe1c nh\xe0 ph\xe1t triển c\xe0i đặt v\xe0 cấu h\xecnh kh\xe1ch h\xe0ng LFS, theo d\xf5i c\xe1c tệp cụ thể v\xe0 xử l\xfd c\xe1c xung đột hợp nhất tiềm ẩn do việc xử l\xfd c\xe1c tệp lớn ri\xeang biệt với phần c\xf2n lại của kho.\\n\\n## Tại Sao N\xean Sử Dụng AWS CodeCommit Để Lưu Trữ C\xe1c Tệp Lớn Trong Git\\n\\nAWS CodeCommit cung cấp một giải ph\xe1p thay thế hấp dẫn để lưu trữ c\xe1c tệp lớn trong kho Git m\xe0 kh\xf4ng cần Git LFS. CodeCommit l\xe0 dịch vụ kiểm so\xe1t nguồn ho\xe0n to\xe0n được quản l\xfd, t\xedch hợp liền mạch với c\xe1c dịch vụ kh\xe1c của AWS, cung cấp khả năng mở rộng, bảo mật v\xe0 hiệu quả chi ph\xed mạnh mẽ. Bằng c\xe1ch sử dụng CodeCommit, c\xe1c nh\xe0 ph\xe1t triển c\xf3 thể tr\xe1nh được chi ph\xed quản l\xfd Git LFS trong khi tận hưởng cơ sở hạ tầng mạnh mẽ của AWS v\xe0 m\xf4 h\xecnh gi\xe1 trả tiền theo mức sử dụng.\\n\\n## Những Hạn Chế Của AWS CodeCommit So Với GitHub\\n\\nMặc d\xf9 c\xf3 những ưu điểm, AWS CodeCommit cũng c\xf3 một số hạn chế so với GitHub. Sự hỗ trợ cộng đồng rộng r\xe3i, hệ sinh th\xe1i phong ph\xfa của c\xe1c t\xedch hợp v\xe0 c\xe1c t\xednh năng ti\xean tiến như GitHub Actions v\xe0 GitHub Pages của GitHub c\xf3 thể kh\xf4ng được sao ch\xe9p đầy đủ trong CodeCommit. Ngo\xe0i ra, c\xe1c nh\xe0 ph\xe1t triển đ\xe3 quen với giao diện người d\xf9ng v\xe0 c\xf4ng cụ hợp t\xe1c của GitHub c\xf3 thể thấy rằng chuyển đổi sang CodeCommit đ\xf2i hỏi một số điều chỉnh.\\n\\n## C\xe1ch Di Chuyển Kho Git LFS Sang CodeCommit\\n\\nViệc di chuyển một kho Git LFS sang CodeCommit bao gồm một số bước. Đầu ti\xean, đảm bảo tất cả c\xe1c tệp lớn được theo d\xf5i đ\xfang c\xe1ch trong kho Git LFS của bạn. Tiếp theo, sao ch\xe9p kho v\xe0 loại bỏ cấu h\xecnh theo d\xf5i Git LFS. Sau đ\xf3, tạo một kho mới trong AWS CodeCommit v\xe0 đẩy kho cục bộ của bạn l\xean đ\xf3. T\xe0i liệu chi tiết v\xe0 c\xe1c kịch bản c\xf3 sẵn để đơn giản h\xf3a quy tr\xecnh n\xe0y, đảm bảo qu\xe1 tr\xecnh chuyển đổi su\xf4n sẻ m\xe0 kh\xf4ng mất dữ liệu hoặc gi\xe1n đoạn.\\n\\n## Một Giải Ph\xe1p Tốt Hơn\\n\\nĐối với c\xe1c đội v\xe0 dự \xe1n phụ thuộc nhiều v\xe0o Git LFS, kh\xe1m ph\xe1 AWS CodeCommit như một giải ph\xe1p thay thế c\xf3 thể mang lại những lợi \xedch đ\xe1ng kể. Sự t\xedch hợp liền mạch của CodeCommit với hệ sinh th\xe1i AWS, c\xf9ng với t\xednh hiệu quả về chi ph\xed v\xe0 khả năng mở rộng của n\xf3, l\xe0m cho n\xf3 trở th\xe0nh một lựa chọn hấp dẫn để quản l\xfd c\xe1c tệp lớn trong kho Git. Bằng c\xe1ch giảm thiểu c\xe1c th\xe1ch thức li\xean quan đến Git LFS, CodeCommit gi\xfap c\xe1c đội ph\xe1t triển tập trung v\xe0o việc viết m\xe3 v\xe0 hợp t\xe1c, th\xfac đẩy năng suất v\xe0 đổi mới.\\n\\nKết luận, AWS CodeCommit cung cấp một giải ph\xe1p thay thế khả thi, tiết kiệm chi ph\xed v\xe0 hiệu quả cho dịch vụ Lưu trữ Tệp lớn của GitHub. Bằng c\xe1ch tận dụng cơ sở hạ tầng mạnh mẽ của AWS, c\xe1c nh\xe0 ph\xe1t triển c\xf3 thể quản l\xfd c\xe1c tệp lớn trong kho lưu trữ Git một c\xe1ch dễ d\xe0ng, tối ưu h\xf3a quy tr\xecnh l\xe0m việc v\xe0 giảm chi ph\xed.\\n"},{"lang":"vi","group":"blog","slug":"blog/check-voltage-current-on-macos-for-power-adapter","frontmatter":{"title":"Kiểm tra Điện \xe1p & D\xf2ng điện tr\xean MacOS cho Bộ chuyển đổi Nguồn","meta_title":"Kiểm tra Điện \xe1p & D\xf2ng điện tr\xean MacOS cho Bộ chuyển đổi Nguồn","date":"2022-02-14T00:00:00.000Z","author":"Tan Shuai","tags":["MacOS","Bộ chuyển đổi Nguồn","Điện \xe1p","D\xf2ng điện"],"categories":["MacOS"],"draft":false},"content":"\\nKhi bạn đang sử dụng MacBook, bạn c\xf3 thể muốn kiểm tra điện \xe1p v\xe0 d\xf2ng điện của bộ sạc. Đ\xe2y l\xe0 c\xe1ch đơn giản để kiểm tra điện \xe1p v\xe0 d\xf2ng điện của bộ sạc tr\xean MacOS.\\n\\nMở Terminal.app v\xe0 nhập lệnh:\\n\\n`ioreg -l -n AppleSmartBattery -r |grep AppleRawAdapterDetails`\\n\\nBạn sẽ nhận được c\xe1c th\xf4ng tin sau bao gồm d\xf2ng điện v\xe0 điện \xe1p:\\n\\n```json\\n\\"AppleRawAdapterDetails\\" = ({\\"IsWireless\\"=No,\\"AdapterID\\"=0,\\"FamilyCode\\"=18446744073172697098,\\"Watts\\"=89,**\\"Current\\"=4450**,\\"PMUConfiguration\\"=4448,**\\"Voltage\\"=20000**})\\n"},{"lang":"vi","group":"blog","slug":"blog/convert-markdown-academic-paper-pdf-macos","frontmatter":{"title":"Chuyển đổi nhanh Markdown sang PDF phong c\xe1ch học thuật tr\xean macOS","meta_title":"Chuyển đổi Markdown sang PDF phong c\xe1ch học thuật tr\xean macOS với Pandoc","description":"T\xecm hiểu c\xe1ch chuyển đổi t\xe0i liệu Markdown sang PDF phong c\xe1ch học thuật tr\xean macOS bằng c\xe1ch sử dụng Pandoc v\xe0 BasicTeX. Phương ph\xe1p nhanh ch\xf3ng v\xe0 đơn giản n\xe0y ho\xe0n hảo để tạo c\xe1c tệp PDF chuy\xean nghiệp cho b\xe0i b\xe1o học thuật.","date":"2022-03-03T00:00:00.000Z","categories":["Ph\xe1t triển Phần mềm"],"author":"Tan Shuai","tags":["Pandoc","LaTeX","PDF","B\xe0i b\xe1o","Markdown","macOS"],"draft":false},"content":"\\nTrong hướng dẫn n\xe0y, t\xf4i sẽ hướng dẫn bạn c\xe1ch chuyển đổi t\xe0i liệu Markdown th\xe0nh c\xe1c tệp PDF theo phong c\xe1ch học thuật tr\xean macOS bằng c\xe1ch sử dụng Pandoc v\xe0 BasicTeX. Phương ph\xe1p n\xe0y nhanh ch\xf3ng v\xe0 đơn giản, ho\xe0n hảo khi bạn cần tạo c\xe1c tệp PDF chuy\xean nghiệp cho c\xe1c b\xe0i b\xe1o học thuật của m\xecnh.\\n\\n### Bước 1: C\xe0i đặt Pandoc v\xe0 BasicTeX\\n\\nĐầu ti\xean, bạn cần c\xe0i đặt Pandoc v\xe0 BasicTeX tr\xean hệ thống macOS của m\xecnh. Đ\xe2y l\xe0 c\xe1ch t\xf4i đ\xe3 l\xe0m:\\n\\n1. **C\xe0i đặt Pandoc**: Mở Terminal v\xe0 nhập lệnh sau để c\xe0i đặt Pandoc:\\n\\n   ```bash\\n   brew install pandoc\\n   ```\\n\\n2. **C\xe0i đặt BasicTeX**: V\xec MacTeX kh\xe1 lớn, t\xf4i đ\xe3 chọn g\xf3i BasicTeX nhỏ hơn để tiết kiệm dung lượng. Chạy lệnh n\xe0y:\\n\\n   ```bash\\n   brew install --cask basictex\\n   ```\\n\\n3. **C\xe0i đặt c\xe1c g\xf3i LaTeX th\xf4ng dụng**: Để đảm bảo bạn c\xf3 c\xe1c g\xf3i cần thiết để tạo PDF, h\xe3y chạy c\xe1c lệnh sau:\\n   ```bash\\n   sudo tlmgr update --self\\n   sudo tlmgr install collection-basic collection-latex collection-latexrecommended collection-fontsrecommended\\n   ```\\n\\n### Bước 2: Chuẩn bị tệp Markdown của bạn\\n\\nTiếp theo, tạo tệp Markdown của bạn (v\xed dụ: `paper.md`). Đ\xe2y l\xe0 c\xe1ch t\xf4i thiết lập tệp của m\xecnh, bao gồm ti\xeau đề, t\xe1c giả, ng\xe0y th\xe1ng, v\xe0 th\xf4ng tin li\xean lạc:\\n\\n```markdown\\n---\\ntitle: \\"Your Paper Title\\"\\nsubtitle: \\"Optional Subtitle\\"\\ndate: \\\\today\\n\\nauthor: |\\n  | Your Name\\n  | your-email@tanshuai.com\\n  | www.tanshuai.com\\n---\\n\\n# Abstract\\n\\nYour abstract here.\\n\\n# Introduction\\n\\nYour introduction here.\\n\\n# Methodology\\n\\nYour methodology here.\\n\\n# Results\\n\\nYour results here.\\n\\n# Conclusion\\n\\nYour conclusion here.  \\n```\\n\\n### Bước 3: Chuyển đổi Markdown sang PDF bằng Pandoc\\n\\nB\xe2y giờ, bạn c\xf3 thể chuyển đổi tệp Markdown của m\xecnh sang PDF. T\xf4i đ\xe3 sử dụng lệnh sau trong Terminal:\\n\\n```bash\\npandoc paper.md -o paper.pdf --pdf-engine=xelatex\\n```\\n\\nLệnh n\xe0y sử dụng mẫu LaTeX mặc định của Pandoc để chuyển đổi tệp Markdown th\xe0nh PDF theo phong c\xe1ch học thuật, bao gồm th\xf4ng tin li\xean lạc của t\xe1c giả dưới t\xean của họ.\\n\\n### Mẹo bổ sung\\n\\n- **Mẫu LaTeX t\xf9y chỉnh**: Nếu bạn cần định dạng n\xe2ng cao hơn hoặc phong c\xe1ch cụ thể, bạn c\xf3 thể tạo hoặc tải xuống một mẫu LaTeX t\xf9y chỉnh v\xe0 sử dụng n\xf3 với Pandoc:\\n\\n  ```bash\\n  pandoc paper.md -o paper.pdf --pdf-engine=xelatex --template=your-template.tex\\n  ```\\n\\n- **Th\xeam metadata**: Bạn c\xf3 thể th\xeam th\xf4ng tin bổ sung v\xe0o ti\xeau đề metadata YAML, chẳng hạn như t\xf3m tắt hoặc từ kh\xf3a, v\xe0 sử dụng ch\xfang trong c\xe1c mẫu t\xf9y chỉnh.\\n\\n### Kết luận\\n\\nBằng c\xe1ch l\xe0m theo c\xe1c bước n\xe0y, bạn c\xf3 thể dễ d\xe0ng chuyển đổi c\xe1c t\xe0i liệu Markdown th\xe0nh c\xe1c tệp PDF theo phong c\xe1ch học thuật tr\xean macOS. Sử dụng Pandoc v\xe0 BasicTeX l\xe0m cho qu\xe1 tr\xecnh n\xe0y trở n\xean nhanh ch\xf3ng v\xe0 hiệu quả, ho\xe0n hảo khi bạn cần tạo c\xe1c t\xe0i liệu PDF chuy\xean nghiệp. Cho d\xf9 bạn đang chuẩn bị b\xe0i b\xe1o học thuật, b\xe1o c\xe1o kỹ thuật, hay c\xe1c t\xe0i liệu ch\xednh thức kh\xe1c, phương ph\xe1p n\xe0y hoạt động rất tốt. Việc bao gồm th\xf4ng tin li\xean lạc trong ti\xeau đề metadata th\xeam một n\xe9t chuy\xean nghiệp cho c\xe1c t\xe0i liệu của bạn.\\n\\nHy vọng bạn thấy hướng dẫn n\xe0y hữu \xedch! Nếu bạn c\xf3 bất kỳ c\xe2u hỏi n\xe0o hoặc gặp phải vấn đề g\xec, đừng ngần ngại li\xean hệ. Ch\xfac bạn viết vui vẻ!\\n"},{"lang":"vi","group":"blog","slug":"blog/electron-build-tools-error-error-failed-to-run-choco-install-pywin32-yes","frontmatter":{"title":"C\xf4ng Cụ X\xe2y Dựng Electron `LỖI Lỗi： Kh\xf4ng Thể Chạy \\"choco install pywin32 --yes\\"`","date":"2021-09-08T00:00:00.000Z","draft":false,"author":"Tan Shuai","tags":["Electron","C\xf4ng Cụ X\xe2y Dựng","PyWin32","Chocolatey","Win32"],"categories":["Ph\xe1t Triển Phần Mềm"]},"content":"\\nKhi l\xe0m việc với Electron Build Tools, bạn c\xf3 thể gặp lỗi li\xean quan đến việc c\xe0i đặt pywin32 qua Chocolatey. Điều n\xe0y c\xf3 thể g\xe2y kh\xf3 chịu, đặc biệt khi n\xf3 l\xe0 một phụ thuộc cần thiết cho dự \xe1n của bạn. Dưới đ\xe2y l\xe0 giải th\xedch chi tiết về vấn đề v\xe0 c\xe1c bước tiềm năng để giải quyết n\xf3.\\n\\n### Lỗi\\n\\nKhi khởi tạo một dự \xe1n Electron bằng Electron Build Tools, bạn c\xf3 thể thấy th\xf4ng b\xe1o lỗi sau:\\n\\n```bash\\nE:\\\\\\\\>e init main-testing -i testing --root=e:/src/electron\\nWARN A fixable error has occurred\\n--> A required dependency \\"pywin32\\" could not be located, it probably has to be installed.\\nDo you want build-tools to try fix this for you? [y/n]: y\\n\\nRunning \\"choco install pywin32 --yes\\"\\nERROR Error: Failed to run \\"choco install pywin32 --yes\\"\\n    at spawnSyncWithLog (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:11:11)\\n    at fix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:39:9)\\n    at maybeAutoFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\maybe-auto-fix.js:13:3)\\n    at whichAndFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\which.js:10:5)\\n    at checkPlatformDependencies (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:61:7)\\n    at Object.<anonymous> (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\e-init.js:165:3)\\n    at Module._compile (internal/modules/cjs/loader.js:1072:14)\\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1101:10)\\n    at Module.load (internal/modules/cjs/loader.js:937:32)\\n    at Function.Module._load (internal/modules/cjs/loader.js:778:12)\\n```\\n\\nLỗi n\xe0y thường xảy ra v\xec script c\xe0i đặt g\xf3i pywin32 kh\xf4ng thể t\xecm thấy c\xe1c tệp cần thiết tr\xean m\xe1y chủ từ xa. Điều n\xe0y dẫn đến lỗi 404, cho thấy tệp kh\xf4ng c\xf3 sẵn tại URL đ\xe3 chỉ định.\\n\\n### Hiểu Lỗi\\n\\nPhần ch\xednh của th\xf4ng b\xe1o lỗi l\xe0:\\n\\n```bash\\nERROR: The remote file either doesn\'t exist, is unauthorized, or is forbidden for url \'http://sourceforge.net/projects/pywin32/files/pywin32/Build%20219/pywin32-219.win-amd64-py3.9.exe/download\'. Exception calling \\"GetResponse\\" with \\"0\\" argument(s): \\"The remote server returned an error: (404) Not Found.\\"\\n```\\n\\nĐiều n\xe0y chỉ ra rằng URL tải xuống cho pywin32 kh\xf4ng c\xf2n hợp lệ, c\xf3 nghĩa l\xe0 Chocolatey kh\xf4ng thể lấy c\xe1c tệp c\xe0i đặt cần thiết.\\n\\n### C\xe1c Bước Khắc Phục Sự Cố\\n\\nDưới đ\xe2y l\xe0 một số bước bạn c\xf3 thể thực hiện để giải quyết vấn đề n\xe0y:\\n\\n#### 1. X\xe1c Minh C\xe0i Đặt Chocolatey\\n\\nĐảm bảo rằng Chocolatey được c\xe0i đặt đ\xfang c\xe1ch v\xe0 cập nhật l\xean phi\xean bản mới nhất. Bạn c\xf3 thể kiểm tra phi\xean bản Chocolatey của m\xecnh bằng:\\n\\n```bash\\nchoco --version\\n```\\n\\nĐể cập nhật Chocolatey, sử dụng:\\n\\n```bash\\nchoco upgrade chocolatey\\n```\\n\\n#### 2. C\xe0i Đặt Thủ C\xf4ng pywin32\\n\\nV\xec c\xe0i đặt tự động đang thất bại, h\xe3y thử c\xe0i đặt thủ c\xf4ng pywin32. Bạn c\xf3 thể tải xuống phi\xean bản ph\xf9 hợp từ [trang ph\xe1t h\xe0nh GitHub ch\xednh thức của pywin32](https://github.com/mhammond/pywin32/releases) v\xe0 c\xe0i đặt thủ c\xf4ng.\\n\\n#### 3. Chỉnh Sửa Script C\xe0i Đặt\\n\\nNếu bạn c\xf3 quyền kiểm so\xe1t đối với script Electron Build Tools, bạn c\xf3 thể chỉnh sửa n\xf3 để trỏ đến một URL hợp lệ cho pywin32 hoặc xử l\xfd qu\xe1 tr\xecnh c\xe0i đặt thủ c\xf4ng.\\n\\n#### 4. Sử Dụng Tr\xecnh Quản L\xfd G\xf3i Kh\xe1c\\n\\nNếu Chocolatey tiếp tục gặp lỗi, h\xe3y xem x\xe9t sử dụng một tr\xecnh quản l\xfd g\xf3i thay thế như pip cho c\xe1c g\xf3i Python:\\n\\n```bash\\npip install pywin32\\n```\\n\\n### V\xed Dụ Về C\xe0i Đặt Thủ C\xf4ng pywin32\\n\\n1. Tải xuống tr\xecnh c\xe0i đặt pywin32 th\xedch hợp từ [ph\xe1t h\xe0nh ch\xednh thức tr\xean GitHub](https://github.com/mhammond/pywin32/releases).\\n2. Chạy tr\xecnh c\xe0i đặt v\xe0 l\xe0m theo hướng dẫn c\xe0i đặt.\\n3. X\xe1c minh c\xe0i đặt bằng c\xe1ch chạy một đoạn m\xe3 Python đơn giản nhập pywin32:\\n\\n```python\\nimport win32api\\nprint(win32api.GetVersionEx())\\n```\\n\\nGặp phải lỗi \\"Failed to run `choco install pywin32 --yes`\\" c\xf3 thể l\xe0 một trở ngại trong qu\xe1 tr\xecnh ph\xe1t triển của bạn. Tuy nhi\xean, bằng c\xe1ch hiểu nguy\xean nh\xe2n gốc rễ v\xe0 l\xe0m theo c\xe1c bước đ\xe3 n\xeau ở tr\xean, bạn c\xf3 thể khắc phục vấn đề n\xe0y v\xe0 tiếp tục thiết lập dự \xe1n Electron của m\xecnh.\\n"},{"lang":"vi","group":"blog","slug":"blog/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining","frontmatter":{"title":"B\xed mật về Thiết kế ASIC T\xf9y chỉnh Ho\xe0n to\xe0n cho Khai th\xe1c Bitcoin v\xe0 Tiền điện tử","date":"2022-05-30T00:00:00.000Z","categories":["Chất b\xe1n dẫn","Bitcoin","Tiền điện tử","Chuỗi khối"],"author":"Tan Shuai","tags":["ASIC","Bitcoin","Khai th\xe1c","BTC"],"draft":false,"contact":"Tan Shuai | tanshuai@btc.com | tanshuai.com"},"content":"\\nTan Shuai  \\n[tanshuai@btc.com](mailto:tanshuai@btc.com)  \\n[tanshuai.com](https://tanshuai.com)\\n\\n---\\n\\n## T\xf3m tắt\\n\\nTrong thế giới cạnh tranh của khai th\xe1c tiền điện tử, hiệu quả năng lượng, hiệu suất hashrate v\xe0 độ tin cậy l\xe0 v\xf4 c\xf9ng quan trọng. B\xe0i b\xe1o n\xe0y kh\xe1m ph\xe1 thiết kế ASIC (Mạch t\xedch hợp chuy\xean dụng) t\xf9y chỉnh ho\xe0n chỉnh h\xe0ng đầu, tiết lộ c\xe1c b\xed mật trong ng\xe0nh v\xe0 phương ph\xe1p chuy\xean m\xf4n th\xfac đẩy khai th\xe1c Bitcoin v\xe0 tiền điện tử hiệu suất cao. Được viết bởi một chuy\xean gia c\xf4ng nghệ từ một trong những c\xf4ng ty sản xuất m\xe1y khai th\xe1c ASIC h\xe0ng đầu, b\xe0i b\xe1o n\xe0y tận dụng c\xe1c kỹ thuật thiết kế ti\xean tiến, bố cục vật l\xfd tỉ mỉ v\xe0 c\xe1c quy tr\xecnh x\xe1c minh to\xe0n diện để tr\xecnh b\xe0y c\xe1c khả năng vượt trội của ASIC t\xf9y chỉnh ho\xe0n chỉnh trong việc tối đa h\xf3a hiệu quả v\xe0 lợi nhuận khai th\xe1c.\\n\\n## Giới thiệu\\n\\nSự ph\xe1t triển của khai th\xe1c tiền điện tử, đặc biệt l\xe0 khai th\xe1c Bitcoin, đ\xe3 chứng kiến sự chuyển đổi từ việc sử dụng CPU, FPGA v\xe0 GPU đa mục đ\xedch sang c\xe1c ASIC chuy\xean dụng. Những ASIC n\xe0y cung cấp hiệu suất v\xe0 hiệu quả năng lượng v\xf4 song. Thiết kế ASIC t\xf9y chỉnh ho\xe0n chỉnh đại diện cho đỉnh cao của sự ph\xe1t triển n\xe0y, cho ph\xe9p tạo ra c\xe1c giải ph\xe1p t\xf9y chỉnh đ\xe1p ứng c\xe1c y\xeau cầu cụ thể của hoạt động khai th\xe1c.\\n\\nPhần lớn t\xe0i liệu hiện c\xf3 về thiết kế ASIC cho khai th\xe1c tiền điện tử đến từ giới học thuật hoặc c\xe1c doanh nghiệp kh\xf4ng khai th\xe1c, thường thiếu t\xednh ứng dụng thực tế. Cho đến nay, chỉ một số \xedt c\xf4ng ty, chủ yếu l\xe0 Trung Quốc (v\xed dụ: MicroBT, Bitmain), đ\xe3 ph\xe1t triển th\xe0nh c\xf4ng ASIC khai th\xe1c Bitcoin c\xf3 thể thương mại h\xf3a. B\xe0i b\xe1o n\xe0y nhằm lấp đầy khoảng trống đ\xf3 bằng c\xe1ch cung cấp những hiểu biết r\xfat ra từ thực tiễn trong ng\xe0nh, mang đến một g\xf3c nh\xecn dựa tr\xean thực tế của lĩnh vực khai th\xe1c.\\n\\nL\xe0 một chuy\xean gia với hơn mười năm kinh nghiệm trong ng\xe0nh c\xf4ng nghệ, t\xe1c giả của b\xe0i b\xe1o n\xe0y đ\xe3 ph\xe1t triển m\xe1y khai th\xe1c Bitcoin ASIC h\xe0ng đầu thế giới (WhatsMiner), m\xe1y khai th\xe1c LTC/DOGE v\xe0 ETH, v\xe0 đ\xf3ng vai tr\xf2 quan trọng tại c\xe1c c\xf4ng ty như MicroBT, BTC.COM v\xe0 c\xe1c c\xf4ng ty kh\xf4ng c\xf3 nh\xe0 m\xe1y sản xuất kh\xe1c. \xd4ng đ\xe3 giữ c\xe1c vị tr\xed quan trọng tại c\xe1c c\xf4ng ty ni\xeam yết tr\xean NASDAQ, HKSE v\xe0 NYSE. Với kinh nghiệm rộng r\xe3i trong việc thiết lập quan hệ đối t\xe1c với TSMC, Texas Instruments, ARM v\xe0 Intel, \xf4ng mang đến một kho t\xe0ng kiến thức v\xe0 chuy\xean m\xf4n thực tế trong lĩnh vực thiết kế ASIC t\xf9y chỉnh cho khai th\xe1c Bitcoin v\xe0 tiền điện tử.\\n\\n## Phương ph\xe1p v\xe0 Quy tr\xecnh Thiết kế\\n\\n### Triết l\xfd Thiết kế\\n\\nC\xe1ch tiếp cận của ch\xfang t\xf4i đối với thiết kế ASIC t\xf9y chỉnh ho\xe0n chỉnh được th\xfac đẩy bởi trọng t\xe2m v\xe0o việc tối đa h\xf3a PPA (C\xf4ng suất, Hiệu suất v\xe0 Diện t\xedch), đặc biệt l\xe0 trong điều kiện vận h\xe0nh điện \xe1p thấp. Phần n\xe0y sẽ m\xf4 tả triết l\xfd thiết kế v\xe0 phương ph\xe1p của ch\xfang t\xf4i:\\n\\n1. **Kiến tr\xfac Pipeline**: Tận dụng c\xe1c lợi \xedch vốn c\xf3 của cấu tr\xfac pipeline cho c\xe1c thuật to\xe1n khai th\xe1c, được đặc trưng bởi c\xe1c thanh ghi v\xe0 c\xe1c giai đoạn logic kết hợp. Bằng c\xe1ch sử dụng kiến tr\xfac pipeline, ch\xfang t\xf4i c\xf3 thể xử l\xfd hiệu quả c\xe1c hoạt động tần số cao cần thiết cho khai th\xe1c tiền điện tử.\\n2. **Netlist v\xe0 Bố tr\xed Thủ c\xf4ng**: Viết kịch bản chi tiết cho việc tạo netlist v\xe0 bố tr\xed cell thủ c\xf4ng để tối ưu h\xf3a c\xe1c đường dẫn quan trọng. Điều n\xe0y cho ph\xe9p kiểm so\xe1t ch\xednh x\xe1c thời gian v\xe0 giảm c\xe1c hiệu ứng k\xfd sinh.\\n3. **Thư viện Cell T\xf9y chỉnh**: Ph\xe1t triển c\xe1c cell chuy\xean dụng với số lượng transistor tối ưu v\xe0 c\xe1c t\xednh năng tiết kiệm năng lượng động. C\xe1c cell t\xf9y chỉnh được thiết kế để hoạt động ở điện \xe1p thấp nhất c\xf3 thể, đảm bảo ti\xeau thụ điện năng tối thiểu.\\n\\n### Đạt được lợi \xedch PPA\\n\\nC\xe1c chiến lược chi tiết để đạt được lợi \xedch PPA th\xf4ng qua thiết kế t\xf9y chỉnh:\\n\\n1. **Thiết Kế Thanh Ghi T\xf9y Chỉnh**: Sử dụng c\xe1c thanh ghi nhiều bit v\xe0 thiết kế dựa tr\xean chốt để giảm c\xf4ng suất đồng hồ v\xe0 cải thiện thời gian mượn. C\xe1c thanh ghi nhiều bit giảm thiểu ti\xeau thụ năng lượng của c\xe2y đồng hồ v\xe0 giảm diện t\xedch tổng thể.\\n2. **Đặt Vị Tr\xed Thủ C\xf4ng**: Giảm độ d\xe0i d\xe2y v\xe0 c\xe2n bằng thời gian c\xe0i đặt v\xe0 giữ để tăng hiệu suất tổng thể. Đặt vị tr\xed thủ c\xf4ng cho ph\xe9p kiểm so\xe1t tốt hơn độ trễ kết nối v\xe0 hiện tượng xuy\xean nhiễu, cải thiện t\xednh to\xe0n vẹn của t\xedn hiệu v\xe0 giảm ti\xeau thụ năng lượng.\\n3. **Thiết Kế \xd4 Tối Ưu**: C\xe1c \xf4 t\xf9y chỉnh được thiết kế để hoạt động ở điện \xe1p thấp hơn, giảm thiểu ti\xeau thụ năng lượng động v\xe0 tối đa h\xf3a hiệu quả. Bằng c\xe1ch t\xf9y chỉnh thiết kế \xf4 để đ\xe1p ứng nhu cầu cụ thể của c\xe1c thuật to\xe1n khai th\xe1c, ch\xfang t\xf4i c\xf3 thể đạt được những cải tiến đ\xe1ng kể về hiệu suất.\\n\\n### Độ Tin Cậy Dưới Điện \xc1p Thấp\\n\\nĐảm bảo độ tin cậy của logic thời gian t\xf9y chỉnh được thiết kế ở điện \xe1p thấp bao gồm:\\n\\n1. **M\xf4 Phỏng Ch\xednh X\xe1c**: M\xf4 phỏng cấp độ mạch để x\xe1c nhận h\xe0nh vi của \xf4 t\xf9y chỉnh dưới c\xe1c điều kiện cụ thể. C\xe1c c\xf4ng cụ như SPICE được sử dụng để m\xf4 phỏng điện chi tiết nhằm đảm bảo c\xe1c \xf4 hoạt động ch\xednh x\xe1c dưới tất cả c\xe1c g\xf3c PVT (Quy tr\xecnh, Điện \xe1p, Nhiệt độ).\\n2. **Đồng Nhất Trong Đặt Vị Tr\xed**: Đặt vị tr\xed thủ c\xf4ng để đảm bảo sự đồng nhất v\xe0 giảm biến đổi. Bằng c\xe1ch kiểm so\xe1t bố tr\xed vật l\xfd, ch\xfang t\xf4i c\xf3 thể giảm thiểu t\xe1c động của c\xe1c biến đổi quy tr\xecnh v\xe0 đảm bảo hiệu suất nhất qu\xe1n.\\n3. **Hiệu Chuẩn PVT Ch\xednh X\xe1c**: X\xe1c minh chống lại c\xe1c biến đổi quy tr\xecnh, điện \xe1p v\xe0 nhiệt độ. Thử nghiệm v\xe0 hiệu chuẩn mở rộng được thực hiện để đảm bảo độ bền của thiết kế trong c\xe1c điều kiện vận h\xe0nh kh\xe1c nhau.\\n\\n## Nghi\xean Cứu Trường Hợp v\xe0 Kết Quả\\n\\nTr\xecnh b\xe0y dữ liệu thực tế v\xe0 nghi\xean cứu trường hợp từ c\xe1c tape-out ho\xe0n chỉnh:\\n\\n| Dự \xc1n | Node Quy Tr\xecnh | Hiệu Quả Điện \xc1p/Năng Lượng | Thuật To\xe1n |\\n| ------- | ------------ | ------------------------ | --------- |\\n| SC      | TSMC 28nm    | 0.45V, 257J/T            | Blake2b   |\\n| DCR     | TSMC 28nm    | 0.45V, 150J/T            | Blake256  |\\n| DASH    | TSMC 16nm    | 0.38V, 6.2J/G            | X11       |\\n| BTC     | TSMC 16nm    | 0.38V, 65J/T             | SHA-256d  |\\n| BTC     | TSMC 7nm     | 0.30V, 37J/T             | SHA-256d  |\\n| BTC     | Samsung 8nm  | 0.31V, 45J/T             | SHA-256d  |\\n| BTC     | SMIC N+1     | 0.30V, 35J/T             | SHA-256d  |\\n\\nNhững kết quả n\xe0y chứng minh những cải tiến đ\xe1ng kể về hiệu quả v\xe0 hiệu suất c\xf3 thể đạt được th\xf4ng qua phương ph\xe1p thiết kế t\xf9y chỉnh của ch\xfang t\xf4i.\\n\\n## T\xedch Hợp v\xe0 X\xe1c Minh\\n\\n### K\xfd Kết \xd4 Hỗn Hợp\\n\\n- **T\xedch Hợp C\xe1c \xd4 T\xf9y Chỉnh**: C\xe1c \xf4 t\xf9y chỉnh được t\xedch hợp với c\xe1c \xf4 ti\xeau chuẩn từ TSMC v\xe0 c\xe1c xưởng đ\xfac kh\xe1c, đảm bảo t\xednh tương th\xedch v\xe0 hiệu suất. C\xe1c \xf4 t\xf9y chỉnh được đặc trưng v\xe0 x\xe1c nhận để ph\xf9 hợp với c\xe1c y\xeau cầu của thư viện \xf4 ti\xeau chuẩn, cho ph\xe9p t\xedch hợp liền mạch.\\n- **Chiến Lược K\xfd Kết**: C\xe1c chiến lược đảm bảo t\xednh tương th\xedch v\xe0 hiệu suất liền mạch bao gồm kiểm tra DRC (Kiểm tra Quy tắc Thiết kế) v\xe0 LVS (Bố tr\xed so với Sơ đồ), cũng như ph\xe2n t\xedch thời gian v\xe0 năng lượng sử dụng c\xe1c c\xf4ng cụ EDA (Tự động H\xf3a Thiết Kế Điện Tử) ti\xeau chuẩn ng\xe0nh.\\n\\n### Thiết Kế Đồng Bộ Số V\xe0 Tương Tự\\n\\n- **Kỹ Thuật T\xedch Hợp**: T\xedch hợp c\xe1c th\xe0nh phần số v\xe0 tương tự để tối ưu h\xf3a hiệu suất tổng thể của chip. C\xe1c kỹ thuật như x\xe1c minh t\xedn hiệu hỗn hợp v\xe0 đồng m\xf4 phỏng được sử dụng để đảm bảo sự t\xedch hợp v\xe0 chức năng đ\xfang đắn.\\n- **Phương Ph\xe1p X\xe1c Minh**: C\xe1c phương ph\xe1p để đảm bảo độ bền bỉ qua c\xe1c điều kiện hoạt động kh\xe1c nhau bao gồm ph\xe2n t\xedch điểm cực trị, m\xf4 phỏng Monte Carlo v\xe0 x\xe1c minh độ tin cậy để giải quyết l\xe3o h\xf3a v\xe0 sự di cư của điện tử.\\n\\n## Kết Luận\\n\\nThiết kế ASIC t\xf9y chỉnh ho\xe0n to\xe0n mang lại những lợi \xedch đ\xe1ng kể cho việc khai th\xe1c Bitcoin v\xe0 tiền điện tử, cung cấp hiệu suất vượt trội, hiệu quả năng lượng v\xe0 độ tin cậy. Bằng c\xe1ch tiết lộ những b\xed mật của thiết kế ASIC t\xf9y chỉnh h\xe0ng đầu, b\xe0i b\xe1o n\xe0y n\xeau bật c\xe1c phương ph\xe1p v\xe0 đổi mới đặt c\xe1c nh\xe0 l\xe3nh đạo ng\xe0nh c\xf4ng nghiệp l\xean h\xe0ng đầu. Khi việc khai th\xe1c tiền điện tử tiếp tục ph\xe1t triển, c\xe1c ASIC t\xf9y chỉnh sẽ đ\xf3ng vai tr\xf2 then chốt trong việc th\xfac đẩy thế hệ phần cứng khai th\xe1c hiệu suất cao, hiệu quả cao tiếp theo.\\n\\n[Phi\xean Bản PDF Của B\xe0i B\xe1o](/docs/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining.pdf)\\n"},{"lang":"vi","group":"blog","slug":"blog/get-current-commit-id-of-git-and-update-to-package-json","frontmatter":{"title":"Lấy ID commit hiện tại của Git v\xe0 cập nhật v\xe0o package.json","date":"2021-08-21T09:19:58.875Z","draft":false,"author":"Tan Shuai","tags":["Git","Package.json","Node.js"],"categories":["Ph\xe1t triển phần mềm"]},"content":"\\nKhi ph\xe1t triển một dự \xe1n Node.js, bạn c\xf3 thể muốn theo d\xf5i ID commit hiện tại của kho Git của m\xecnh. Th\xf4ng tin n\xe0y c\xf3 thể hữu \xedch cho mục đ\xedch gỡ lỗi, phi\xean bản hoặc triển khai. Một c\xe1ch để đạt được điều n\xe0y l\xe0 cập nhật tệp `package.json` với ID commit hiện tại trong qu\xe1 tr\xecnh build. B\xe0i viết n\xe0y sẽ hướng dẫn bạn c\xe1c bước để lấy ID commit hiện tại của Git v\xe0 cập nhật n\xf3 v\xe0o tệp `package.json` bằng Node.js.\\n\\n```bash\\n\\"predev\\": \\"node ./node_modules/json/lib/json.js -I -f package.json -e \\\\\\"this.commit=\'$(git rev-parse --short HEAD)\'\\\\\\"\\",\\n"},{"lang":"vi","group":"blog","slug":"blog/migrate-a-github-lfs-git-large-file-storage-repository-to-aws-codecommit","frontmatter":{"title":"Di chuyển kho lưu trữ GitHub LFS (Git Large File Storage) sang AWS CodeCommit","date":"2022-02-09T09:36:57.481Z","draft":false,"author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["Ph\xe1t triển Phần mềm"]},"content":"\\nT\xf4i vừa di chuyển một trong những kho lưu trữ GitHub của m\xecnh, sử dụng Git Large File Storage (LFS), sang AWS CodeCommit. T\xf4i nghĩ rằng t\xf4i sẽ chia sẻ qu\xe1 tr\xecnh n\xe0y với bạn trong trường hợp bạn đang muốn l\xe0m điều tương tự. Đ\xe2y l\xe0 hướng dẫn từng bước dựa tr\xean kinh nghiệm của t\xf4i.\\n\\n## Y\xeau cầu trước\\n\\nTrước khi bắt đầu, h\xe3y đảm bảo rằng bạn đ\xe3 c\xe0i đặt c\xe1c c\xf4ng cụ n\xe0y:\\n\\n- Git\\n- Git LFS\\n- AWS CLI\\n\\n## Hướng dẫn từng bước\\n\\n### 1. Sao ch\xe9p Kho lưu trữ\\n\\nĐầu ti\xean, sao ch\xe9p kho lưu trữ GitHub của bạn bằng t\xf9y chọn `--mirror`. Điều n\xe0y tạo ra một bản sao trần của kho lưu trữ, bao gồm tất cả c\xe1c nh\xe1nh v\xe0 thẻ.\\n\\n```zsh\\ngit clone --mirror https://github.com/tanshuai/designs.git designs\\n```\\n\\n### 2. X\xe1c minh c\xe1c Tệp LFS\\n\\nTiếp theo, liệt k\xea tất cả c\xe1c tệp được quản l\xfd bởi Git LFS để đảm bảo mọi thứ đều được đặt đ\xfang chỗ.\\n\\n```zsh\\ngit lfs ls-files\\n```\\n\\nBạn sẽ thấy c\xe1i g\xec đ\xf3 giống như sau:\\n\\n```\\ncadfa0bc9e * Brochure-Trifold-Draft.ai\\naf9b8b8a1c * Brochure-Trifold-English.ai\\n27bb5f4e61 * Brochure-Trifold.ai\\n```\\n\\n### 3. Di chuyển c\xe1c Tệp LFS\\n\\nB\xe2y giờ, xuất c\xe1c tệp LFS. Bước n\xe0y đảm bảo ch\xfang l\xe0 một phần của lịch sử kho lưu trữ của bạn.\\n\\n```zsh\\ngit lfs migrate export --include=\\"*.ai\\" --everything\\n```\\n\\nBạn sẽ thấy một số th\xf4ng b\xe1o tiến tr\xecnh như sau:\\n\\n```\\nmigrate: Sorting commits: ..., done.\\nmigrate: Rewriting commits: 100% (20/20), done.\\nmaster 98a3c48d85... -> 82f8873b41...\\nmigrate: Updating refs: ..., done.\\nmigrate: checkout: ..., done.\\nprune: 3 local object(s), 0 retained, done.\\ncadfa0bc9e... (133 MB)\\n27bb5f4e61... (131 MB)\\naf9b8b8a1c... (130 MB), done.\\nprune: Deleting objects: 100% (3/3), done.\\n```\\n\\n### 4. Dọn dẹp LFS\\n\\nLoại bỏ th\xf4ng tin theo d\xf5i Git LFS v\xe0 gỡ c\xe0i đặt Git LFS.\\n\\n```zsh\\ngit lfs ls-files\\ngit rm .gitattributes -f\\ngit lfs uninstall\\n```\\n\\n### 5. Đẩy l\xean AWS CodeCommit\\n\\nCuối c\xf9ng, đẩy kho lưu trữ của bạn l\xean AWS CodeCommit.\\n\\n```zsh\\ngit push https://git-codecommit.us-east-2.amazonaws.com/v1/repos/designs --all\\n```\\n\\nĐ\xf3 l\xe0 tất cả! Bằng c\xe1ch l\xe0m theo c\xe1c bước n\xe0y, t\xf4i đ\xe3 th\xe0nh c\xf4ng trong việc di chuyển kho lưu trữ GitHub LFS của m\xecnh sang AWS CodeCommit. C\xe1c tệp lớn v\xe0 lịch sử kho lưu trữ đ\xe3 được bảo to\xe0n ho\xe0n hảo.\\n\\n## Kết th\xfac\\n\\nDi chuyển một kho lưu trữ GitHub sử dụng Git LFS sang AWS CodeCommit kh\xe1 đơn giản nếu bạn l\xe0m theo c\xe1c bước đ\xfang. Nếu bạn c\xf3 bất kỳ c\xe2u hỏi n\xe0o hoặc gặp phải vấn đề, t\xe0i liệu [AWS CodeCommit](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) v\xe0 [Git LFS](https://git-lfs.github.com/) l\xe0 những t\xe0i nguy\xean tuyệt vời.\\n\\nHy vọng bạn thấy hướng dẫn n\xe0y hữu \xedch. Ch\xfac bạn m\xe3 h\xf3a vui vẻ!\\n"},{"lang":"vi","group":"blog","slug":"blog/reset-restore-all-subdirectories-of-git","frontmatter":{"title":"Đặt Lại/Kh\xf4i Phục Tất Cả C\xe1c Thư Mục Con của Git","date":"2021-09-22T08:33:49.201Z","draft":false,"author":"Tan Shuai","tags":["Git","Quản L\xfd Phi\xean Bản"],"categories":["Ph\xe1t Triển Phần Mềm"]},"content":"\\n\\\\nQuản l\xfd kho Git một c\xe1ch hiệu quả thường đ\xf2i hỏi việc đặt lại hoặc kh\xf4i phục c\xe1c thư mục con để duy tr\xec một m\xe3 nguồn sạch v\xe0 hoạt động tốt. Hướng dẫn n\xe0y cung cấp một c\xe1ch tiếp cận ngắn gọn, từng bước để đặt lại hoặc kh\xf4i phục tất cả c\xe1c thư mục con trong một kho Git.\\n\\n## Đặt lại Thư mục con\\n\\nLệnh Git sau đ\xe2y loại bỏ tất cả c\xe1c tệp v\xe0 thư mục chưa được theo d\xf5i khỏi kho. Điều n\xe0y hữu \xedch để l\xe0m sạch c\xe1c tệp kh\xf4ng cần thiết trước khi thực hiện đặt lại hoặc kh\xf4i phục.\\n\\n```bash\\ngit clean -xfdf -- .\\n```\\n\\n### Giải th\xedch Lệnh:\\n\\n- `-x`: Loại bỏ tất cả c\xe1c tệp chưa được theo d\xf5i, bao gồm cả những tệp bị bỏ qua bởi `.gitignore`.\\n- `-f`: Buộc phải loại bỏ c\xe1c tệp.\\n- `-d`: Loại bỏ c\xe1c thư mục chưa được theo d\xf5i.\\n- `-- .`: \xc1p dụng lệnh cho thư mục hiện tại v\xe0 tất cả c\xe1c thư mục con.\\n\\n## Kh\xf4i phục Thư mục con\\n\\nĐể kh\xf4i phục tất cả c\xe1c tệp trong kho về trạng th\xe1i đ\xe3 được cam kết lần cuối, sử dụng lệnh sau:\\n\\n```bash\\ngit checkout {HEAD HOẶC NH\xc1NH} -- .\\n```\\n\\n### Giải th\xedch Lệnh:\\n\\n- `{HEAD HOẶC NH\xc1NH}`: Thay thế bằng `HEAD` để đặt lại về lần cam kết mới nhất hoặc chỉ định t\xean nh\xe1nh để đặt lại về một nh\xe1nh cụ thể.\\n- `-- .`: \xc1p dụng lệnh cho thư mục hiện tại v\xe0 tất cả c\xe1c thư mục con.\\n\\nBằng c\xe1ch sử dụng c\xe1c lệnh n\xe0y, bạn c\xf3 thể đảm bảo rằng kho của bạn kh\xf4ng c\xf2n c\xe1c tệp kh\xf4ng mong muốn v\xe0 tất cả c\xe1c tệp đều được kh\xf4i phục về trạng th\xe1i đ\xe3 được cam kết. Qu\xe1 tr\xecnh n\xe0y gi\xfap duy tr\xec một m\xe3 nguồn sạch v\xe0 c\xf3 tổ chức, tạo điều kiện thuận lợi cho việc hợp t\xe1c v\xe0 ph\xe1t triển.\\n\\nH\xe3y t\xf9y chỉnh hướng dẫn n\xe0y theo nhu cầu v\xe0 sở th\xedch cụ thể của bạn. Để biết th\xeam c\xe1c thao t\xe1c Git n\xe2ng cao, tham khảo [t\xe0i liệu ch\xednh thức của Git](https://git-scm.com/doc).\\n"},{"lang":"vi","group":"blog","slug":"blog/ultra-low-cost-ddr3-ddr4-lpddr3-lpddr4-memory-test-system","frontmatter":{"title":"Hệ thống Kiểm tra Bộ nhớ DDR3, DDR4, LP-DDR3 & LP-DDR4 Si\xeau Rẻ","description":"Kh\xe1m ph\xe1 hệ thống kiểm tra bộ nhớ si\xeau rẻ cho c\xe1c c\xf4ng nghệ DDR3, DDR4, LP-DDR3 v\xe0 LP-DDR4. Với gi\xe1 khoảng 200.000 USD, hệ thống cung cấp kiểm tra tốc độ cao, t\xednh linh hoạt, c\xe1c t\xednh năng ti\xean tiến v\xe0 ti\xeau thụ điện năng thấp. Ho\xe0n hảo cho c\xe1c doanh nghiệp t\xecm kiếm giải ph\xe1p kiểm tra bộ nhớ hiệu quả về chi ph\xed v\xe0 đ\xe1ng tin cậy.","date":"2024-06-01T00:00:00.000Z","categories":["Chất b\xe1n dẫn"],"author":"Tan Shuai","tags":["DDR3","DDR4","LP-DDR3","LP-DDR4","Hệ thống Kiểm tra Bộ nhớ"],"draft":false},"content":"\\nNếu bạn giống t\xf4i, lu\xf4n t\xecm kiếm những giải ph\xe1p tiết kiệm chi ph\xed m\xe0 kh\xf4ng l\xe0m giảm chất lượng, bạn sẽ y\xeau th\xedch những g\xec t\xf4i chia sẻ h\xf4m nay. Trong thế giới c\xf4ng nghệ ph\xe1t triển nhanh ch\xf3ng, việc đảm bảo bộ nhớ của thiết bị đạt ti\xeau chuẩn l\xe0 rất quan trọng. C\xe1c t\xf9y chọn cao cấp như T5503/T5503HS2 rất tuyệt vời, nhưng ch\xfang c\xf3 gi\xe1 rất đắt đỏ. May mắn thay, Zeeis đ\xe3 giới thiệu một hệ thống kiểm tra bộ nhớ si\xeau tiết kiệm chi ph\xed m\xe0 kh\xf4ng l\xe0m giảm hiệu suất.\\n\\n## Tại Sao Điều N\xe0y Quan Trọng\\n\\nKhi lần đầu ti\xean biết đến hệ thống kiểm tra bộ nhớ của Zeeis, t\xf4i đ\xe3 rất hứng th\xfa. Hệ thống n\xe0y được thiết kế để xử l\xfd c\xe1c c\xf4ng nghệ bộ nhớ DDR3, DDR4, LP-DDR3 v\xe0 LP-DDR4. D\xf9 bạn đang l\xe0m việc với hệ thống cũ hay c\xf4ng nghệ mới nhất, hệ thống n\xe0y đều c\xf3 thể đ\xe1p ứng.\\n\\n### Kiểm Tra Tốc Độ Cao\\n\\nMột trong những t\xednh năng nổi bật l\xe0 khả năng hỗ trợ tốc độ truyền dữ liệu từ 800 đến 3200 MT/s cho cả DDR3 v\xe0 DDR4. N\xf3 c\xf3 thể đ\xe1nh gi\xe1 c\xe1c module bộ nhớ ở tốc độ xung nhịp l\xean đến 1600 MHz. Điều đ\xf3 c\xf3 nghĩa l\xe0 kiểm tra kỹ lưỡng v\xe0 đ\xe1ng tin cậy, đảm bảo rằng thiết bị của bạn hoạt động tốt nhất.\\n\\n### T\xednh Linh Hoạt\\n\\nT\xednh linh hoạt của hệ thống n\xe0y l\xe0 một thay đổi lớn. N\xf3 hỗ trợ nhiều ti\xeau chuẩn bộ nhớ, ph\xf9 hợp cho một loạt c\xe1c ứng dụng từ điện tử ti\xeau d\xf9ng đến m\xe1y t\xednh hiệu suất cao. Hơn nữa, n\xf3 c\xf2n chuẩn bị cho tương lai. Khi c\xe1c c\xf4ng nghệ bộ nhớ mới xuất hiện, hệ thống n\xe0y c\xf3 thể dễ d\xe0ng n\xe2ng cấp để hỗ trợ ch\xfang.\\n\\n### Hiệu Quả Chi Ph\xed\\n\\nB\xe2y giờ, h\xe3y n\xf3i về gi\xe1 cả. Với khoảng 200.000 USD, hệ thống n\xe0y mang lại lợi tức đầu tư tuyệt vời. N\xf3 đủ rẻ cho c\xe1c doanh nghiệp vừa v\xe0 nhỏ, đảm bảo khả năng kiểm tra h\xe0ng đầu m\xe0 kh\xf4ng l\xe0m cạn kiệt ng\xe2n s\xe1ch.\\n\\n### C\xe1c T\xednh Năng N\xe2ng Cao\\n\\nHệ thống đi k\xe8m với c\xe1c thuật to\xe1n kiểm tra ti\xean tiến, bao gồm một tr\xecnh tạo mẫu thuật to\xe1n t\xedch hợp (ALPG). Điều n\xe0y đảm bảo đ\xe1nh gi\xe1 bộ nhớ ch\xednh x\xe1c v\xe0 đ\xe1ng tin cậy, gi\xfap mỗi module đ\xe1p ứng c\xe1c ti\xeau chuẩn hiệu suất nghi\xeam ngặt.\\n\\n### Ti\xeau Thụ Năng Lượng Thấp\\n\\nĐiều ấn tượng kh\xe1c l\xe0 ti\xeau thụ năng lượng thấp. N\xf3 ph\xf9 hợp với c\xe1c xu hướng trong c\xe1c c\xf4ng nghệ bộ nhớ LP-DDR3 v\xe0 LP-DDR4. Bằng c\xe1ch hoạt động ở điện \xe1p thấp hơn, n\xf3 kh\xf4ng chỉ giảm chi ph\xed năng lượng m\xe0 c\xf2n giảm thiểu nhiệt độ tỏa ra, l\xe0m cho n\xf3 trở th\xe0nh một lựa chọn th\xe2n thiện với m\xf4i trường.\\n\\n## Tại Sao Chọn Zeeis?\\n\\n### Khả Năng Mở Rộng\\n\\nHệ thống của Zeeis được thiết kế với khả năng mở rộng. Khi c\xe1c c\xf4ng nghệ bộ nhớ mới xuất hiện, hệ thống c\xf3 thể dễ d\xe0ng n\xe2ng cấp, đảm bảo khả năng sử dụng l\xe2u d\xe0i v\xe0 giảm nhu cầu thay thế thường xuy\xean.\\n\\n### Hỗ Trợ v\xe0 T\xe0i Liệu\\n\\nMột điểm cộng lớn kh\xe1c l\xe0 sự hỗ trợ v\xe0 t\xe0i liệu phong ph\xfa của Zeeis. D\xf9 bạn l\xe0 một chuy\xean gia d\xe0y dặn kinh nghiệm hay người mới trong lĩnh vực kiểm tra bộ nhớ, c\xe1c hướng dẫn chi tiết v\xe0 dịch vụ kh\xe1ch h\xe0ng nhiệt t\xecnh của họ sẽ đảm bảo một trải nghiệm su\xf4n sẻ.\\n\\n### Đ\xe1p Ứng Nhu Cầu Thị Trường\\n\\nVới nhu cầu ng\xe0y c\xe0ng tăng về bộ nhớ tốc độ cao trong mọi thứ từ điện thoại th\xf4ng minh đến trung t\xe2m dữ liệu, việc c\xf3 một giải ph\xe1p kiểm tra bộ nhớ đ\xe1ng tin cậy v\xe0 tiết kiệm chi ph\xed l\xe0 rất cần thiết. Hệ thống của Zeeis đ\xe1p ứng những nhu cầu n\xe0y, đảm bảo rằng sản phẩm của bạn sẵn s\xe0ng cho thị trường v\xe0 hoạt động ho\xe0n hảo trong c\xe1c ứng dụng thực tế.\\n\\n## Kết Luận\\n\\nT\xf3m lại, Hệ thống Kiểm Tra Bộ Nhớ DDR3, DDR4, LP-DDR3 & LP-DDR4 Si\xeau Tiết Kiệm của Zeeis l\xe0 một lựa chọn tuyệt vời cho những ai cần giải ph\xe1p kiểm tra bộ nhớ đ\xe1ng tin cậy, linh hoạt v\xe0 tiết kiệm chi ph\xed. N\xf3 cung cấp hiệu suất cao với chi ph\xed chỉ bằng một phần nhỏ so với c\xe1c hệ thống cao cấp kh\xe1c, gi\xfap c\xe1c c\xf4ng ty duy tr\xec ti\xeau chuẩn cao m\xe0 kh\xf4ng l\xe0m cạn kiệt ng\xe2n s\xe1ch.\\n\\nNếu bạn quan t\xe2m đến việc n\xe2ng cao khả năng kiểm tra của m\xecnh với một hệ thống được thiết kế cho c\xf4ng nghệ bộ nhớ trong tương lai, xin vui l\xf2ng li\xean hệ với t\xf4i để biết th\xeam th\xf4ng tin tại [i@tanshuai.com](mailto:i@tanshuai.com).\\n\\nCh\xfac bạn kiểm tra vui vẻ!\\n"},{"lang":"vi","group":"blog","slug":"blog/usr-bin-sudo-must-be-owned-by-uid-0-and-have-the-setuid-bit-set-on-ubuntu-20-04","frontmatter":{"title":"/usr/bin/sudo phải thuộc sở hữu của uid 0 v\xe0 được đặt bit setuid tr\xean Ubuntu 20.04","date":"2021-10-08T13:07:25.406Z","draft":false,"author":"Tan Shuai","tags":["Ubuntu","Linux","Sudo"],"categories":["Linux"]},"content":"\\nNếu bạn gặp th\xf4ng b\xe1o lỗi \\"/usr/bin/sudo phải thuộc sở hữu của uid 0 v\xe0 c\xf3 bit setuid được đặt\\" tr\xean Ubuntu 20.04, h\xe3y l\xe0m theo c\xe1c bước sau để khắc phục sự cố.\\n\\n1. Trong qu\xe1 tr\xecnh khởi động, nhấn ph\xedm \'ESC\' để truy cập v\xe0o menu GRUB.\\n\\n![M\xe0n h\xecnh GRUB](/images/content/wx20211008-210752.png \\"M\xe0n h\xecnh GRUB\\")\\n\\n2. Chọn t\xf9y chọn đầu ti\xean, \\"Ubuntu,\\" v\xe0 nhấn ph\xedm \'e\' để chỉnh sửa c\xe1c tham số khởi động.\\n\\n![Chỉnh sửa tham số khởi động](/images/content/wx20211008-210841.png \\"Chỉnh sửa tham số khởi động\\")\\n\\n3. Th\xeam chuỗi sau v\xe0o d\xf2ng bắt đầu bằng \'linux\' để khởi động v\xe0o chế độ cứu hộ:\\n\\n```bash\\nsystemd.unit=rescue.target\\n```\\n\\n4. Khi đ\xe3 v\xe0o chế độ cứu hộ, thực hiện lệnh sau để kh\xf4i phục quyền v\xe0 sở hữu ch\xednh x\xe1c cho `/usr/bin/sudo`:\\n\\n```bash\\npkexec chmod a=rx,u+ws /usr/bin/sudo\\n```\\n\\nLệnh n\xe0y thiết lập c\xe1c quyền cần thiết v\xe0 đảm bảo rằng `sudo` được sở hữu bởi người d\xf9ng root với bit setuid được đặt.\\n\\nBằng c\xe1ch l\xe0m theo c\xe1c bước n\xe0y, bạn sẽ c\xf3 thể khắc phục sự cố v\xe0 kh\xf4i phục chức năng ch\xednh x\xe1c cho lệnh `sudo` tr\xean hệ thống Ubuntu của m\xecnh.\\n\\n---\\n"},{"lang":"ar","group":"blog","slug":"blog/aws-codecommit-the-githubs-large-file-storage-git-lfs-free-alternative","frontmatter":{"title":"AWS CodeCommit： البديل المجاني لتخزين الملفات الكبيرة في GitHub (Git LFS)","description":"اكتشف كيف يعمل AWS CodeCommit كبديل فعال وذو تكلفة منخفضة لتخزين الملفات الكبيرة في GitHub (Git LFS). يغطي هذا المقال حدود Git LFS، وفوائد استخدام AWS CodeCommit لتخزين الملفات الكبيرة، ويوفر دليلًا خطوة بخطوة للانتقال من Git LFS إلى CodeCommit. عزز سير عمل التطوير الخاص بك مع بنية AWS القابلة للتوسع والآمنة.","date":"2022-02-09T00:00:00.000Z","author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["تطوير البرمجيات"],"draft":false},"content":"\\n\\\\nتقدم AWS CodeCommit بديلاً قويًا لخدمة تخزين الملفات الكبيرة من GitHub (Git LFS)، مما يوفر حلاً فعالاً لإدارة الملفات الكبيرة في مستودعات Git الخاصة بك.\\n\\n## لماذا يجب إعادة النظر في استخدام Git LFS\\n\\nبينما يعد Git LFS خيارًا شائعًا للتعامل مع الملفات الكبيرة في مستودعات Git، فإنه يحتوي على بعض القيود والتحديات. يتطلب Git LFS إعدادًا وإدارة إضافية، مما قد يعقد سير العمل في التطوير. بالإضافة إلى ذلك، يمكن أن تتصاعد تكاليف التخزين وعرض النطاق بسرعة، خاصة للمشاريع التي تحتوي على العديد من الملفات الكبيرة أو التعاون المكثف.\\n\\n## لماذا خدمة تخزين الملفات الكبيرة في GitHub ليست مثالية\\n\\nعلى الرغم من أن خدمة تخزين الملفات الكبيرة في GitHub مفيدة، إلا أن لديها عيوبًا جوهرية. يتمثل القلق الأساسي في التكلفة المرتبطة بالتخزين وعرض النطاق، والتي يمكن أن تصبح باهظة للمشاريع الكبيرة. علاوة على ذلك، يمكن أن يكون إدارة Git LFS مرهقًا، حيث يتطلب من المطورين تثبيت وتكوين عميل LFS، وتتبع الملفات المحددة، والتعامل مع النزاعات المحتملة التي تنشأ بسبب التعامل مع الملفات الكبيرة بشكل منفصل عن بقية المستودع.\\n\\n## لماذا استخدام AWS CodeCommit لتخزين الملفات الكبيرة في Git\\n\\nتوفر AWS CodeCommit بديلاً مغريًا لتخزين الملفات الكبيرة في مستودعات Git دون الحاجة إلى Git LFS. تعتبر CodeCommit خدمة تحكم في المصدر مُدارة بالكامل تتكامل بسلاسة مع خدمات AWS الأخرى، مما يوفر قابلية توسع قوية، وأمانًا، وكفاءة في التكلفة. من خلال الاستفادة من CodeCommit، يمكن للمطورين تجنب العبء الإضافي لإدارة Git LFS مع الاستفادة من البنية التحتية القوية لـ AWS ونموذج التسعير حسب الاستخدام.\\n\\n## ما هي قيود AWS CodeCommit مقارنة بـ GitHub\\n\\nعلى الرغم من مزاياها، فإن AWS CodeCommit تحتوي على بعض القيود عند مقارنتها بـ GitHub. قد لا يتم تكرار دعم المجتمع الواسع، والنظام البيئي الغني من التكاملات، والميزات المتقدمة مثل GitHub Actions و GitHub Pages بالكامل في CodeCommit. بالإضافة إلى ذلك، قد يجد المطورون المعتادون على واجهة المستخدم وأدوات التعاون في GitHub أن الانتقال إلى CodeCommit يتطلب بعض التكيف.\\n\\n## كيفية نقل مستودع Git LFS إلى CodeCommit\\n\\nيتضمن نقل مستودع Git LFS إلى CodeCommit عدة خطوات. أولاً، تأكد من تتبع جميع الملفات الكبيرة بشكل صحيح في مستودع Git LFS الخاص بك. بعد ذلك، استنساخ المستودع وإزالة تكوين تتبع Git LFS. بعد ذلك، أنشئ مستودعًا جديدًا في AWS CodeCommit وقم بدفع مستودعك المحلي إليه. تتوفر وثائق ونصوص مفصلة لتبسيط هذه العملية، مما يضمن انتقالًا سلسًا دون فقدان البيانات أو انقطاع.\\n\\n## حل أفضل\\n\\nبالنسبة للفرق والمشاريع التي تعتمد بشكل كبير على Git LFS، فإن استكشاف AWS CodeCommit كبديل يمكن أن يوفر فوائد كبيرة. التكامل السلس لـ CodeCommit مع نظام AWS البيئي، إلى جانب طبيعتها الفعالة من حيث التكلفة والقابلة للتوسع، يجعلها خيارًا جذابًا لإدارة الملفات الكبيرة في مستودعات Git. من خلال تخفيف التحديات المرتبطة بـ Git LFS، تُمكّن CodeCommit فرق التطوير من التركيز على البرمجة والتعاون، مما يدفع بالإنتاجية والابتكار.\\n\\nفي الختام، يوفر AWS CodeCommit بديلاً مجديًا وفعالًا من حيث التكلفة لخدمة التخزين الكبيرة للملفات على GitHub. من خلال الاستفادة من البنية التحتية القوية لـ AWS، يمكن للمطورين إدارة الملفات الكبيرة في مستودعات Git بسهولة، مما يحسن من سير العمل ويقلل من العبء الزائد.\\n"},{"lang":"ar","group":"blog","slug":"blog/check-voltage-current-on-macos-for-power-adapter","frontmatter":{"title":"التحقق من الجهد والتيار على MacOS لمحول الطاقة","meta_title":"التحقق من الجهد والتيار على MacOS لمحول الطاقة","date":"2022-02-14T00:00:00.000Z","author":"Tan Shuai","tags":["MacOS","محول الطاقة","الجهد","التيار"],"categories":["MacOS"],"draft":false},"content":"\\nعند استخدامك لجهاز MacBook، قد ترغب في التحقق من جهد وتيار محول الطاقة. إليك طريقة بسيطة للتحقق من جهد وتيار محول الطاقة على نظام MacOS.\\n\\nافتح Terminal.app واكتب الأمر التالي:\\n\\n`ioreg -l -n AppleSmartBattery -r |grep AppleRawAdapterDetails`\\n\\nستحصل على المعلومات التالية التي تتضمن التيار والجهد:\\n\\n```json\\n\\"AppleRawAdapterDetails\\" = ({\\"IsWireless\\"=No,\\"AdapterID\\"=0,\\"FamilyCode\\"=18446744073172697098,\\"Watts\\"=89,**\\"Current\\"=4450**,\\"PMUConfiguration\\"=4448,**\\"Voltage\\"=20000**})\\n"},{"lang":"ar","group":"blog","slug":"blog/convert-markdown-academic-paper-pdf-macos","frontmatter":{"title":"تحويل Markdown بسرعة إلى PDF على طراز الأكاديمية في macOS","meta_title":"تحويل Markdown إلى PDF على طراز الأكاديمية في macOS باستخدام Pandoc","description":"تعلم كيفية تحويل مستندات Markdown إلى ملفات PDF على طراز الأكاديمية في macOS باستخدام Pandoc وBasicTeX. هذه الطريقة السريعة والمباشرة مثالية لإنشاء ملفات PDF احترافية للأوراق الأكاديمية.","date":"2022-03-03T00:00:00.000Z","categories":["تطوير البرمجيات"],"author":"Tan Shuai","tags":["Pandoc","LaTeX","PDF","ورقة","Markdown","macOS"],"draft":false},"content":"\\nفي هذا الدليل، سأرشدك حول كيفية تحويل مستندات Markdown إلى ملفات PDF بأسلوب أكاديمي على نظام macOS باستخدام Pandoc و BasicTeX. هذه الطريقة سريعة وبسيطة، ومثالية عندما تحتاج إلى إنشاء ملفات PDF بمظهر احترافي لأوراقك الأكاديمية.\\n\\n### الخطوة 1: تثبيت Pandoc و BasicTeX\\n\\nأولاً، ستحتاج إلى تثبيت Pandoc و BasicTeX على نظام macOS الخاص بك. إليك كيف فعلت ذلك:\\n\\n1. **تثبيت Pandoc**: افتح Terminal وأدخل الأمر التالي لتثبيت Pandoc:\\n\\n   ```bash\\n   brew install pandoc\\n   ```\\n\\n2. **تثبيت BasicTeX**: نظرًا لأن MacTeX كبير جدًا، اخترت حزمة BasicTeX الأصغر لتوفير المساحة. نفذ هذا الأمر:\\n\\n   ```bash\\n   brew install --cask basictex\\n   ```\\n\\n3. **تثبيت حزم LaTeX الشائعة**: لضمان حصولك على الحزم اللازمة لإنشاء ملفات PDF، نفذ هذه الأوامر:\\n   ```bash\\n   sudo tlmgr update --self\\n   sudo tlmgr install collection-basic collection-latex collection-latexrecommended collection-fontsrecommended\\n   ```\\n\\n### الخطوة 2: تحضير ملف Markdown الخاص بك\\n\\nبعد ذلك، قم بإنشاء ملف Markdown الخاص بك (مثل `paper.md`). إليك كيفية إعداد ملفي، بما في ذلك العنوان، المؤلف، التاريخ، ومعلومات الاتصال:\\n\\n```markdown\\n---\\ntitle: \\"Your Paper Title\\"\\nsubtitle: \\"Optional Subtitle\\"\\ndate: \\\\today\\n\\nauthor: |\\n  | Your Name\\n  | your-email@tanshuai.com\\n  | www.tanshuai.com\\n---\\n\\n# Abstract\\n\\nYour abstract here.\\n\\n# Introduction\\n\\nYour introduction here.\\n\\n# Methodology\\n\\nYour methodology here.\\n\\n# Results\\n\\nYour results here.\\n\\n# Conclusion\\n\\nYour conclusion here.\\n```\\n\\n### الخطوة 3: تحويل Markdown إلى PDF باستخدام Pandoc\\n\\nالآن، يمكنك تحويل ملف Markdown الخاص بك إلى PDF. استخدمت الأمر التالي في Terminal:\\n\\n```bash\\npandoc paper.md -o paper.pdf --pdf-engine=xelatex\\n```\\n\\nيستخدم هذا الأمر قالب LaTeX الافتراضي لـ Pandoc لتحويل ملف Markdown إلى ملف PDF بأسلوب أكاديمي، بما في ذلك معلومات الاتصال بالمؤلف أسفل اسمه.\\n\\n### نصائح إضافية\\n\\n- **قالب LaTeX مخصص**: إذا كنت بحاجة إلى تنسيق متقدم أو أنماط محددة، يمكنك إنشاء أو تنزيل قالب LaTeX مخصص واستخدامه مع Pandoc:\\n\\n  ```bash\\n  pandoc paper.md -o paper.pdf --pdf-engine=xelatex --template=your-template.tex\\n  ```\\n\\n- **مزيد من البيانات الوصفية**: يمكنك إضافة معلومات إضافية في رأس البيانات الوصفية لـ YAML، مثل ملخص أو كلمات رئيسية، واستخدامها في القوالب المخصصة.\\n\\n### الخلاصة\\n\\nباتباع هذه الخطوات، يمكنك بسهولة تحويل مستندات Markdown إلى ملفات PDF بأسلوب أكاديمي على نظام macOS. استخدام Pandoc و BasicTeX يجعل هذه العملية سريعة وفعالة، ومثالية عندما تحتاج إلى إنشاء مستندات PDF احترافية. سواء كنت تعد أوراقًا أكاديمية، تقارير فنية، أو مستندات رسمية أخرى، تعمل هذه الطريقة بشكل رائع. إضافة معلومات الاتصال في رأس البيانات الوصفية يضيف لمسة احترافية إلى مستنداتك.\\n\\nآمل أن تجد هذا الدليل مفيدًا! إذا كان لديك أي أسئلة أو واجهت أي مشاكل، لا تتردد في التواصل. كتابة سعيدة!\\n"},{"lang":"ar","group":"blog","slug":"blog/electron-build-tools-error-error-failed-to-run-choco-install-pywin32-yes","frontmatter":{"title":"أدوات بناء إلكترون `ERROR Error： Failed to run \\"choco install pywin32 --yes\\"`","date":"2021-09-08T00:00:00.000Z","draft":false,"author":"Tan Shuai","tags":["إلكترون","أدوات بناء","PyWin32","Chocolatey","Win32"],"categories":["تطوير البرمجيات"]},"content":"\\nعند العمل باستخدام أدوات بناء Electron، قد تواجه خطأ يتعلق بتثبيت pywin32 عبر Chocolatey. قد يكون هذا محبطًا، خاصة عندما تكون هذه حزمة مطلوبة لمشروعك. أدناه تجد شرحًا مفصلًا للمشكلة وخطوات محتملة لحلها.\\n\\n### الخطأ\\n\\nعند تهيئة مشروع Electron باستخدام أدوات بناء Electron، قد ترى رسالة الخطأ التالية:\\n\\n```bash\\nE:\\\\\\\\>e init main-testing -i testing --root=e:/src/electron\\nWARN A fixable error has occurred\\n--> A required dependency \\"pywin32\\" could not be located, it probably has to be installed.\\nDo you want build-tools to try fix this for you? [y/n]: y\\n\\nRunning \\"choco install pywin32 --yes\\"\\nERROR Error: Failed to run \\"choco install pywin32 --yes\\"\\n    at spawnSyncWithLog (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:11:11)\\n    at fix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:39:9)\\n    at maybeAutoFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\maybe-auto-fix.js:13:3)\\n    at whichAndFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\which.js:10:5)\\n    at checkPlatformDependencies (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:61:7)\\n    at Object.<anonymous> (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\e-init.js:165:3)\\n    at Module._compile (internal/modules/cjs/loader.js:1072:14)\\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1101:10)\\n    at Module.load (internal/modules/cjs/loader.js:937:32)\\n    at Function.Module._load (internal/modules/cjs/loader.js:778:12)\\n```\\n\\nيحدث هذا الخطأ عادة لأن نص تثبيت حزمة pywin32 لا يمكنه العثور على الملفات المطلوبة على الخادم البعيد. وهذا يؤدي إلى خطأ 404، مما يشير إلى أن الملف غير متاح في عنوان URL المحدد.\\n\\n### فهم الخطأ\\n\\nالجزء الأساسي من رسالة الخطأ هو:\\n\\n```bash\\nERROR: The remote file either doesn\'t exist, is unauthorized, or is forbidden for url \'http://sourceforge.net/projects/pywin32/files/pywin32/Build%20219/pywin32-219.win-amd64-py3.9.exe/download\'. Exception calling \\"GetResponse\\" with \\"0\\" argument(s): \\"The remote server returned an error: (404) Not Found.\\"\\n```\\n\\nهذا يشير إلى أن عنوان URL لتنزيل pywin32 لم يعد صالحًا، مما يعني أن Chocolatey لا يمكنه استرجاع ملفات التثبيت اللازمة.\\n\\n### خطوات استكشاف الأخطاء وإصلاحها\\n\\nإليك بعض الخطوات التي يمكنك اتخاذها لحل هذه المشكلة:\\n\\n#### 1. التحقق من تثبيت Chocolatey\\n\\nتأكد من تثبيت Chocolatey بشكل صحيح وتحديثه إلى أحدث إصدار. يمكنك التحقق من إصدار Chocolatey باستخدام:\\n\\n```bash\\nchoco --version\\n```\\n\\nلتحديث Chocolatey، استخدم:\\n\\n```bash\\nchoco upgrade chocolatey\\n```\\n\\n#### 2. تثبيت pywin32 يدويًا\\n\\nنظرًا لفشل التثبيت التلقائي، حاول تثبيت pywin32 يدويًا. يمكنك تنزيل الإصدار المناسب من [صفحة إصدارات pywin32 على GitHub](https://github.com/mhammond/pywin32/releases) وتثبيته يدويًا.\\n\\n#### 3. تعديل نص التثبيت\\n\\nإذا كان لديك سيطرة على نص أدوات بناء Electron، يمكنك تعديله للإشارة إلى عنوان URL صالح لـ pywin32 أو التعامل مع عملية التثبيت اليدوي.\\n\\n#### 4. استخدام مدير حزم بديل\\n\\nإذا استمر فشل Chocolatey، فكر في استخدام مدير حزم بديل مثل pip لحزم Python:\\n\\n```bash\\npip install pywin32\\n```\\n\\n### مثال على التثبيت اليدوي لـ pywin32\\n\\n1. قم بتنزيل المثبت المناسب لـ pywin32 من [الإصدارات الرسمية على GitHub](https://github.com/mhammond/pywin32/releases).\\n2. شغل المثبت واتبع تعليمات التثبيت.\\n3. تحقق من التثبيت عن طريق تشغيل برنامج Python بسيط يستورد pywin32:\\n\\n```python\\nimport win32api\\nprint(win32api.GetVersionEx())\\n```\\n\\nيمكن أن يكون مواجهة خطأ \\"Failed to run `choco install pywin32 --yes`\\" عقبة في عملية التطوير الخاصة بك. ومع ذلك، من خلال فهم السبب الجذري واتباع الخطوات المذكورة أعلاه، يمكنك التغلب على هذه المشكلة والاستمرار في إعداد مشروع Electron الخاص بك.\\n"},{"lang":"ar","group":"blog","slug":"blog/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining","frontmatter":{"title":"أسرار تصميم ASIC مخصص بالكامل لتعدين البيتكوين والعملات المشفرة","date":"2022-05-30T00:00:00.000Z","categories":["أشباه الموصلات","بيتكوين","العملات المشفرة","بلوكتشين"],"author":"Tan Shuai","tags":["ASIC","بيتكوين","التعدين","BTC"],"draft":false,"contact":"Tan Shuai | tanshuai@btc.com | tanshuai.com"},"content":"\\nتان شواي  \\n[tanshuai@btc.com](mailto:tanshuai@btc.com)  \\n[tanshuai.com](https://tanshuai.com)\\n\\n---\\n\\n## الملخص\\n\\nفي عالم تعدين العملات الرقمية التنافسي، تُعتبر كفاءة الطاقة، وأداء معدل التجزئة، والموثوقية أمورًا في غاية الأهمية. يتناول هذا البحث تصميم ASIC (الدائرة المتكاملة المخصصة لتطبيق محدد) المخصص بالكامل من الدرجة الأولى، كاشفًا عن أسرار الصناعة ومنهجيات الخبراء التي تدفع تعدين البيتكوين والعملات الرقمية عالي الأداء. كُتب هذا البحث بواسطة خبير تقني من إحدى أفضل شركات أجهزة تعدين ASIC، ويستفيد من تقنيات التصميم المتقدمة، والتخطيط الفيزيائي الدقيق، وعمليات التحقق الشاملة لعرض القدرات الاستثنائية للدارات المخصصة بالكامل في تحقيق أقصى كفاءة وربحية في التعدين.\\n\\n## المقدمة\\n\\nشهد تطور تعدين العملات الرقمية، وخاصة تعدين البيتكوين، تحولًا من استخدام وحدات المعالجة المركزية متعددة الأغراض، والدوائر المتكاملة القابلة للبرمجة الميدانية، ووحدات معالجة الرسوميات إلى ASICs المخصصة. توفر هذه الدوائر المتكاملة أداءً وكفاءة طاقة لا مثيل لهما. يمثل تصميم ASIC المخصص بالكامل قمة هذا التطور، مما يسمح بحلول مصممة لتلبية المتطلبات المحددة لعمليات التعدين.\\n\\nمعظم الأدبيات الموجودة حول تصميم ASIC لتعدين العملات الرقمية تأتي من الأوساط الأكاديمية أو الشركات غير المتخصصة في التعدين، وغالبًا ما تفتقر إلى التطبيق العملي في العالم الحقيقي. حتى الآن، نجحت حفنة فقط من الشركات، معظمها صينية (مثل MicroBT، وBitmain)، في تطوير ASICs لتعدين البيتكوين القابلة للتسويق. يهدف هذا البحث إلى سد هذه الفجوة من خلال تقديم رؤى مستمدة من الممارسات الفعلية في الصناعة، وتقديم منظور قائم على حقائق قطاع التعدين.\\n\\nكمحترف لديه أكثر من عشر سنوات من الخبرة في صناعة التكنولوجيا، قام مؤلف هذا البحث بتطوير أفضل أجهزة تعدين البيتكوين (WhatsMiner)، وأجهزة تعدين LTC/DOGE وETH في العالم، ولعب دورًا رئيسيًا في شركات مثل MicroBT وBTC.COM وشركات أخرى بدون مصانع. وقد شغل مناصب رئيسية في شركات مدرجة في NASDAQ وHKSE وNYSE. مع خبرة واسعة في إقامة شراكات مع TSMC وTexas Instruments وARM وIntel، يجلب المؤلف ثروة من المعرفة والخبرة العملية في مجال تصميم ASIC المخصص لتعدين البيتكوين والعملات الرقمية.\\n\\n## المنهجية وتدفق التصميم\\n\\n### فلسفة التصميم\\n\\nيتمحور نهجنا في تصميم ASIC المخصص بالكامل حول التركيز على تحقيق أقصى استفادة من (الطاقة، الأداء، والمساحة)، خاصة في ظروف التشغيل ذات الجهد المنخفض. سيوضح هذا القسم فلسفة التصميم ومنهجيتنا:\\n\\n1. **بنية الأنابيب**: الاستفادة من الفوائد الجوهرية لهياكل الأنابيب لخوارزميات التعدين، التي تتميز بالسجلات ومراحل المنطق التوافقي. من خلال استخدام بنية الأنابيب، يمكننا التعامل بكفاءة مع العمليات عالية التردد المطلوبة لتعدين العملات الرقمية.\\n2. **قائمة التوصيلات اليدوية والتخطيط**: كتابة نصوص تفصيلية لإنشاء قائمة التوصيلات ووضع الخلايا يدويًا لتحسين المسارات الحرجة. يتيح ذلك التحكم الدقيق في التوقيت وتقليل التأثيرات الطفيلية.\\n3. **مكتبات الخلايا المخصصة**: تطوير خلايا متخصصة بعدد ترانزستورات محسّن وميزات ديناميكية لتوفير الطاقة. تُصمم الخلايا المخصصة لتعمل بأقل جهد ممكن، مما يضمن استهلاكًا ضئيلًا للطاقة.\\n\\n### تحقيق فوائد PPA\\n\\nاستراتيجيات مفصلة لتحقيق فوائد PPA من خلال التصميم المخصص:\\n\\n1. **تصميم السجل المخصص**: استخدام سجلات متعددة البتات وتصاميم تعتمد على المزلاج لتقليل استهلاك طاقة الساعة وتحسين اقتراض التوقيت. تقلل السجلات متعددة البتات من استهلاك طاقة شجرة الساعة وتقلل من المساحة الكلية.\\n2. **التحديد اليدوي للموقع**: تقليل طول الأسلاك وتحقيق توازن بين أوقات الإعداد والحفاظ لتحسين الأداء العام. يتيح التحديد اليدوي للموقع تحكمًا أفضل في تأخيرات التوصيلات والتداخل المتقاطع، مما يحسن سلامة الإشارة ويقلل من استهلاك الطاقة.\\n3. **تصميم الخلايا المحسن**: تصمم الخلايا المخصصة لتعمل عند جهد منخفض، مما يقلل من استهلاك الطاقة الديناميكية ويزيد من الكفاءة. من خلال تخصيص تصاميم الخلايا لتلبية احتياجات خوارزميات التعدين المحددة، يمكننا تحقيق تحسينات كبيرة في الأداء.\\n\\n### الموثوقية تحت الجهد المنخفض\\n\\nضمان موثوقية منطق التوقيت المخصص المصمم عند الجهود المنخفضة يتطلب:\\n\\n1. **المحاكاة الدقيقة**: محاكاة على مستوى الدائرة للتحقق من سلوك الخلايا المخصصة تحت ظروف محددة. تُستخدم أدوات مثل SPICE لمحاكاة كهربائية مفصلة لضمان عمل الخلايا بشكل صحيح في جميع زوايا PVT (العملية، الجهد، الحرارة).\\n2. **التحديد اليدوي الموحد للموقع**: التحديد اليدوي للموقع لضمان التناسق وتقليل التفاوتات. من خلال التحكم في التصميم المادي، يمكننا تقليل تأثير التفاوتات في العملية وضمان أداء متسق.\\n3. **معايرة دقيقة لـ PVT**: التحقق مقابل التفاوتات في العملية، الجهد، والحرارة. يتم إجراء اختبارات ومعايرات شاملة لضمان قوة التصميم عبر ظروف التشغيل المختلفة.\\n\\n## دراسات حالة ونتائج\\n\\nعرض بيانات واقعية ودراسات حالة من عمليات تصنيع كاملة:\\n\\n| المشروع | عقدة العملية | كفاءة الجهد/الطاقة | الخوارزمية |\\n| ------- | ------------ | ------------------- | ---------- |\\n| SC      | TSMC 28nm    | 0.45V، 257J/T       | Blake2b    |\\n| DCR     | TSMC 28nm    | 0.45V، 150J/T       | Blake256   |\\n| DASH    | TSMC 16nm    | 0.38V، 6.2J/G       | X11        |\\n| BTC     | TSMC 16nm    | 0.38V، 65J/T        | SHA-256d   |\\n| BTC     | TSMC 7nm     | 0.30V، 37J/T        | SHA-256d   |\\n| BTC     | Samsung 8nm  | 0.31V، 45J/T        | SHA-256d   |\\n| BTC     | SMIC N+1     | 0.30V، 35J/T        | SHA-256d   |\\n\\nتظهر هذه النتائج المكاسب الكبيرة في الكفاءة والأداء التي يمكن تحقيقها من خلال نهج التصميم المخصص لدينا.\\n\\n## التكامل والتحقق\\n\\n### توقيع الخلايا المختلطة\\n\\n- **دمج الخلايا المخصصة**: يتم دمج الخلايا المخصصة مع الخلايا القياسية من TSMC وغيرها من المصانع، مما يضمن التوافق والأداء. يتم تمييز الخلايا المخصصة والتحقق منها لتتطابق مع متطلبات مكتبة الخلايا القياسية، مما يتيح التكامل السلس.\\n- **استراتيجيات التوقيع**: تتضمن الاستراتيجيات لضمان التوافق والأداء السلس فحوصات DRC (فحص قواعد التصميم) وLVS (التخطيط مقابل المخطط) التفصيلية، بالإضافة إلى تحليل التوقيت والطاقة باستخدام أدوات EDA (أتمتة التصميم الإلكتروني) القياسية في الصناعة.\\n\\n### التصميم المشترك الرقمي والتناظري\\n\\n- **تقنيات التكامل**: دمج المكونات الرقمية والتناظرية لتحسين أداء الشريحة بشكل عام. تُستخدم تقنيات مثل التحقق من الإشارة المختلطة والمحاكاة المشتركة لضمان التكامل والوظيفة المناسبة.\\n- **منهجيات التحقق**: المنهجيات التي تضمن المتانة عبر ظروف التشغيل المختلفة تشمل تحليل الزوايا، ومحاكاة مونتي كارلو، والتحقق من الموثوقية لمعالجة الشيخوخة والهجرة الكهربائية.\\n\\n## الخاتمة\\n\\nيوفر تصميم ASIC المخصص بالكامل مزايا كبيرة لتعدين البيتكوين والعملات المشفرة، حيث يقدم أداءً لا مثيل له وكفاءة في استهلاك الطاقة وموثوقية. من خلال الكشف عن أسرار تصميم ASIC المخصص من الدرجة الأولى، يسلط هذا البحث الضوء على المنهجيات والابتكارات التي تميز قادة الصناعة. مع استمرار تطور تعدين العملات المشفرة، سيلعب ASIC المخصص دورًا حيويًا في دفع الجيل التالي من أجهزة التعدين عالية الكفاءة والأداء.\\n\\n[نسخة PDF من البحث](/docs/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining.pdf)\\n"},{"lang":"ar","group":"blog","slug":"blog/get-current-commit-id-of-git-and-update-to-package-json","frontmatter":{"title":"احصل على معرف الالتزام الحالي لـ Git وقم بتحديثه إلى package.json","date":"2021-08-21T09:19:58.875Z","draft":false,"author":"Tan Shuai","tags":["Git","Package.json","Node.js"],"categories":["تطوير البرمجيات"]},"content":"\\nعند تطوير مشروع Node.js، قد ترغب في تتبع معرف الالتزام الحالي لمستودع Git الخاص بك. يمكن أن تكون هذه المعلومات مفيدة لأغراض التصحيح، أو الترقيم، أو النشر. إحدى الطرق لتحقيق ذلك هي تحديث ملف `package.json` بمعرف الالتزام الحالي أثناء عملية البناء. سيوجهك هذا المقال خلال الخطوات للحصول على معرف الالتزام الحالي لـ Git وتحديثه في ملف `package.json` باستخدام Node.js.\\n\\n```bash\\n\\"predev\\": \\"node ./node_modules/json/lib/json.js -I -f package.json -e \\\\\\\\\\\\\\"this.commit=\'$(git rev-parse --short HEAD)\'\\\\\\\\\\\\\\"\\",\\n"},{"lang":"ar","group":"blog","slug":"blog/migrate-a-github-lfs-git-large-file-storage-repository-to-aws-codecommit","frontmatter":{"title":"ترحيل مستودع GitHub LFS (Git Large File Storage) إلى AWS CodeCommit","date":"2022-02-09T09:36:57.481Z","draft":false,"author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["تطوير البرمجيات"]},"content":"\\nلقد قمت مؤخرًا بنقل أحد مستودعات GitHub الخاصة بي، والذي يستخدم Git Large File Storage (LFS)، إلى AWS CodeCommit. اعتقدت أنه سيكون من المفيد مشاركة هذه العملية معكم في حال كنتم تفكرون في القيام بشيء مشابه. إليكم دليلًا خطوة بخطوة بناءً على تجربتي.\\n\\n## المتطلبات المسبقة\\n\\nقبل أن نبدأ، تأكد من تثبيت الأدوات التالية:\\n\\n- Git\\n- Git LFS\\n- AWS CLI\\n\\n## دليل خطوة بخطوة\\n\\n### 1. استنساخ المستودع\\n\\nأولاً، قم باستنساخ مستودع GitHub الخاص بك باستخدام الخيار `--mirror`. سيقوم هذا بإنشاء استنساخ عارٍ من المستودع، بما في ذلك جميع الفروع والعلامات.\\n\\n```zsh\\ngit clone --mirror https://github.com/tanshuai/designs.git designs\\n```\\n\\n### 2. التحقق من ملفات LFS\\n\\nبعد ذلك، قم بسرد جميع الملفات التي يديرها Git LFS للتأكد من أن كل شيء في مكانه.\\n\\n```zsh\\ngit lfs ls-files\\n```\\n\\nيجب أن ترى شيئًا مثل هذا:\\n\\n```\\ncadfa0bc9e * Brochure-Trifold-Draft.ai\\naf9b8b8a1c * Brochure-Trifold-English.ai\\n27bb5f4e61 * Brochure-Trifold.ai\\n```\\n\\n### 3. نقل ملفات LFS\\n\\nالآن، قم بتصدير ملفات LFS. هذه الخطوة تضمن أن تكون جزءًا من تاريخ المستودع الخاص بك.\\n\\n```zsh\\ngit lfs migrate export --include=\\"*.ai\\" --everything\\n```\\n\\nسترى بعض رسائل التقدم مثل هذه:\\n\\n```\\nmigrate: Sorting commits: ..., done.\\nmigrate: Rewriting commits: 100% (20/20), done.\\nmaster  98a3c48d85... -> 82f8873b41...\\nmigrate: Updating refs: ..., done.\\nmigrate: checkout: ..., done.\\nprune: 3 local object(s), 0 retained, done.\\ncadfa0bc9e... (133 MB)\\n27bb5f4e61... (131 MB)\\naf9b8b8a1c... (130 MB), done.\\nprune: Deleting objects: 100% (3/3), done.\\n```\\n\\n### 4. تنظيف LFS\\n\\nقم بإزالة معلومات تتبع Git LFS وإلغاء تثبيت Git LFS.\\n\\n```zsh\\ngit lfs ls-files\\ngit rm .gitattributes -f\\ngit lfs uninstall\\n```\\n\\n### 5. الدفع إلى AWS CodeCommit\\n\\nأخيرًا، قم بدفع مستودعك إلى AWS CodeCommit.\\n\\n```zsh\\ngit push https://git-codecommit.us-east-2.amazonaws.com/v1/repos/designs --all\\n```\\n\\nهذا كل شيء! باتباع هذه الخطوات، تمكنت بنجاح من نقل مستودع GitHub LFS الخاص بي إلى AWS CodeCommit. تم الحفاظ على الملفات الكبيرة وتاريخ المستودع بشكل مثالي.\\n\\n## الخاتمة\\n\\nيعتبر نقل مستودع GitHub الذي يستخدم Git LFS إلى AWS CodeCommit أمرًا بسيطًا إذا اتبعت الخطوات الصحيحة. إذا كانت لديك أي أسئلة أو واجهت أي مشكلات، فإن [وثائق AWS CodeCommit](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) و[وثائق Git LFS](https://git-lfs.github.com/) هما موارد رائعة.\\n\\nآمل أن تجد هذا الدليل مفيدًا. برمجة سعيدة!\\n"},{"lang":"ar","group":"blog","slug":"blog/reset-restore-all-subdirectories-of-git","frontmatter":{"title":"إعادة تعيين/استعادة جميع الدلائل الفرعية في Git","date":"2021-09-22T08:33:49.201Z","draft":false,"author":"Tan Shuai","tags":["Git","التحكم في الإصدار"],"categories":["تطوير البرمجيات"]},"content":"\\nإدارة مستودع Git بفعالية تتطلب غالبًا إعادة ضبط أو استعادة الدلائل الفرعية للحفاظ على قاعدة كود نظيفة وعملية. يوفر هذا الدليل نهجًا موجزًا خطوة بخطوة لإعادة ضبط أو استعادة جميع الدلائل الفرعية في مستودع Git.\\n\\n## إعادة ضبط الدلائل الفرعية\\n\\nيقوم أمر Git التالي بإزالة جميع الملفات والدلائل غير المتعقبة من المستودع. هذا مفيد لتنظيف الملفات غير الضرورية قبل تنفيذ عملية إعادة الضبط أو الاستعادة.\\n\\n```bash\\ngit clean -xfdf -- .\\n```\\n\\n### تحليل الأمر:\\n\\n- `-x`: إزالة جميع الملفات غير المتعقبة، بما في ذلك تلك المتجاهلة بواسطة `.gitignore`.\\n- `-f`: إجبار إزالة الملفات.\\n- `-d`: إزالة الدلائل غير المتعقبة.\\n- `-- .`: تطبيق الأمر على الدليل الحالي وجميع الدلائل الفرعية.\\n\\n## استعادة الدلائل الفرعية\\n\\nلاستعادة جميع الملفات في المستودع إلى حالتها الأخيرة المرتبطة، استخدم الأمر التالي:\\n\\n```bash\\ngit checkout {HEAD OR BRANCH} -- .\\n```\\n\\n### تحليل الأمر:\\n\\n- `{HEAD OR BRANCH}`: استبدل بـ `HEAD` لإعادة الضبط إلى أحدث التزام أو حدد اسم فرع لإعادة الضبط إلى فرع معين.\\n- `-- .`: تطبيق الأمر على الدليل الحالي وجميع الدلائل الفرعية.\\n\\nباستخدام هذه الأوامر، يمكنك التأكد من أن مستودعك خالٍ من الملفات غير المرغوب فيها وأن جميع الملفات قد تمت استعادتها إلى حالتها المرتبطة. هذه العملية تساعد في الحفاظ على قاعدة كود نظيفة ومنظمة، مما يسهل التعاون والتطوير.\\n\\nلا تتردد في تخصيص هذا الدليل وفقًا لاحتياجاتك وتفضيلاتك الخاصة. لمزيد من عمليات Git المتقدمة، راجع [الوثائق الرسمية لـ Git](https://git-scm.com/doc).\\n"},{"lang":"ar","group":"blog","slug":"blog/ultra-low-cost-ddr3-ddr4-lpddr3-lpddr4-memory-test-system","frontmatter":{"title":"نظام اختبار الذاكرة DDR3 وDDR4 وLP-DDR3 وLP-DDR4 منخفض التكلفة للغاية","description":"اكتشف نظام اختبار الذاكرة منخفض التكلفة للغاية لتقنيات DDR3 وDDR4 وLP-DDR3 وLP-DDR4. بسعر حوالي 200,000 دولار أمريكي، يوفر اختبارات عالية السرعة، وتنوعًا، وميزات متقدمة، واستهلاكًا منخفضًا للطاقة. مثالي للشركات التي تسعى لحلول اختبار ذاكرة موثوقة وفعالة من حيث التكلفة.","date":"2024-06-01T00:00:00.000Z","categories":["أشباه الموصلات"],"author":"تان شواي","tags":["DDR3","DDR4","LP-DDR3","LP-DDR4","نظام اختبار الذاكرة"],"draft":false},"content":"\\nإذا كنت مثلي، تبحث دائمًا عن حلول فعّالة من حيث التكلفة دون المساومة على الجودة، فستحب ما سأشاركه اليوم. في عالمنا التقني السريع، التأكد من أن ذاكرة أجهزتنا تعمل بشكل جيد أمر بالغ الأهمية. الخيارات المتقدمة مثل T5503/T5503HS2 رائعة، لكنها تأتي بسعر مرتفع. لحسن الحظ، قدمت Zeeis نظام اختبار ذاكرة منخفض التكلفة بشكل كبير دون التضحية بالأداء.\\n\\n## لماذا هذا مهم\\n\\nعندما علمت لأول مرة عن نظام اختبار الذاكرة من Zeeis، شعرت بالفضول. هذا النظام مصمم للتعامل مع تقنيات الذاكرة DDR3، DDR4، LP-DDR3، وLP-DDR4. سواء كنت تعمل مع أنظمة قديمة أو أحدث التقنيات، فإن هذا النظام يغطي احتياجاتك.\\n\\n### اختبار عالي السرعة\\n\\nواحدة من الميزات البارزة هي قدرته على دعم معدلات نقل البيانات التي تتراوح بين 800 إلى 3200 MT/s لكل من DDR3 وDDR4. يمكنه تقييم وحدات الذاكرة بسرعات تصل إلى 1600 ميغاهرتز. وهذا يعني اختبارات شاملة وموثوقة، مما يضمن أن أجهزتك تعمل بأفضل أداء.\\n\\n### تعددية الاستخدام\\n\\nتعددية استخدام هذا النظام هي ميزة تغير اللعبة. يدعم معايير ذاكرة متعددة، مما يجعله مناسبًا لمجموعة واسعة من التطبيقات، بدءًا من الإلكترونيات الاستهلاكية إلى الحوسبة عالية الأداء. بالإضافة إلى ذلك، فإنه مقاوم للمستقبل. مع ظهور تقنيات ذاكرة جديدة، يمكن ترقية هذا النظام بسهولة لدعمها.\\n\\n### فعالية التكلفة\\n\\nالآن، دعونا نتحدث عن السعر. بسعر حوالي 200,000 دولار أمريكي، يقدم هذا النظام عائدًا ممتازًا على الاستثمار. إنه ميسور التكلفة بما يكفي للشركات الصغيرة والمتوسطة، مما يضمن قدرات اختبار عالية الجودة دون تكاليف باهظة.\\n\\n### ميزات متقدمة\\n\\nيأتي النظام مع خوارزميات اختبار متقدمة، بما في ذلك مولد نمط خوارزمي مدمج (ALPG). وهذا يضمن تقييم دقيق وموثوق لذاكرة كل وحدة لتلبية معايير الأداء الصارمة.\\n\\n### استهلاك منخفض للطاقة\\n\\nما يثير الإعجاب أيضًا هو استهلاكه المنخفض للطاقة. يتماشى ذلك مع الاتجاهات الموجودة في تقنيات ذاكرة LP-DDR3 وLP-DDR4. من خلال العمل عند جهد منخفض، لا يقلل فقط من تكاليف الطاقة بل يقلل أيضًا من الإخراج الحراري، مما يجعله خيارًا صديقًا للبيئة.\\n\\n## لماذا تختار Zeeis؟\\n\\n### قابلية التوسع\\n\\nتم تصميم نظام Zeeis مع مراعاة قابلية التوسع. مع ظهور تقنيات ذاكرة جديدة، يمكن ترقية النظام بسهولة، مما يضمن استخدامًا طويل الأمد وتقليل الحاجة إلى الاستبدال المتكرر.\\n\\n### الدعم والتوثيق\\n\\nميزة كبيرة أخرى هي الدعم الواسع والتوثيق من Zeeis. سواء كنت محترفًا متمرسًا أو جديدًا في اختبار الذاكرة، فإن أدلتهم التفصيلية وخدمة العملاء المستجيبة تضمن تجربة سلسة.\\n\\n### تلبية متطلبات السوق\\n\\nمع الطلب المتزايد على الذاكرة عالية السرعة في كل شيء بدءًا من الهواتف الذكية إلى مراكز البيانات، فإن وجود حل اختبار ذاكرة موثوق وفعّال من حيث التكلفة أمر أساسي. يلبي نظام Zeeis هذه المتطلبات، مما يضمن أن منتجاتك جاهزة للسوق وتعمل بلا عيوب في التطبيقات الواقعية.\\n\\n## خاتمة\\n\\nباختصار، يعد نظام اختبار ذاكرة DDR3، DDR4، LP-DDR3 وLP-DDR4 منخفض التكلفة للغاية من Zeeis خيارًا رائعًا لأولئك الذين يحتاجون إلى حلول اختبار ذاكرة موثوقة ومتعددة الاستخدامات وبأسعار معقولة. إنه يوفر أداءً عاليًا بجزء من تكلفة الأنظمة المتقدمة الأخرى، مما يمكن الشركات من الحفاظ على معايير عالية دون إنفاق مبالغ كبيرة.\\n\\nإذا كنت مهتمًا بتحسين قدرات الاختبار الخاصة بك باستخدام نظام مصمم لمستقبل تكنولوجيا الذاكرة، فلا تتردد في التواصل معي للحصول على مزيد من المعلومات على [i@tanshuai.com](mailto:i@tanshuai.com).\\n\\nاختبار سعيد!\\n"},{"lang":"ar","group":"blog","slug":"blog/usr-bin-sudo-must-be-owned-by-uid-0-and-have-the-setuid-bit-set-on-ubuntu-20-04","frontmatter":{"title":"يجب أن يكون /usr/bin/sudo مملوكًا لـ uid 0 وأن يحتوي على setuid bit في أوبونتو 20.04","date":"2021-10-08T13:07:25.406Z","draft":false,"author":"Tan Shuai","tags":["أوبونتو","لينكس","Sudo"],"categories":["لينكس"]},"content":"\\nإذا واجهت رسالة الخطأ \\"/usr/bin/sudo يجب أن يكون مملوكاً من قبل uid 0 وأن يحتوي على بت setuid\\" على Ubuntu 20.04، اتبع هذه الخطوات لحل المشكلة.\\n\\n1. أثناء عملية التمهيد، اضغط على مفتاح \'ESC\' للوصول إلى قائمة GRUB.\\n\\n![شاشة GRUB](/images/content/wx20211008-210752.png \\"شاشة GRUB\\")\\n\\n2. اختر الخيار الأول، \\"Ubuntu\\"، واضغط على مفتاح \'e\' لتعديل معلمات التمهيد.\\n\\n![تعديل معلمات التمهيد](/images/content/wx20211008-210841.png \\"تعديل معلمات التمهيد\\")\\n\\n3. أضف السلسلة التالية إلى السطر الذي يبدأ بـ \'linux\' للتمهيد في وضع الإنقاذ:\\n\\n```bash\\nsystemd.unit=rescue.target\\n```\\n\\n4. بمجرد الدخول إلى وضع الإنقاذ، نفذ الأمر التالي لاستعادة الأذونات والملكية الصحيحة لـ `/usr/bin/sudo`:\\n\\n```bash\\npkexec chmod a=rx,u+ws /usr/bin/sudo\\n```\\n\\nيقوم هذا الأمر بتعيين الأذونات اللازمة ويضمن أن `sudo` مملوك من قبل المستخدم الجذر مع بت setuid معين.\\n\\nباتباع هذه الخطوات، يجب أن تكون قادرًا على حل المشكلة واستعادة الوظائف الصحيحة لأمر `sudo` على نظام Ubuntu الخاص بك.\\n\\n---\\n"},{"lang":"pt","group":"blog","slug":"blog/aws-codecommit-the-githubs-large-file-storage-git-lfs-free-alternative","frontmatter":{"title":"AWS CodeCommit： A Alternativa Gratuita ao GitHub Large File Storage (Git LFS)","description":"Descubra como o AWS CodeCommit serve como uma alternativa econ\xf4mica e eficiente ao Large File Storage (Git LFS) do GitHub. Este artigo aborda as limita\xe7\xf5es do Git LFS, os benef\xedcios de usar o AWS CodeCommit para armazenamento de arquivos grandes e fornece um guia passo a passo para migrar do Git LFS para o CodeCommit. Melhore seu fluxo de desenvolvimento com a infraestrutura escal\xe1vel e segura da AWS.","date":"2022-02-09T00:00:00.000Z","author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["Desenvolvimento de Software"],"draft":false},"content":"\\n\\\\nAWS CodeCommit oferece uma alternativa robusta ao servi\xe7o Large File Storage (Git LFS) do GitHub, proporcionando uma solu\xe7\xe3o eficiente para gerenciar arquivos grandes em seus reposit\xf3rios Git.\\n\\n## Por Que Voc\xea Deve Reconsiderar o Uso do Git LFS\\n\\nEmbora o Git LFS seja uma escolha popular para lidar com arquivos grandes em reposit\xf3rios Git, ele tem suas limita\xe7\xf5es e desafios. O Git LFS requer configura\xe7\xf5es e gest\xe3o adicionais, o que pode complicar o fluxo de trabalho de desenvolvimento. Al\xe9m disso, os custos de armazenamento e largura de banda associados ao Git LFS podem aumentar rapidamente, especialmente para projetos com numerosos arquivos grandes ou colabora\xe7\xe3o extensa.\\n\\n## Por Que o Servi\xe7o de Armazenamento de Arquivos Grandes do GitHub N\xe3o \xe9 Perfeito\\n\\nO servi\xe7o de Armazenamento de Arquivos Grandes do GitHub, embora \xfatil, tem desvantagens inerentes. A principal preocupa\xe7\xe3o \xe9 o custo associado ao armazenamento e largura de banda, que pode se tornar proibitivo para projetos maiores. Al\xe9m disso, gerenciar o Git LFS pode ser complicado, exigindo que os desenvolvedores instalem e configurem o cliente LFS, rastreiem arquivos espec\xedficos e lidem com potenciais conflitos de mesclagem que surgem devido ao manuseio de arquivos grandes separadamente do restante do reposit\xf3rio.\\n\\n## Por Que Usar o AWS CodeCommit para Armazenar Arquivos Grandes no Git\\n\\nO AWS CodeCommit oferece uma alternativa atraente para armazenar arquivos grandes em reposit\xf3rios Git sem a necessidade do Git LFS. O CodeCommit \xe9 um servi\xe7o de controle de vers\xe3o totalmente gerenciado que se integra perfeitamente com outros servi\xe7os da AWS, oferecendo escalabilidade, seguran\xe7a e efici\xeancia de custos robustas. Ao aproveitar o CodeCommit, os desenvolvedores podem evitar a sobrecarga adicional de gerenciar o Git LFS enquanto se beneficiam da infraestrutura robusta da AWS e do modelo de pre\xe7os \\"pay-as-you-go\\".\\n\\n## Quais S\xe3o as Limita\xe7\xf5es do AWS CodeCommit em Compara\xe7\xe3o com o GitHub\\n\\nApesar de suas vantagens, o AWS CodeCommit tem algumas limita\xe7\xf5es quando comparado ao GitHub. O amplo suporte da comunidade do GitHub, o rico ecossistema de integra\xe7\xf5es e recursos avan\xe7ados como GitHub Actions e GitHub Pages podem n\xe3o ser totalmente replicados no CodeCommit. Al\xe9m disso, desenvolvedores acostumados \xe0 interface do usu\xe1rio e \xe0s ferramentas de colabora\xe7\xe3o do GitHub podem achar que a transi\xe7\xe3o para o CodeCommit requer algum ajuste.\\n\\n## Como Migrar um Reposit\xf3rio Git LFS para o CodeCommit\\n\\nMigrar um reposit\xf3rio Git LFS para o CodeCommit envolve v\xe1rias etapas. Primeiro, certifique-se de que todos os arquivos grandes estejam corretamente rastreados em seu reposit\xf3rio Git LFS. Em seguida, clone o reposit\xf3rio e remova a configura\xe7\xe3o de rastreamento do Git LFS. Depois disso, crie um novo reposit\xf3rio no AWS CodeCommit e envie seu reposit\xf3rio local para ele. Documenta\xe7\xe3o detalhada e scripts est\xe3o dispon\xedveis para simplificar esse processo, garantindo uma transi\xe7\xe3o suave sem perda de dados ou interrup\xe7\xf5es.\\n\\n## Uma Solu\xe7\xe3o Melhor\\n\\nPara equipes e projetos fortemente dependentes do Git LFS, explorar o AWS CodeCommit como uma alternativa pode oferecer benef\xedcios significativos. A integra\xe7\xe3o perfeita do CodeCommit com o ecossistema AWS, juntamente com sua natureza econ\xf4mica e escal\xe1vel, o torna uma op\xe7\xe3o atraente para gerenciar arquivos grandes em reposit\xf3rios Git. Ao mitigar os desafios associados ao Git LFS, o CodeCommit capacita as equipes de desenvolvimento a focar na codifica\xe7\xe3o e colabora\xe7\xe3o, impulsionando a produtividade e a inova\xe7\xe3o.\\n\\nEm conclus\xe3o, o AWS CodeCommit oferece uma alternativa vi\xe1vel, econ\xf4mica e eficiente ao servi\xe7o de armazenamento de grandes arquivos do GitHub. Ao aproveitar a robusta infraestrutura da AWS, os desenvolvedores podem gerenciar grandes arquivos em reposit\xf3rios Git com facilidade, otimizando seus fluxos de trabalho e reduzindo os custos gerais.\\n"},{"lang":"pt","group":"blog","slug":"blog/check-voltage-current-on-macos-for-power-adapter","frontmatter":{"title":"Verificar Voltagem e Corrente no MacOS para o Adaptador de Energia","meta_title":"Verificar Voltagem e Corrente no MacOS para o Adaptador de Energia","date":"2022-02-14T00:00:00.000Z","author":"Tan Shuai","tags":["MacOS","Adaptador de Energia","Voltagem","Corrente"],"categories":["MacOS"],"draft":false},"content":"\\nQuando voc\xea est\xe1 usando um MacBook, pode querer verificar a voltagem e a corrente do adaptador de energia. Aqui est\xe1 uma maneira simples de verificar a voltagem e a corrente do adaptador de energia no MacOS.\\n\\nAbra o Terminal.app e digite o comando:\\n\\n`ioreg -l -n AppleSmartBattery -r |grep AppleRawAdapterDetails`\\n\\nVoc\xea obter\xe1 as seguintes informa\xe7\xf5es, incluindo corrente e voltagem:\\n\\n```json\\n\\"AppleRawAdapterDetails\\" = ({\\"IsWireless\\"=No,\\"AdapterID\\"=0,\\"FamilyCode\\"=18446744073172697098,\\"Watts\\"=89,**\\"Current\\"=4450**,\\"PMUConfiguration\\"=4448,**\\"Voltage\\"=20000**})\\n"},{"lang":"pt","group":"blog","slug":"blog/convert-markdown-academic-paper-pdf-macos","frontmatter":{"title":"Converter Rapidamente Markdown para PDF de Estilo Acad\xeamico no macOS","meta_title":"Converter Markdown para PDF de Estilo Acad\xeamico no macOS com Pandoc","description":"Aprenda a converter documentos Markdown para PDFs de estilo acad\xeamico no macOS usando Pandoc e BasicTeX. Este m\xe9todo r\xe1pido e simples \xe9 perfeito para criar arquivos PDF profissionais para trabalhos acad\xeamicos.","date":"2022-03-03T00:00:00.000Z","categories":["Desenvolvimento de Software"],"author":"Tan Shuai","tags":["Pandoc","LaTeX","PDF","Trabalho","Markdown","macOS"],"draft":false},"content":"\\nNeste guia, vou mostrar como converto documentos Markdown em PDFs no estilo de artigos acad\xeamicos no macOS usando Pandoc e BasicTeX. Este m\xe9todo \xe9 r\xe1pido e simples, perfeito para quando voc\xea precisa criar arquivos PDF com apar\xeancia profissional para seus artigos acad\xeamicos.\\n\\n### Passo 1: Instalar Pandoc e BasicTeX\\n\\nPrimeiro, voc\xea precisar\xe1 instalar o Pandoc e o BasicTeX no seu sistema macOS. Veja como fiz isso:\\n\\n1. **Instalar Pandoc**: Abra o Terminal e insira o seguinte comando para instalar o Pandoc:\\n\\n   ```bash\\n   brew install pandoc\\n   ```\\n\\n2. **Instalar BasicTeX**: Como o MacTeX \xe9 bastante grande, optei pelo pacote menor BasicTeX para economizar espa\xe7o. Execute este comando:\\n\\n   ```bash\\n   brew install --cask basictex\\n   ```\\n\\n3. **Instalar Pacotes Comuns do LaTeX**: Para garantir que voc\xea tenha os pacotes necess\xe1rios para gerar PDFs, execute estes comandos:\\n   ```bash\\n   sudo tlmgr update --self\\n   sudo tlmgr install collection-basic collection-latex collection-latexrecommended collection-fontsrecommended\\n   ```\\n\\n### Passo 2: Prepare Seu Arquivo Markdown\\n\\nEm seguida, crie seu arquivo Markdown (por exemplo, `paper.md`). Veja como configurei meu arquivo, incluindo o t\xedtulo, autor, data e informa\xe7\xf5es de contato:\\n\\n```markdown\\n---\\ntitle: \\"Your Paper Title\\"\\nsubtitle: \\"Optional Subtitle\\"\\ndate: \\\\today\\n\\nauthor: |\\n  | Your Name\\n  | your-email@tanshuai.com\\n  | www.tanshuai.com\\n---\\n\\n# Abstract\\n\\nYour abstract here.\\n\\n# Introduction\\n\\nYour introduction here.\\n\\n# Methodology\\n\\nYour methodology here.\\n\\n# Results\\n\\nYour results here.\\n\\n# Conclusion\\n\\nYour conclusion here.\\n```\\n\\n### Passo 3: Converter Markdown para PDF com Pandoc\\n\\nAgora, voc\xea pode converter seu arquivo Markdown em um PDF. Usei o seguinte comando no Terminal:\\n\\n```bash\\npandoc paper.md -o paper.pdf --pdf-engine=xelatex\\n```\\n\\nEste comando usa o template LaTeX padr\xe3o do Pandoc para converter o arquivo Markdown em um PDF no estilo de artigos acad\xeamicos, incluindo as informa\xe7\xf5es de contato do autor abaixo do nome.\\n\\n### Dicas Adicionais\\n\\n- **Template LaTeX Personalizado**: Se voc\xea precisar de formata\xe7\xe3o mais avan\xe7ada ou estilos espec\xedficos, pode criar ou baixar um template LaTeX personalizado e us\xe1-lo com o Pandoc:\\n\\n  ```bash\\n  pandoc paper.md -o paper.pdf --pdf-engine=xelatex --template=seu-template.tex\\n  ```\\n\\n- **Mais Metadados**: Voc\xea pode adicionar informa\xe7\xf5es extras no cabe\xe7alho de metadados YAML, como um resumo ou palavras-chave, e us\xe1-los em templates personalizados.\\n\\n### Conclus\xe3o\\n\\nSeguindo estes passos, voc\xea pode facilmente converter documentos Markdown em PDFs no estilo de artigos acad\xeamicos no macOS. Usar Pandoc e BasicTeX torna esse processo r\xe1pido e eficiente, perfeito para quando voc\xea precisa gerar documentos PDF profissionais. Seja preparando artigos acad\xeamicos, relat\xf3rios t\xe9cnicos ou outros documentos formais, este m\xe9todo funciona muito bem. Incluir informa\xe7\xf5es de contato no cabe\xe7alho de metadados adiciona um toque profissional aos seus documentos.\\n\\nEspero que voc\xea ache este guia \xfatil! Se tiver alguma d\xfavida ou encontrar problemas, sinta-se \xe0 vontade para entrar em contato. Boa escrita!\\n"},{"lang":"pt","group":"blog","slug":"blog/electron-build-tools-error-error-failed-to-run-choco-install-pywin32-yes","frontmatter":{"title":"Ferramentas de Build do Electron `ERRO Erro： Falha ao executar \\"choco install pywin32 --yes\\"`","date":"2021-09-08T00:00:00.000Z","draft":false,"author":"Tan Shuai","tags":["Electron","Ferramentas de Build","PyWin32","Chocolatey","Win32"],"categories":["Desenvolvimento de Software"]},"content":"\\nAo trabalhar com Electron Build Tools, voc\xea pode encontrar um erro relacionado \xe0 instala\xe7\xe3o do pywin32 via Chocolatey. Isso pode ser frustrante, especialmente quando \xe9 uma depend\xeancia necess\xe1ria para o seu projeto. Abaixo est\xe1 uma explica\xe7\xe3o detalhada do problema e poss\xedveis etapas para resolv\xea-lo.\\n\\n### O Erro\\n\\nAo iniciar um projeto Electron usando Electron Build Tools, voc\xea pode ver a seguinte mensagem de erro:\\n\\n```bash\\nE:\\\\\\\\>e init main-testing -i testing --root=e:/src/electron\\nWARN A fixable error has occurred\\n--> A required dependency \\"pywin32\\" could not be located, it probably has to be installed.\\nDo you want build-tools to try fix this for you? [y/n]: y\\n\\nRunning \\"choco install pywin32 --yes\\"\\nERROR Error: Failed to run \\"choco install pywin32 --yes\\"\\n    at spawnSyncWithLog (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:11:11)\\n    at fix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:39:9)\\n    at maybeAutoFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\maybe-auto-fix.js:13:3)\\n    at whichAndFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\which.js:10:5)\\n    at checkPlatformDependencies (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:61:7)\\n    at Object.<anonymous> (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\e-init.js:165:3)\\n    at Module._compile (internal/modules/cjs/loader.js:1072:14)\\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1101:10)\\n    at Module.load (internal/modules/cjs/loader.js:937:32)\\n    at Function.Module._load (internal/modules/cjs/loader.js:778:12)\\n```\\n\\nEsse erro geralmente ocorre porque o script de instala\xe7\xe3o do pacote pywin32 n\xe3o consegue encontrar os arquivos necess\xe1rios no servidor remoto. Isso resulta em um erro 404, indicando que o arquivo n\xe3o est\xe1 dispon\xedvel na URL especificada.\\n\\n### Entendendo o Erro\\n\\nA parte chave da mensagem de erro \xe9:\\n\\n```bash\\nERROR: The remote file either doesn\'t exist, is unauthorized, or is forbidden for url \'http://sourceforge.net/projects/pywin32/files/pywin32/Build%20219/pywin32-219.win-amd64-py3.9.exe/download\'. Exception calling \\"GetResponse\\" with \\"0\\" argument(s): \\"The remote server returned an error: (404) Not Found.\\"\\n```\\n\\nIsso indica que a URL de download para pywin32 n\xe3o \xe9 mais v\xe1lida, o que significa que o Chocolatey n\xe3o pode recuperar os arquivos de instala\xe7\xe3o necess\xe1rios.\\n\\n### Passos para Solu\xe7\xe3o de Problemas\\n\\nAqui est\xe3o algumas etapas que voc\xea pode seguir para resolver este problema:\\n\\n#### 1. Verificar a Instala\xe7\xe3o do Chocolatey\\n\\nCertifique-se de que o Chocolatey est\xe1 instalado corretamente e atualizado para a vers\xe3o mais recente. Voc\xea pode verificar a vers\xe3o do Chocolatey com:\\n\\n```bash\\nchoco --version\\n```\\n\\nPara atualizar o Chocolatey, use:\\n\\n```bash\\nchoco upgrade chocolatey\\n```\\n\\n#### 2. Instalar pywin32 Manualmente\\n\\nComo a instala\xe7\xe3o automatizada est\xe1 falhando, tente instalar pywin32 manualmente. Voc\xea pode baixar a vers\xe3o apropriada da p\xe1gina oficial de lan\xe7amentos do [pywin32 no GitHub](https://github.com/mhammond/pywin32/releases) e instal\xe1-la manualmente.\\n\\n#### 3. Modificar o Script de Instala\xe7\xe3o\\n\\nSe voc\xea tiver controle sobre o script do Electron Build Tools, pode modific\xe1-lo para apontar para uma URL v\xe1lida para pywin32 ou lidar com o processo de instala\xe7\xe3o manual.\\n\\n#### 4. Use um Gerenciador de Pacotes Alternativo\\n\\nSe o Chocolatey continuar a falhar, considere usar um gerenciador de pacotes alternativo como o pip para pacotes Python:\\n\\n```bash\\npip install pywin32\\n```\\n\\n### Exemplo de Instala\xe7\xe3o Manual do pywin32\\n\\n1. Baixe o instalador apropriado do pywin32 a partir dos [lan\xe7amentos oficiais do GitHub](https://github.com/mhammond/pywin32/releases).\\n2. Execute o instalador e siga as instru\xe7\xf5es de instala\xe7\xe3o.\\n3. Verifique a instala\xe7\xe3o executando um script Python simples que importe o pywin32:\\n\\n```python\\nimport win32api\\nprint(win32api.GetVersionEx())\\n```\\n\\nEncontrar o erro \\"Failed to run `choco install pywin32 --yes`\\" pode ser um obst\xe1culo no seu processo de desenvolvimento. No entanto, ao entender a causa raiz e seguir os passos descritos acima, voc\xea pode superar esse problema e continuar com a configura\xe7\xe3o do seu projeto Electron.\\n"},{"lang":"pt","group":"blog","slug":"blog/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining","frontmatter":{"title":"Segredos do Design ASIC Customizado para Minera\xe7\xe3o de Bitcoin e Criptomoedas","date":"2022-05-30T00:00:00.000Z","update":"2024-08-02T00:00:00.000Z","categories":["Semicondutores","Bitcoin","Criptomoeda","Blockchain"],"author":"Tan Shuai","tags":["ASIC","Bitcoin","Minera\xe7\xe3o","BTC"],"draft":false,"contact":"Tan Shuai | tanshuai@btc.com | tanshuai.com"},"content":"\\nTan Shuai  \\n[tanshuai@btc.com](mailto:tanshuai@btc.com)  \\n[tanshuai.com](https://tanshuai.com)\\n\\n---\\n\\n## Resumo\\n\\nNo competitivo mundo da minera\xe7\xe3o de criptomoedas, a efici\xeancia energ\xe9tica, o desempenho do hashrate e a confiabilidade s\xe3o primordiais. Este artigo explora o design ASIC (Application-Specific Integrated Circuit) full custom de ponta, revelando segredos da ind\xfastria e metodologias especializadas que impulsionam a minera\xe7\xe3o de Bitcoin e criptomoedas de alto desempenho. Escrito por um especialista em tecnologia de uma das principais empresas de mineradores ASIC, este artigo utiliza t\xe9cnicas avan\xe7adas de design, layout f\xedsico meticuloso e processos de verifica\xe7\xe3o abrangentes para mostrar as capacidades excepcionais dos ASICs full custom em maximizar a efici\xeancia e a lucratividade da minera\xe7\xe3o.\\n\\n## Introdu\xe7\xe3o\\n\\nA evolu\xe7\xe3o da minera\xe7\xe3o de criptomoedas, particularmente a minera\xe7\xe3o de Bitcoin, passou de CPUs de prop\xf3sito geral, FPGAs e GPUs para ASICs especializados. Esses ASICs oferecem desempenho e efici\xeancia energ\xe9tica incompar\xe1veis. O design ASIC full custom representa o \xe1pice dessa evolu\xe7\xe3o, permitindo solu\xe7\xf5es personalizadas que atendem \xe0s demandas espec\xedficas das opera\xe7\xf5es de minera\xe7\xe3o.\\n\\nGrande parte da literatura existente sobre design ASIC para minera\xe7\xe3o de criptomoedas vem da academia ou de empresas n\xe3o mineradoras, muitas vezes carecendo de aplicabilidade no mundo real. At\xe9 o momento, apenas algumas empresas, principalmente chinesas (por exemplo, MicroBT, Bitmain), desenvolveram com sucesso ASICs de minera\xe7\xe3o de Bitcoin comercializ\xe1veis. Este artigo busca preencher essa lacuna, oferecendo insights extra\xeddos da pr\xe1tica real da ind\xfastria, proporcionando uma perspectiva fundamentada nas realidades do setor de minera\xe7\xe3o.\\n\\nComo profissional com mais de dez anos de experi\xeancia na ind\xfastria de tecnologia, o autor deste artigo desenvolveu o maior minerador ASIC de Bitcoin do mundo (WhatsMiner), mineradores de LTC/DOGE e ETH, e desempenhou um papel fundamental em empresas como MicroBT, BTC.COM e outras fablesses p\xfablicas. Ele ocupou posi\xe7\xf5es-chave em empresas listadas na NASDAQ, HKSE e NYSE. Com vasta experi\xeancia no estabelecimento de parcerias com TSMC, Texas Instruments, ARM e Intel, ele traz um vasto conhecimento e expertise pr\xe1tica para o campo do design ASIC customizado para minera\xe7\xe3o de Bitcoin e criptomoedas.\\n\\n## Metodologia e Fluxo de Design\\n\\n### Filosofia de Design\\n\\nNossa abordagem ao design ASIC full custom \xe9 orientada pelo foco em maximizar PPA (Power, Performance, and Area), particularmente em condi\xe7\xf5es de opera\xe7\xe3o de baixa voltagem. Esta se\xe7\xe3o descrever\xe1 nossa filosofia e metodologia de design:\\n\\n1. **Arquitetura Pipeline**: Aproveitando os benef\xedcios inerentes das estruturas de pipeline para algoritmos de minera\xe7\xe3o, caracterizados por registradores e est\xe1gios de l\xf3gica combinacional. Utilizando uma arquitetura pipeline, podemos lidar eficientemente com as opera\xe7\xf5es de alta frequ\xeancia necess\xe1rias para a minera\xe7\xe3o de criptomoedas.\\n2. **Netlist e Coloca\xe7\xe3o Manual**: Scripting detalhado para cria\xe7\xe3o de netlist e coloca\xe7\xe3o manual de c\xe9lulas para otimizar caminhos cr\xedticos. Isso permite um controle preciso sobre o timing e reduz efeitos parasit\xe1rios.\\n3. **Bibliotecas de C\xe9lulas Customizadas**: Desenvolvimento de c\xe9lulas especializadas com contagens de transistores otimizadas e recursos din\xe2micos de economia de energia. As c\xe9lulas customizadas s\xe3o projetadas para operar nas menores voltagens poss\xedveis, garantindo consumo m\xednimo de energia.\\n\\n### Alcan\xe7ando Benef\xedcios de PPA\\n\\nEstrat\xe9gias detalhadas para alcan\xe7ar benef\xedcios de PPA atrav\xe9s de design customizado:\\n\\n1. **Design de Registradores Customizados**: Utiliza\xe7\xe3o de registradores multi-bit e designs baseados em latch para reduzir o consumo de energia do clock e melhorar o empr\xe9stimo de tempo. Registradores multi-bit minimizam o consumo de energia da \xe1rvore de clock e reduzem a \xe1rea total.\\n2. **Posicionamento Manual**: Redu\xe7\xe3o do comprimento dos fios e balanceamento dos tempos de configura\xe7\xe3o e reten\xe7\xe3o para melhorar o desempenho geral. O posicionamento manual permite um melhor controle sobre os atrasos de interconex\xe3o e a diafonia, melhorando a integridade do sinal e reduzindo o consumo de energia.\\n3. **Design de C\xe9lulas Otimizadas**: C\xe9lulas customizadas s\xe3o projetadas para operar em voltagens mais baixas, minimizando o consumo de energia din\xe2mica e maximizando a efici\xeancia. Ao adaptar os designs das c\xe9lulas \xe0s necessidades espec\xedficas dos algoritmos de minera\xe7\xe3o, podemos alcan\xe7ar melhorias significativas no desempenho.\\n\\n### Confiabilidade Sob Baixa Voltagem\\n\\nGarantir a confiabilidade da l\xf3gica de temporiza\xe7\xe3o customizada em baixas voltagens envolve:\\n\\n1. **Simula\xe7\xe3o Precisa**: Simula\xe7\xf5es em n\xedvel de circuito para validar o comportamento das c\xe9lulas customizadas sob condi\xe7\xf5es espec\xedficas. Ferramentas como SPICE s\xe3o usadas para simula\xe7\xf5es el\xe9tricas detalhadas para garantir que as c\xe9lulas operem corretamente em todas as varia\xe7\xf5es de PVT (Processo, Voltagem, Temperatura).\\n2. **Consist\xeancia no Posicionamento**: Posicionamento manual para garantir uniformidade e reduzir variabilidade. Controlando o layout f\xedsico, podemos minimizar o impacto das varia\xe7\xf5es do processo e garantir um desempenho consistente.\\n3. **Calibra\xe7\xe3o Precisa de PVT**: Verifica\xe7\xe3o contra varia\xe7\xf5es de processo, voltagem e temperatura. Testes extensivos e calibra\xe7\xe3o s\xe3o realizados para garantir a robustez do design em diferentes condi\xe7\xf5es operacionais.\\n\\n## Estudos de Caso e Resultados\\n\\nApresentando dados do mundo real e estudos de caso de tape-outs de m\xe1scara completa:\\n\\n| Projeto | N\xf3 de Processo | Efici\xeancia de Voltagem/Energia | Algoritmo |\\n| ------- | -------------- | ----------------------------- | --------- |\\n| SC      | TSMC 28nm      | 0.45V, 257J/T                 | Blake2b   |\\n| DCR     | TSMC 28nm      | 0.45V, 150J/T                 | Blake256  |\\n| DASH    | TSMC 16nm      | 0.38V, 6.2J/G                 | X11       |\\n| BTC     | TSMC 16nm      | 0.38V, 65J/T                  | SHA-256d  |\\n| BTC     | TSMC 7nm       | 0.30V, 37J/T                  | SHA-256d  |\\n| BTC     | Samsung 8nm    | 0.31V, 45J/T                  | SHA-256d  |\\n| BTC     | SMIC N+1       | 0.30V, 35J/T                  | SHA-256d  |\\n\\nEsses resultados demonstram os ganhos substanciais em efici\xeancia e desempenho alcan\xe7\xe1veis atrav\xe9s de nossa abordagem de design customizado.\\n\\n## Integra\xe7\xe3o e Verifica\xe7\xe3o\\n\\n### Assinatura de C\xe9lulas Mistas\\n\\n- **Integra\xe7\xe3o de C\xe9lulas Customizadas**: C\xe9lulas customizadas s\xe3o integradas com c\xe9lulas padr\xe3o da TSMC e outras foundries, garantindo compatibilidade e desempenho. As c\xe9lulas customizadas s\xe3o caracterizadas e validadas para atender aos requisitos da biblioteca de c\xe9lulas padr\xe3o, permitindo uma integra\xe7\xe3o sem problemas.\\n- **Estrat\xe9gias de Assinatura**: Estrat\xe9gias para garantir compatibilidade e desempenho sem problemas incluem verifica\xe7\xf5es detalhadas de DRC (Verifica\xe7\xe3o de Regras de Design) e LVS (Layout Versus Esquem\xe1tico), bem como an\xe1lises de temporiza\xe7\xe3o e energia usando ferramentas EDA (Automa\xe7\xe3o de Design Eletr\xf4nico) padr\xe3o da ind\xfastria.\\n\\n### Co-design Digital e Anal\xf3gico\\n\\n- **T\xe9cnicas de Integra\xe7\xe3o**: Integra\xe7\xe3o de componentes digitais e anal\xf3gicos para otimizar o desempenho geral do chip. T\xe9cnicas como verifica\xe7\xe3o de sinal misto e co-simula\xe7\xe3o s\xe3o usadas para garantir a integra\xe7\xe3o e funcionalidade adequadas.\\n- **Metodologias de Verifica\xe7\xe3o**: Metodologias para garantir robustez em diferentes condi\xe7\xf5es operacionais incluem an\xe1lise de canto, simula\xe7\xf5es de Monte Carlo e verifica\xe7\xe3o de confiabilidade para abordar envelhecimento e eletromigra\xe7\xe3o.\\n\\n## Conclus\xe3o\\n\\nO design ASIC full custom oferece vantagens significativas para a minera\xe7\xe3o de Bitcoin e criptomoedas, proporcionando desempenho, efici\xeancia energ\xe9tica e confiabilidade incompar\xe1veis. Ao desvendar os segredos do design ASIC customizado de ponta, este artigo destaca as metodologias e inova\xe7\xf5es que diferenciam os l\xedderes da ind\xfastria. \xc0 medida que a minera\xe7\xe3o de criptomoedas continua a evoluir, os ASICs customizados desempenhar\xe3o um papel crucial na condu\xe7\xe3o da pr\xf3xima gera\xe7\xe3o de hardware de minera\xe7\xe3o de alta efici\xeancia e alto desempenho.\\n\\n[Vers\xe3o PDF do Artigo](/docs/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining.pdf)\\n"},{"lang":"pt","group":"blog","slug":"blog/get-current-commit-id-of-git-and-update-to-package-json","frontmatter":{"title":"Obter o ID do commit atual do Git e atualizar no package.json","date":"2021-08-21T09:19:58.875Z","draft":false,"author":"Tan Shuai","tags":["Git","Package.json","Node.js"],"categories":["Desenvolvimento de Software"]},"content":"\\nAo desenvolver um projeto Node.js, voc\xea pode querer acompanhar o ID do commit atual do seu reposit\xf3rio Git. Essa informa\xe7\xe3o pode ser \xfatil para depura\xe7\xe3o, versionamento ou prop\xf3sitos de implanta\xe7\xe3o. Uma maneira de conseguir isso \xe9 atualizando o arquivo `package.json` com o ID do commit atual durante o processo de build. Este artigo vai te guiar pelos passos para obter o ID do commit atual do Git e atualiz\xe1-lo no arquivo `package.json` usando Node.js.\\n\\n```bash\\n\\"predev\\": \\"node ./node_modules/json/lib/json.js -I -f package.json -e \\\\\\"this.commit=\'$(git rev-parse --short HEAD)\'\\\\\\"\\",\\n"},{"lang":"pt","group":"blog","slug":"blog/migrate-a-github-lfs-git-large-file-storage-repository-to-aws-codecommit","frontmatter":{"title":"Migrar um reposit\xf3rio GitHub LFS (Git Large File Storage) para o AWS CodeCommit","date":"2022-02-09T09:36:57.481Z","draft":false,"author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["Desenvolvimento de Software"]},"content":"\\nRecentemente migrei um dos meus reposit\xf3rios do GitHub, que usa o Git Large File Storage (LFS), para o AWS CodeCommit. Pensei em compartilhar o processo com voc\xea caso esteja procurando fazer algo semelhante. Aqui est\xe1 um guia passo a passo baseado na minha experi\xeancia.\\n\\n## Pr\xe9-requisitos\\n\\nAntes de come\xe7armos, certifique-se de ter essas ferramentas instaladas:\\n\\n- Git\\n- Git LFS\\n- AWS CLI\\n\\n## Guia Passo a Passo\\n\\n### 1. Clone o Reposit\xf3rio\\n\\nPrimeiro, clone seu reposit\xf3rio do GitHub usando a op\xe7\xe3o `--mirror`. Isso cria um clone bare do reposit\xf3rio, incluindo todos os branches e tags.\\n\\n```zsh\\ngit clone --mirror https://github.com/tanshuai/designs.git designs\\n```\\n\\n### 2. Verifique os Arquivos LFS\\n\\nEm seguida, liste todos os arquivos gerenciados pelo Git LFS para garantir que tudo esteja no lugar.\\n\\n```zsh\\ngit lfs ls-files\\n```\\n\\nVoc\xea dever\xe1 ver algo assim:\\n\\n```\\ncadfa0bc9e * Brochure-Trifold-Draft.ai\\naf9b8b8a1c * Brochure-Trifold-English.ai\\n27bb5f4e61 * Brochure-Trifold.ai\\n```\\n\\n### 3. Migre os Arquivos LFS\\n\\nAgora, exporte os arquivos LFS. Este passo garante que eles fa\xe7am parte do hist\xf3rico do seu reposit\xf3rio.\\n\\n```zsh\\ngit lfs migrate export --include=\\"*.ai\\" --everything\\n```\\n\\nVoc\xea ver\xe1 algumas mensagens de progresso como estas:\\n\\n```\\nmigrate: Sorting commits: ..., done.\\nmigrate: Rewriting commits: 100% (20/20), done.\\nmaster   98a3c48d85... -> 82f8873b41...\\nmigrate: Updating refs: ..., done.\\nmigrate: checkout: ..., done.\\nprune: 3 local object(s), 0 retained, done.\\ncadfa0bc9e... (133 MB)\\n27bb5f4e61... (131 MB)\\naf9b8b8a1c... (130 MB), done.\\nprune: Deleting objects: 100% (3/3), done.\\n```\\n\\n### 4. Limpeza do LFS\\n\\nRemova as informa\xe7\xf5es de rastreamento do Git LFS e desinstale o Git LFS.\\n\\n```zsh\\ngit lfs ls-files\\ngit rm .gitattributes -f\\ngit lfs uninstall\\n```\\n\\n### 5. Fa\xe7a Push para o AWS CodeCommit\\n\\nFinalmente, fa\xe7a push do seu reposit\xf3rio para o AWS CodeCommit.\\n\\n```zsh\\ngit push https://git-codecommit.us-east-2.amazonaws.com/v1/repos/designs --all\\n```\\n\\nIsso \xe9 tudo! Seguindo esses passos, consegui migrar meu reposit\xf3rio GitHub LFS para o AWS CodeCommit. Os arquivos grandes e o hist\xf3rico do reposit\xf3rio foram preservados perfeitamente.\\n\\n## Conclus\xe3o\\n\\nMigrar um reposit\xf3rio do GitHub que usa o Git LFS para o AWS CodeCommit \xe9 bem simples se voc\xea seguir os passos corretos. Se tiver alguma d\xfavida ou encontrar problemas, a [documenta\xe7\xe3o do AWS CodeCommit](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) e a [documenta\xe7\xe3o do Git LFS](https://git-lfs.github.com/) s\xe3o \xf3timos recursos.\\n\\nEspero que voc\xea ache este guia \xfatil. Feliz codifica\xe7\xe3o!\\n"},{"lang":"pt","group":"blog","slug":"blog/reset-restore-all-subdirectories-of-git","frontmatter":{"title":"Redefinir/Restaurar Todos os Subdiret\xf3rios do Git","date":"2021-09-22T08:33:49.201Z","draft":false,"author":"Tan Shuai","tags":["Git","Controle de Vers\xe3o"],"categories":["Desenvolvimento de Software"]},"content":"\\nGerenciar um reposit\xf3rio Git de forma eficaz muitas vezes requer redefinir ou restaurar subdiret\xf3rios para manter uma base de c\xf3digo limpa e funcional. Este guia fornece uma abordagem concisa, passo a passo, para redefinir ou restaurar todos os subdiret\xf3rios em um reposit\xf3rio Git.\\n\\n## Redefinindo Subdiret\xf3rios\\n\\nO seguinte comando Git remove todos os arquivos e diret\xf3rios n\xe3o rastreados do reposit\xf3rio. Isso \xe9 \xfatil para limpar arquivos desnecess\xe1rios antes de realizar uma redefini\xe7\xe3o ou restaura\xe7\xe3o.\\n\\n```bash\\ngit clean -xfdf -- .\\n```\\n\\n### Descri\xe7\xe3o do Comando:\\n\\n- `-x`: Remove todos os arquivos n\xe3o rastreados, incluindo aqueles ignorados pelo `.gitignore`.\\n- `-f`: For\xe7a a remo\xe7\xe3o de arquivos.\\n- `-d`: Remove diret\xf3rios n\xe3o rastreados.\\n- `-- .`: Aplica o comando ao diret\xf3rio atual e todos os subdiret\xf3rios.\\n\\n## Restaurando Subdiret\xf3rios\\n\\nPara restaurar todos os arquivos no reposit\xf3rio para seu estado mais recente, use o seguinte comando:\\n\\n```bash\\ngit checkout {HEAD OR BRANCH} -- .\\n```\\n\\n### Descri\xe7\xe3o do Comando:\\n\\n- `{HEAD OR BRANCH}`: Substitua por `HEAD` para redefinir para o \xfaltimo commit ou especifique o nome de um branch para redefinir para um branch espec\xedfico.\\n- `-- .`: Aplica o comando ao diret\xf3rio atual e todos os subdiret\xf3rios.\\n\\nUsando esses comandos, voc\xea pode garantir que seu reposit\xf3rio esteja livre de arquivos indesejados e que todos os arquivos sejam restaurados aos seus estados comprometidos. Esse processo ajuda a manter uma base de c\xf3digo limpa e organizada, facilitando a colabora\xe7\xe3o e o desenvolvimento.\\n\\nSinta-se \xe0 vontade para personalizar este guia de acordo com suas necessidades e prefer\xeancias espec\xedficas. Para opera\xe7\xf5es Git mais avan\xe7adas, consulte a [documenta\xe7\xe3o oficial do Git](https://git-scm.com/doc).\\n"},{"lang":"pt","group":"blog","slug":"blog/ultra-low-cost-ddr3-ddr4-lpddr3-lpddr4-memory-test-system","frontmatter":{"title":"Sistema de Teste de Mem\xf3ria DDR3, DDR4, LP-DDR3 e LP-DDR4 de Baix\xedssimo Custo","description":"Descubra o sistema de teste de mem\xf3ria de baix\xedssimo custo para tecnologias DDR3, DDR4, LP-DDR3 e LP-DDR4. Com pre\xe7o em torno de $200.000 USD, oferece testes de alta velocidade, versatilidade, recursos avan\xe7ados e baixo consumo de energia. Perfeito para empresas que buscam solu\xe7\xf5es de teste de mem\xf3ria econ\xf4micas e confi\xe1veis.","date":"2024-06-01T00:00:00.000Z","categories":["Semicondutores"],"author":"Tan Shuai","tags":["DDR3","DDR4","LP-DDR3","LP-DDR4","Sistema de Teste de Mem\xf3ria"],"draft":false},"content":"\\nSe voc\xea \xe9 como eu, sempre em busca de solu\xe7\xf5es econ\xf4micas sem comprometer a qualidade, voc\xea vai adorar o que tenho para compartilhar hoje. Em nosso mundo tecnol\xf3gico acelerado, garantir que a mem\xf3ria dos nossos dispositivos esteja em dia \xe9 crucial. Op\xe7\xf5es de ponta como o T5503/T5503HS2 s\xe3o fant\xe1sticas, mas v\xeam com um pre\xe7o alto. Felizmente, a Zeeis surgiu com um sistema de teste de mem\xf3ria de ultra baixo custo que n\xe3o sacrifica o desempenho.\\n\\n## Por Que Isso Importa\\n\\nQuando ouvi falar pela primeira vez do sistema de teste de mem\xf3ria da Zeeis, fiquei intrigado. Este sistema foi projetado para lidar com as tecnologias de mem\xf3ria DDR3, DDR4, LP-DDR3 e LP-DDR4. Quer voc\xea esteja trabalhando com sistemas antigos ou com a tecnologia mais recente, este sistema tem o que voc\xea precisa.\\n\\n### Teste em Alta Velocidade\\n\\nUma das caracter\xedsticas marcantes \xe9 sua capacidade de suportar taxas de transfer\xeancia de dados que variam de 800 a 3200 MT/s para DDR3 e DDR4. Ele pode avaliar m\xf3dulos de mem\xf3ria em velocidades de clock de at\xe9 1600 MHz. Isso significa testes completos e confi\xe1veis, garantindo que seus dispositivos funcionem da melhor forma.\\n\\n### Versatilidade\\n\\nA versatilidade deste sistema \xe9 um divisor de \xe1guas. Ele suporta m\xfaltiplos padr\xf5es de mem\xf3ria, tornando-o adequado para uma ampla gama de aplica\xe7\xf5es, desde eletr\xf4nicos de consumo at\xe9 computa\xe7\xe3o de alto desempenho. Al\xe9m disso, \xe9 \xe0 prova de futuro. \xc0 medida que surgem novas tecnologias de mem\xf3ria, este sistema pode ser facilmente atualizado para suport\xe1-las.\\n\\n### Efici\xeancia de Custo\\n\\nAgora, vamos falar sobre o pre\xe7o. A cerca de $200.000 USD, este sistema oferece um excelente retorno sobre o investimento. \xc9 acess\xedvel o suficiente para pequenas e m\xe9dias empresas, garantindo capacidades de teste de alta qualidade sem quebrar o banco.\\n\\n### Recursos Avan\xe7ados\\n\\nO sistema vem com algoritmos de teste avan\xe7ados, incluindo um gerador de padr\xe3o algor\xedtmico integrado (ALPG). Isso garante uma avalia\xe7\xe3o precisa e confi\xe1vel da mem\xf3ria, de modo que cada m\xf3dulo atenda a rigorosos padr\xf5es de desempenho.\\n\\n### Baixo Consumo de Energia\\n\\nO que tamb\xe9m \xe9 impressionante \xe9 seu baixo consumo de energia. Isso est\xe1 alinhado com as tend\xeancias observadas nas tecnologias de mem\xf3ria LP-DDR3 e LP-DDR4. Ao operar em tens\xf5es mais baixas, ele n\xe3o s\xf3 reduz os custos de energia, mas tamb\xe9m minimiza a sa\xedda t\xe9rmica, tornando-o uma escolha ecol\xf3gica.\\n\\n## Por Que Escolher a Zeeis?\\n\\n### Escalabilidade\\n\\nO sistema da Zeeis foi projetado com a escalabilidade em mente. \xc0 medida que surgem novas tecnologias de mem\xf3ria, o sistema pode ser facilmente atualizado, garantindo usabilidade a longo prazo e reduzindo a necessidade de substitui\xe7\xf5es frequentes.\\n\\n### Suporte e Documenta\xe7\xe3o\\n\\nOutro grande ponto positivo \xe9 o extenso suporte e documenta\xe7\xe3o da Zeeis. Quer voc\xea seja um profissional experiente ou novo em testes de mem\xf3ria, seus guias detalhados e servi\xe7o ao cliente responsivo garantem uma experi\xeancia tranquila.\\n\\n### Atendendo \xe0s Demandas do Mercado\\n\\nCom a crescente demanda por mem\xf3ria de alta velocidade em tudo, desde smartphones at\xe9 centros de dados, ter uma solu\xe7\xe3o de teste de mem\xf3ria confi\xe1vel e econ\xf4mica \xe9 essencial. O sistema da Zeeis atende a essas demandas, garantindo que seus produtos estejam prontos para o mercado e funcionem perfeitamente em aplica\xe7\xf5es do mundo real.\\n\\n## Conclus\xe3o\\n\\nEm resumo, o Sistema de Teste de Mem\xf3ria de Ultra Baixo Custo DDR3, DDR4, LP-DDR3 & LP-DDR4 da Zeeis \xe9 uma op\xe7\xe3o fant\xe1stica para aqueles de n\xf3s que precisam de solu\xe7\xf5es de teste de mem\xf3ria confi\xe1veis, vers\xe1teis e acess\xedveis. Ele oferece alto desempenho a uma fra\xe7\xe3o do custo de outros sistemas de ponta, capacitando as empresas a manter altos padr\xf5es sem quebrar o banco.\\n\\nSe voc\xea estiver interessado em melhorar suas capacidades de teste com um sistema projetado para o futuro da tecnologia de mem\xf3ria, sinta-se \xe0 vontade para entrar em contato comigo para mais informa\xe7\xf5es em [i@tanshuai.com](mailto:i@tanshuai.com).\\n\\nFeliz teste!\\n"},{"lang":"pt","group":"blog","slug":"blog/usr-bin-sudo-must-be-owned-by-uid-0-and-have-the-setuid-bit-set-on-ubuntu-20-04","frontmatter":{"title":"/usr/bin/sudo deve ser propriedade do uid 0 e ter o bit setuid definido no Ubuntu 20.04","date":"2021-10-08T13:07:25.406Z","draft":false,"author":"Tan Shuai","tags":["Ubuntu","Linux","Sudo"],"categories":["Linux"]},"content":"\\nSe voc\xea encontrar a mensagem de erro \\"/usr/bin/sudo deve ser de propriedade do uid 0 e ter o bit setuid definido\\" no Ubuntu 20.04, siga estas etapas para resolver o problema.\\n\\n1. Durante o processo de inicializa\xe7\xe3o, pressione a tecla ‘ESC’ para acessar o menu GRUB.\\n\\n![Tela do GRUB](/images/content/wx20211008-210752.png \\"Tela do GRUB\\")\\n\\n2. Selecione a primeira op\xe7\xe3o, “Ubuntu”, e pressione a tecla ‘e’ para editar os par\xe2metros de inicializa\xe7\xe3o.\\n\\n![Editar Par\xe2metros de Inicializa\xe7\xe3o](/images/content/wx20211008-210841.png \\"Editar Par\xe2metros de Inicializa\xe7\xe3o\\")\\n\\n3. Adicione a seguinte string \xe0 linha que come\xe7a com ‘linux’ para inicializar no modo de resgate:\\n\\n```bash\\nsystemd.unit=rescue.target\\n```\\n\\n4. Uma vez no modo de resgate, execute o seguinte comando para restaurar as permiss\xf5es e a propriedade corretas para `/usr/bin/sudo`:\\n\\n```bash\\npkexec chmod a=rx,u+ws /usr/bin/sudo\\n```\\n\\nEste comando define as permiss\xf5es necess\xe1rias e garante que `sudo` seja de propriedade do usu\xe1rio root com o bit setuid definido.\\n\\nSeguindo estas etapas, voc\xea dever\xe1 resolver o problema e restaurar a funcionalidade adequada do comando `sudo` em seu sistema Ubuntu.\\n\\n---\\n"},{"lang":"it","group":"blog","slug":"blog/aws-codecommit-the-githubs-large-file-storage-git-lfs-free-alternative","frontmatter":{"title":"AWS CodeCommit： L\'alternativa gratuita a GitHub Large File Storage (Git LFS)","description":"Scopri come AWS CodeCommit funge da alternativa economica ed efficiente al Large File Storage (Git LFS) di GitHub. Questo articolo copre i limiti di Git LFS, i vantaggi dell\'utilizzo di AWS CodeCommit per l\'archiviazione di file di grandi dimensioni e fornisce una guida passo-passo per migrare da Git LFS a CodeCommit. Migliora il tuo flusso di lavoro di sviluppo con l\'infrastruttura scalabile e sicura di AWS.","date":"2022-02-09T00:00:00.000Z","author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["Sviluppo Software"],"draft":false},"content":"\\n\\\\nAWS CodeCommit offre una valida alternativa al servizio Large File Storage (Git LFS) di GitHub, fornendo una soluzione efficiente per la gestione di file di grandi dimensioni nei tuoi repository Git.\\\\n\\\\n## Perch\xe9 dovresti riconsiderare l\'uso di Git LFS\\\\n\\\\nSebbene Git LFS sia una scelta popolare per gestire file di grandi dimensioni nei repository Git, presenta delle limitazioni e delle sfide. Git LFS richiede configurazione e gestione aggiuntive, che possono complicare il flusso di lavoro di sviluppo. Inoltre, i costi di archiviazione e larghezza di banda associati a Git LFS possono aumentare rapidamente, soprattutto per progetti con numerosi file di grandi dimensioni o collaborazioni estese.\\\\n\\\\n## Perch\xe9 il servizio di Large File Storage di GitHub non \xe8 perfetto\\\\n\\\\nIl servizio di Large File Storage di GitHub, sebbene utile, presenta degli svantaggi intrinseci. Il principale problema \xe8 il costo associato all\'archiviazione e alla larghezza di banda, che pu\xf2 diventare proibitivo per progetti pi\xf9 grandi. Inoltre, la gestione di Git LFS pu\xf2 essere ingombrante, richiedendo agli sviluppatori di installare e configurare il client LFS, tracciare file specifici e affrontare potenziali conflitti di merge dovuti alla gestione dei file di grandi dimensioni separatamente dal resto del repository.\\\\n\\\\n## Perch\xe9 utilizzare AWS CodeCommit per archiviare file di grandi dimensioni in Git\\\\n\\\\nAWS CodeCommit fornisce una valida alternativa per archiviare file di grandi dimensioni nei repository Git senza la necessit\xe0 di Git LFS. CodeCommit \xe8 un servizio di controllo del codice sorgente completamente gestito che si integra perfettamente con altri servizi AWS, offrendo una robusta scalabilit\xe0, sicurezza ed efficienza dei costi. Sfruttando CodeCommit, gli sviluppatori possono evitare il sovraccarico aggiuntivo di gestione di Git LFS, beneficiando al contempo dell\'infrastruttura robusta di AWS e del modello di prezzo pay-as-you-go.\\\\n\\\\n## Quali sono le limitazioni di AWS CodeCommit rispetto a GitHub\\\\n\\\\nNonostante i suoi vantaggi, AWS CodeCommit presenta alcune limitazioni rispetto a GitHub. Il vasto supporto della community di GitHub, il ricco ecosistema di integrazioni e le funzionalit\xe0 avanzate come GitHub Actions e GitHub Pages potrebbero non essere completamente replicati in CodeCommit. Inoltre, gli sviluppatori abituati all\'interfaccia utente e agli strumenti di collaborazione di GitHub potrebbero trovare necessario un periodo di adattamento al passaggio a CodeCommit.\\\\n\\\\n## Come migrare un repository Git LFS a CodeCommit\\\\n\\\\nLa migrazione di un repository Git LFS a CodeCommit comporta diversi passaggi. Prima di tutto, assicurati che tutti i file di grandi dimensioni siano tracciati correttamente nel tuo repository Git LFS. Successivamente, clona il repository e rimuovi la configurazione di tracciamento di Git LFS. Dopodich\xe9, crea un nuovo repository in AWS CodeCommit e carica il tuo repository locale su di esso. Sono disponibili documentazione dettagliata e script per semplificare questo processo, garantendo una transizione senza perdita di dati o interruzioni.\\\\n\\\\n## Una soluzione migliore\\\\n\\\\nPer i team e i progetti fortemente dipendenti da Git LFS, esplorare AWS CodeCommit come alternativa pu\xf2 offrire vantaggi significativi. L\'integrazione senza soluzione di continuit\xe0 di CodeCommit con l\'ecosistema AWS, insieme alla sua natura economica e scalabile, lo rende un\'opzione attraente per la gestione di file di grandi dimensioni nei repository Git. Mitigando le sfide associate a Git LFS, CodeCommit consente ai team di sviluppo di concentrarsi sulla scrittura del codice e sulla collaborazione, aumentando la produttivit\xe0 e l\'innovazione.\\n\\nIn conclusione, AWS CodeCommit offre un\'alternativa valida, conveniente ed efficiente al servizio di archiviazione di file di grandi dimensioni di GitHub. Sfruttando l\'infrastruttura robusta di AWS, gli sviluppatori possono gestire facilmente file di grandi dimensioni nei repository Git, ottimizzando i loro flussi di lavoro e riducendo i costi generali.\\n"},{"lang":"it","group":"blog","slug":"blog/check-voltage-current-on-macos-for-power-adapter","frontmatter":{"title":"Controllare Tensione e Corrente su MacOS per l\'Adattatore di Alimentazione","meta_title":"Controllare Tensione e Corrente su MacOS per l\'Adattatore di Alimentazione","date":"2022-02-14T00:00:00.000Z","author":"Tan Shuai","tags":["MacOS","Adattatore di Alimentazione","Tensione","Corrente"],"categories":["MacOS"],"draft":false},"content":"\\nQuando si utilizza un MacBook, potrebbe essere utile controllare la tensione e la corrente dell\'adattatore di alimentazione. Ecco un modo semplice per verificare la tensione e la corrente dell\'adattatore di alimentazione su MacOS.\\n\\nApri Terminal.app e digita il comando:\\n\\n`ioreg -l -n AppleSmartBattery -r |grep AppleRawAdapterDetails`\\n\\nOtterrai le seguenti informazioni, inclusi corrente e tensione:\\n\\n```json\\n\\"AppleRawAdapterDetails\\" = ({\\"IsWireless\\"=No,\\"AdapterID\\"=0,\\"FamilyCode\\"=18446744073172697098,\\"Watts\\"=89,**\\"Current\\"=4450**,\\"PMUConfiguration\\"=4448,**\\"Voltage\\"=20000**})\\n"},{"lang":"it","group":"blog","slug":"blog/convert-markdown-academic-paper-pdf-macos","frontmatter":{"title":"Converti rapidamente Markdown in PDF stile accademico su macOS","meta_title":"Converti Markdown in PDF stile accademico su macOS con Pandoc","description":"Scopri come convertire documenti Markdown in PDF stile accademico su macOS utilizzando Pandoc e BasicTeX. Questo metodo rapido e semplice \xe8 perfetto per creare file PDF professionali per articoli accademici.","date":"2022-03-03T00:00:00.000Z","categories":["Sviluppo Software"],"author":"Tan Shuai","tags":["Pandoc","LaTeX","PDF","Articolo","Markdown","macOS"],"draft":false},"content":"\\n\\\\nIn questa guida, ti illustrer\xf2 come converto documenti Markdown in PDF in stile accademico su macOS utilizzando Pandoc e BasicTeX. Questo metodo \xe8 rapido e semplice, perfetto quando hai bisogno di creare file PDF dall\'aspetto professionale per i tuoi articoli accademici.\\n\\n### Passo 1: Installare Pandoc e BasicTeX\\n\\nPer prima cosa, devi installare Pandoc e BasicTeX sul tuo sistema macOS. Ecco come ho fatto io:\\n\\n1. **Installare Pandoc**: Apri Terminal e inserisci il seguente comando per installare Pandoc:\\n\\n   ```bash\\n   brew install pandoc\\n   ```\\n\\n2. **Installare BasicTeX**: Poich\xe9 MacTeX \xe8 piuttosto grande, ho optato per il pacchetto BasicTeX pi\xf9 piccolo per risparmiare spazio. Esegui questo comando:\\n\\n   ```bash\\n   brew install --cask basictex\\n   ```\\n\\n3. **Installare i Pacchetti LaTeX Comuni**: Per assicurarti di avere i pacchetti necessari per generare PDF, esegui questi comandi:\\n   ```bash\\n   sudo tlmgr update --self\\n   sudo tlmgr install collection-basic collection-latex collection-latexrecommended collection-fontsrecommended\\n   ```\\n\\n### Passo 2: Preparare il File Markdown\\n\\nSuccessivamente, crea il tuo file Markdown (es. `paper.md`). Ecco come ho impostato il mio file, includendo titolo, autore, data e informazioni di contatto:\\n\\n```markdown\\n---\\ntitle: \\"Your Paper Title\\"\\nsubtitle: \\"Optional Subtitle\\"\\ndate: \\\\today\\n\\nauthor: |\\n  | Your Name\\n  | your-email@tanshuai.com\\n  | www.tanshuai.com\\n---\\n\\n# Abstract\\n\\nYour abstract here.\\n\\n# Introduction\\n\\nYour introduction here.\\n\\n# Methodology\\n\\nYour methodology here.\\n\\n# Results\\n\\nYour results here.\\n\\n# Conclusion\\n\\nYour conclusion here.\\n```\\n\\n### Passo 3: Convertire Markdown in PDF con Pandoc\\n\\nOra, puoi convertire il tuo file Markdown in un PDF. Ho usato il seguente comando in Terminal:\\n\\n```bash\\npandoc paper.md -o paper.pdf --pdf-engine=xelatex\\n```\\n\\nQuesto comando utilizza il modello LaTeX predefinito di Pandoc per convertire il file Markdown in un PDF in stile accademico, includendo le informazioni di contatto dell\'autore sotto il suo nome.\\n\\n### Suggerimenti Aggiuntivi\\n\\n- **Modello LaTeX Personalizzato**: Se hai bisogno di formattazioni pi\xf9 avanzate o stili specifici, puoi creare o scaricare un modello LaTeX personalizzato e usarlo con Pandoc:\\n\\n  ```bash\\n  pandoc paper.md -o paper.pdf --pdf-engine=xelatex --template=your-template.tex\\n  ```\\n\\n- **Maggiori Metadati**: Puoi aggiungere ulteriori informazioni nell\'intestazione dei metadati YAML, come un abstract o parole chiave, e usarle nei modelli personalizzati.\\n\\n### Conclusione\\n\\nSeguendo questi passaggi, puoi facilmente convertire documenti Markdown in PDF in stile accademico su macOS. Utilizzare Pandoc e BasicTeX rende questo processo rapido ed efficiente, perfetto quando hai bisogno di generare documenti PDF professionali. Che tu stia preparando articoli accademici, rapporti tecnici o altri documenti formali, questo metodo funziona alla grande. Includere le informazioni di contatto nell\'intestazione dei metadati aggiunge un tocco professionale ai tuoi documenti.\\n\\nSpero che questa guida ti sia utile! Se hai domande o incontri problemi, non esitare a contattarmi. Buona scrittura!\\n"},{"lang":"it","group":"blog","slug":"blog/electron-build-tools-error-error-failed-to-run-choco-install-pywin32-yes","frontmatter":{"title":"Strumenti di Build di Electron `ERRORE Errore： Impossibile eseguire \\"choco install pywin32 --yes\\"`","date":"2021-09-08T00:00:00.000Z","draft":false,"author":"Tan Shuai","tags":["Electron","Strumenti di Build","PyWin32","Chocolatey","Win32"],"categories":["Sviluppo Software"]},"content":"\\nQuando si lavora con Electron Build Tools, potrebbe verificarsi un errore relativo all\'installazione di pywin32 tramite Chocolatey. Questo pu\xf2 essere frustrante, soprattutto quando \xe8 una dipendenza necessaria per il tuo progetto. Di seguito \xe8 riportata una spiegazione dettagliata del problema e dei passaggi potenziali per risolverlo.\\n\\n### L\'Errore\\n\\nQuando si inizializza un progetto Electron utilizzando Electron Build Tools, potrebbe comparire il seguente messaggio di errore:\\n\\n```bash\\nE:\\\\\\\\>e init main-testing -i testing --root=e:/src/electron\\nWARN A fixable error has occurred\\n--> A required dependency \\"pywin32\\" could not be located, it probably has to be installed.\\nDo you want build-tools to try fix this for you? [y/n]: y\\n\\nRunning \\"choco install pywin32 --yes\\"\\nERROR Error: Failed to run \\"choco install pywin32 --yes\\"\\n    at spawnSyncWithLog (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:11:11)\\n    at fix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:39:9)\\n    at maybeAutoFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\maybe-auto-fix.js:13:3)\\n    at whichAndFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\which.js:10:5)\\n    at checkPlatformDependencies (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:61:7)\\n    at Object.<anonymous> (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\e-init.js:165:3)\\n    at Module._compile (internal/modules/cjs/loader.js:1072:14)\\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1101:10)\\n    at Module.load (internal/modules/cjs/loader.js:937:32)\\n    at Function.Module._load (internal/modules/cjs/loader.js:778:12)\\n```\\n\\nQuesto errore si verifica tipicamente perch\xe9 lo script di installazione del pacchetto pywin32 non riesce a trovare i file richiesti sul server remoto. Questo si traduce in un errore 404, che indica che il file non \xe8 disponibile all\'URL specificato.\\n\\n### Comprendere l\'Errore\\n\\nLa parte chiave del messaggio di errore \xe8:\\n\\n```bash\\nERROR: The remote file either doesn\'t exist, is unauthorized, or is forbidden for url \'http://sourceforge.net/projects/pywin32/files/pywin32/Build%20219/pywin32-219.win-amd64-py3.9.exe/download\'. Exception calling \\"GetResponse\\" with \\"0\\" argument(s): \\"The remote server returned an error: (404) Not Found.\\"\\n```\\n\\nQuesto indica che l\'URL di download per pywin32 non \xe8 pi\xf9 valido, il che significa che Chocolatey non pu\xf2 recuperare i file di installazione necessari.\\n\\n### Passaggi per la Risoluzione dei Problemi\\n\\nEcco alcuni passaggi che puoi seguire per risolvere questo problema:\\n\\n#### 1. Verificare l\'Installazione di Chocolatey\\n\\nAssicurati che Chocolatey sia installato correttamente e aggiornato all\'ultima versione. Puoi controllare la versione di Chocolatey con:\\n\\n```bash\\nchoco --version\\n```\\n\\nPer aggiornare Chocolatey, usa:\\n\\n```bash\\nchoco upgrade chocolatey\\n```\\n\\n#### 2. Installare Manualmente pywin32\\n\\nPoich\xe9 l\'installazione automatica fallisce, prova a installare manualmente pywin32. Puoi scaricare la versione appropriata dalla pagina dei rilasci ufficiali di [pywin32 su GitHub](https://github.com/mhammond/pywin32/releases) e installarla manualmente.\\n\\n#### 3. Modificare lo Script di Installazione\\n\\nSe hai il controllo sullo script di Electron Build Tools, puoi modificarlo per puntare a un URL valido per pywin32 o gestire il processo di installazione manualmente.\\n\\n#### 4. Utilizzare un Gestore di Pacchetti Alternativo\\n\\nSe Chocolatey continua a fallire, considera l\'utilizzo di un gestore di pacchetti alternativo come pip per i pacchetti Python:\\n\\n```bash\\npip install pywin32\\n```\\n\\n### Esempio di Installazione Manuale di pywin32\\n\\n1. Scarica l\'installer appropriato di pywin32 dalle [release ufficiali di GitHub](https://github.com/mhammond/pywin32/releases).\\n2. Esegui l\'installer e segui le istruzioni di installazione.\\n3. Verifica l\'installazione eseguendo un semplice script Python che importi pywin32:\\n\\n```python\\nimport win32api\\nprint(win32api.GetVersionEx())\\n```\\n\\nIncontrare l\'errore \\"Failed to run `choco install pywin32 --yes`\\" pu\xf2 essere un ostacolo nel tuo processo di sviluppo. Tuttavia, comprendendo la causa principale e seguendo i passaggi sopra indicati, puoi superare questo problema e continuare con la configurazione del tuo progetto Electron.\\n"},{"lang":"it","group":"blog","slug":"blog/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining","frontmatter":{"title":"Segreti del Design ASIC Personalizzato per il Mining di Bitcoin e Criptovalute","date":"2022-05-30T00:00:00.000Z","update":"2024-08-02T00:00:00.000Z","categories":["Semiconduttori","Bitcoin","Criptovaluta","Blockchain"],"author":"Tan Shuai","tags":["ASIC","Bitcoin","Mining","BTC"],"draft":false,"contact":"Tan Shuai | tanshuai@btc.com | tanshuai.com"},"content":"\\n\\\\nTan Shuai  \\n[tanshuai@btc.com](mailto:tanshuai@btc.com)  \\n[tanshuai.com](https://tanshuai.com)\\n\\n---\\n\\n## Abstract\\n\\nNel competitivo mondo del mining di criptovalute, l\'efficienza energetica, le prestazioni dell\'hashrate e l\'affidabilit\xe0 sono fondamentali. Questo documento approfondisce il design ASIC (Application-Specific Integrated Circuit) full custom di livello superiore, rivelando segreti del settore e metodologie esperte che guidano il mining ad alte prestazioni di Bitcoin e criptovalute. Scritto da un esperto tecnologico di una delle principali aziende di miner ASIC, questo documento sfrutta tecniche di progettazione avanzate, layout fisico meticoloso e processi di verifica completi per mostrare le eccezionali capacit\xe0 degli ASIC full custom nel massimizzare l\'efficienza e la redditivit\xe0 del mining.\\n\\n## Introduzione\\n\\nL\'evoluzione del mining di criptovalute, in particolare il mining di Bitcoin, ha visto una transizione dall\'uso di CPU, FPGA e GPU generici agli ASIC specializzati. Questi ASIC offrono prestazioni e efficienza energetica senza pari. Il design ASIC full custom rappresenta il culmine di questa evoluzione, consentendo soluzioni su misura che soddisfano le esigenze specifiche delle operazioni di mining.\\n\\nGran parte della letteratura esistente sul design ASIC per il mining di criptovalute proviene dal mondo accademico o da imprese non minerarie, che spesso manca di applicabilit\xe0 nel mondo reale. Ad oggi, solo una manciata di aziende, principalmente cinesi (ad es. MicroBT, Bitmain), hanno sviluppato con successo ASIC per il mining di Bitcoin commerciabili. Questo documento cerca di colmare questa lacuna fornendo approfondimenti tratti dalla pratica industriale effettiva, offrendo una prospettiva basata sulle realt\xe0 del settore minerario.\\n\\nCome professionista con oltre dieci anni di esperienza nell\'industria tecnologica, l\'autore di questo documento ha sviluppato il miglior Bitcoin ASIC Miner al mondo (WhatsMiner), miner LTC/DOGE ed ETH, e ha svolto un ruolo chiave in aziende come MicroBT, BTC.COM e altre fabless pubbliche. Ha ricoperto posizioni chiave in aziende quotate al NASDAQ, HKSE e NYSE. Con una vasta esperienza nella creazione di partnership con TSMC, Texas Instruments, ARM e Intel, porta una ricchezza di conoscenze ed esperienza pratica nel campo del design ASIC custom per il mining di Bitcoin e criptovalute.\\n\\n## Metodologia e Flusso di Progettazione\\n\\n### Filosofia del Design\\n\\nIl nostro approccio al design ASIC full custom \xe8 guidato dalla volont\xe0 di massimizzare PPA (Power, Performance, and Area), in particolare in condizioni di funzionamento a bassa tensione. Questa sezione descriver\xe0 la nostra filosofia e metodologia di progettazione:\\n\\n1. **Architettura Pipeline**: Sfruttare i benefici intrinseci delle strutture pipeline per gli algoritmi di mining, caratterizzati da registri e fasi di logica combinatoria. Utilizzando un\'architettura pipeline, possiamo gestire efficacemente le operazioni ad alta frequenza richieste per il mining di criptovalute.\\n2. **Netlist Manuale e Posizionamento**: Script dettagliati per la creazione del netlist e posizionamento manuale delle celle per ottimizzare i percorsi critici. Ci\xf2 consente un controllo preciso dei tempi e riduce gli effetti parassiti.\\n3. **Librerie di Celle Custom**: Sviluppare celle specializzate con conteggi di transistor ottimizzati e funzionalit\xe0 dinamiche di risparmio energetico. Le celle custom sono progettate per funzionare alla tensione pi\xf9 bassa possibile, garantendo un consumo energetico minimo.\\n\\n### Raggiungere i Benefici del PPA\\n\\nStrategie dettagliate per ottenere i benefici del PPA attraverso la progettazione su misura:\\n\\n1. **Progettazione di Registri Personalizzati**: Utilizzo di registri multi-bit e progetti basati su latch per ridurre la potenza dell\'orologio e migliorare il prestito di temporizzazione. I registri multi-bit minimizzano il consumo energetico dell\'albero dell\'orologio e riducono l\'area complessiva.\\n2. **Posizionamento Manuale**: Riduzione della lunghezza dei fili e bilanciamento dei tempi di setup e hold per migliorare le prestazioni complessive. Il posizionamento manuale consente un miglior controllo dei ritardi di interconnessione e della diafonia, migliorando l\'integrit\xe0 del segnale e riducendo il consumo di energia.\\n3. **Progettazione di Celle Ottimizzate**: Le celle personalizzate sono progettate per operare a tensioni inferiori, minimizzando il consumo di energia dinamica e massimizzando l\'efficienza. Adattando i progetti delle celle alle esigenze specifiche degli algoritmi di mining, possiamo ottenere miglioramenti significativi nelle prestazioni.\\n\\n### Affidabilit\xe0 a Basse Tensioni\\n\\nGarantire l\'affidabilit\xe0 della logica di temporizzazione progettata su misura a basse tensioni implica:\\n\\n1. **Simulazione Accurata**: Simulazioni a livello di circuito per convalidare il comportamento delle celle personalizzate in condizioni specifiche. Strumenti come SPICE sono utilizzati per simulazioni elettriche dettagliate per garantire che le celle funzionino correttamente in tutte le condizioni PVT (Processo, Tensione, Temperatura).\\n2. **Uniformit\xe0 nel Posizionamento**: Posizionamento manuale per garantire uniformit\xe0 e ridurre la variabilit\xe0. Controllando il layout fisico, possiamo minimizzare l\'impatto delle variazioni di processo e garantire prestazioni costanti.\\n3. **Calibrazione PVT Precisa**: Verifica contro le variazioni di processo, tensione e temperatura. Vengono eseguiti test e calibrazioni estensive per garantire la robustezza del design in diverse condizioni operative.\\n\\n## Studi di Caso e Risultati\\n\\nPresentazione di dati reali e studi di caso da tape-out completi:\\n\\n| Progetto | Nodo di Processo | Efficienza Tensione/Potenza | Algoritmo |\\n| ------- | ------------ | ------------------------ | --------- |\\n| SC      | TSMC 28nm    | 0.45V, 257J/T            | Blake2b   |\\n| DCR     | TSMC 28nm    | 0.45V, 150J/T            | Blake256  |\\n| DASH    | TSMC 16nm    | 0.38V, 6.2J/G            | X11       |\\n| BTC     | TSMC 16nm    | 0.38V, 65J/T             | SHA-256d  |\\n| BTC     | TSMC 7nm     | 0.30V, 37J/T             | SHA-256d  |\\n| BTC     | Samsung 8nm  | 0.31V, 45J/T             | SHA-256d  |\\n| BTC     | SMIC N+1     | 0.30V, 35J/T             | SHA-256d  |\\n\\nQuesti risultati dimostrano i notevoli guadagni in efficienza e prestazioni ottenibili attraverso il nostro approccio di progettazione personalizzata.\\n\\n## Integrazione e Verifica\\n\\n### Signoff di Celle Miste\\n\\n- **Integrazione di Celle Personalizzate**: Le celle personalizzate sono integrate con celle standard di TSMC e altre fonderie, garantendo compatibilit\xe0 e prestazioni. Le celle personalizzate sono caratterizzate e convalidate per soddisfare i requisiti della libreria di celle standard, consentendo un\'integrazione senza soluzione di continuit\xe0.\\n- **Strategie di Signoff**: Le strategie per garantire compatibilit\xe0 e prestazioni senza problemi includono controlli DRC (Design Rule Check) e LVS (Layout Versus Schematic) dettagliati, nonch\xe9 analisi di temporizzazione e potenza utilizzando strumenti EDA (Electronic Design Automation) standard del settore.\\n\\n### Progettazione Co-Design Digitale e Analogico\\n\\n- **Tecniche di Integrazione**: Integrazione di componenti digitali e analogici per ottimizzare le prestazioni complessive del chip. Tecniche come la verifica mixed-signal e la co-simulazione sono utilizzate per garantire un\'integrazione e una funzionalit\xe0 adeguate.\\n- **Metodologie di Verifica**: Le metodologie per garantire la robustezza in diverse condizioni operative includono l\'analisi corner, le simulazioni Monte Carlo e la verifica dell\'affidabilit\xe0 per affrontare l\'invecchiamento e l\'elettromigrazione.\\n\\n## Conclusione\\n\\nIl design ASIC completamente personalizzato offre vantaggi significativi per il mining di Bitcoin e criptovalute, fornendo prestazioni, efficienza energetica e affidabilit\xe0 senza pari. Svelando i segreti del design ASIC personalizzato di alto livello, questo documento mette in evidenza le metodologie e le innovazioni che distinguono i leader del settore. Man mano che il mining di criptovalute continua ad evolversi, gli ASIC personalizzati giocheranno un ruolo cruciale nel guidare la prossima generazione di hardware di mining ad alta efficienza e alte prestazioni.\\n\\n[Versione PDF del Documento](/docs/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining.pdf)\\n"},{"lang":"it","group":"blog","slug":"blog/get-current-commit-id-of-git-and-update-to-package-json","frontmatter":{"title":"Ottenere l\'ID del commit corrente di Git e aggiornare package.json","date":"2021-08-21T09:19:58.875Z","draft":false,"author":"Tan Shuai","tags":["Git","Package.json","Node.js"],"categories":["Sviluppo Software"]},"content":"\\nDurante lo sviluppo di un progetto Node.js, potrebbe essere utile tenere traccia dell\'ID del commit corrente del tuo repository Git. Queste informazioni possono essere utili per il debug, il versionamento o per scopi di distribuzione. Un modo per ottenere questo \xe8 aggiornare il file `package.json` con l\'ID del commit corrente durante il processo di build. Questo articolo ti guider\xe0 attraverso i passaggi per ottenere l\'ID del commit corrente di Git e aggiornarlo nel file `package.json` utilizzando Node.js.\\n\\n```bash\\n\\"predev\\": \\"node ./node_modules/json/lib/json.js -I -f package.json -e \\\\\\\\\\\\\\"this.commit=\'$(git rev-parse --short HEAD)\'\\\\\\\\\\\\\\"\\",\\n"},{"lang":"it","group":"blog","slug":"blog/migrate-a-github-lfs-git-large-file-storage-repository-to-aws-codecommit","frontmatter":{"title":"Migrare un repository GitHub LFS (Git Large File Storage) su AWS CodeCommit","date":"2022-02-09T09:36:57.481Z","draft":false,"author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["Sviluppo Software"]},"content":"\\nDi recente ho migrato uno dei miei repository GitHub, che utilizza Git Large File Storage (LFS), su AWS CodeCommit. Ho pensato di condividere il processo con voi nel caso stiate cercando di fare qualcosa di simile. Ecco una guida passo passo basata sulla mia esperienza.\\n\\n## Prerequisiti\\n\\nPrima di iniziare, assicurati di avere installato questi strumenti:\\n\\n- Git\\n- Git LFS\\n- AWS CLI\\n\\n## Guida Passo Passo\\n\\n### 1. Clonare il Repository\\n\\nPer prima cosa, clona il tuo repository GitHub utilizzando l\'opzione `--mirror`. Questo crea una clone bare del repository, includendo tutti i branch e i tag.\\n\\n```zsh\\ngit clone --mirror https://github.com/tanshuai/designs.git designs\\n```\\n\\n### 2. Verificare i File LFS\\n\\nSuccessivamente, elenca tutti i file gestiti da Git LFS per assicurarti che tutto sia a posto.\\n\\n```zsh\\ngit lfs ls-files\\n```\\n\\nDovresti vedere qualcosa del genere:\\n\\n```\\ncadfa0bc9e * Brochure-Trifold-Draft.ai\\naf9b8b8a1c * Brochure-Trifold-English.ai\\n27bb5f4e61 * Brochure-Trifold.ai\\n```\\n\\n### 3. Migrare i File LFS\\n\\nOra, esporta i file LFS. Questo passaggio assicura che facciano parte della cronologia del tuo repository.\\n\\n```zsh\\ngit lfs migrate export --include=\\"*.ai\\" --everything\\n```\\n\\nVedrai alcuni messaggi di avanzamento come questi:\\n\\n```\\nmigrate: Sorting commits: ..., done.\\nmigrate: Rewriting commits: 100% (20/20), done.\\nmaster 98a3c48d85... -> 82f8873b41...\\nmigrate: Updating refs: ..., done.\\nmigrate: checkout: ..., done.\\nprune: 3 local object(s), 0 retained, done.\\ncadfa0bc9e... (133 MB)\\n27bb5f4e61... (131 MB)\\naf9b8b8a1c... (130 MB), done.\\nprune: Deleting objects: 100% (3/3), done.\\n```\\n\\n### 4. Pulire LFS\\n\\nRimuovi le informazioni di tracking di Git LFS e disinstalla Git LFS.\\n\\n```zsh\\ngit lfs ls-files\\ngit rm .gitattributes -f\\ngit lfs uninstall\\n```\\n\\n### 5. Spingere su AWS CodeCommit\\n\\nInfine, spingi il tuo repository su AWS CodeCommit.\\n\\n```zsh\\ngit push https://git-codecommit.us-east-2.amazonaws.com/v1/repos/designs --all\\n```\\n\\nEcco fatto! Seguendo questi passaggi, ho migrato con successo il mio repository GitHub LFS su AWS CodeCommit. I file di grandi dimensioni e la cronologia del repository sono stati preservati perfettamente.\\n\\n## Conclusione\\n\\nMigrare un repository GitHub che utilizza Git LFS su AWS CodeCommit \xe8 piuttosto semplice se si seguono i passaggi giusti. Se hai domande o incontri problemi, la [documentazione di AWS CodeCommit](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) e la [documentazione di Git LFS](https://git-lfs.github.com/) sono ottime risorse.\\n\\nSpero che questa guida ti sia utile. Buona programmazione!\\n"},{"lang":"it","group":"blog","slug":"blog/reset-restore-all-subdirectories-of-git","frontmatter":{"title":"Reimposta/Ripristina Tutte le sottodirectory di Git","date":"2021-09-22T08:33:49.201Z","draft":false,"author":"Tan Shuai","tags":["Git","Controllo delle versioni"],"categories":["Sviluppo software"]},"content":"\\nGestire efficacemente un repository Git richiede spesso di reimpostare o ripristinare le sottodirectory per mantenere una base di codice pulita e funzionale. Questa guida fornisce un approccio conciso e passo dopo passo per reimpostare o ripristinare tutte le sottodirectory in un repository Git.\\n\\n## Reimpostare le Sottodirectory\\n\\nIl seguente comando Git rimuove tutti i file e le directory non tracciati dal repository. Questo \xe8 utile per ripulire i file non necessari prima di eseguire un reset o un ripristino.\\n\\n```bash\\ngit clean -xfdf -- .\\n```\\n\\n### Analisi del Comando:\\n\\n- `-x`: Rimuove tutti i file non tracciati, inclusi quelli ignorati da `.gitignore`.\\n- `-f`: Forza la rimozione dei file.\\n- `-d`: Rimuove le directory non tracciate.\\n- `-- .`: Applica il comando alla directory corrente e a tutte le sottodirectory.\\n\\n## Ripristinare le Sottodirectory\\n\\nPer ripristinare tutti i file nel repository al loro stato ultimo commitato, utilizza il seguente comando:\\n\\n```bash\\ngit checkout {HEAD O RAMO} -- .\\n```\\n\\n### Analisi del Comando:\\n\\n- `{HEAD O RAMO}`: Sostituisci con `HEAD` per ripristinare all\'ultimo commit o specifica un nome di ramo per ripristinare a uno specifico ramo.\\n- `-- .`: Applica il comando alla directory corrente e a tutte le sottodirectory.\\n\\nUtilizzando questi comandi, puoi assicurarti che il tuo repository sia libero da file indesiderati e che tutti i file siano ripristinati ai loro stati commitati. Questo processo aiuta a mantenere una base di codice pulita e organizzata, facilitando una collaborazione e uno sviluppo pi\xf9 semplici.\\n\\nSentiti libero di personalizzare questa guida in base alle tue specifiche esigenze e preferenze. Per operazioni Git pi\xf9 avanzate, consulta la [documentazione ufficiale di Git](https://git-scm.com/doc).\\n"},{"lang":"it","group":"blog","slug":"blog/ultra-low-cost-ddr3-ddr4-lpddr3-lpddr4-memory-test-system","frontmatter":{"title":"Sistema di Test della Memoria DDR3, DDR4, LP-DDR3 e LP-DDR4 a Basso Costo","description":"Scopri il sistema di test della memoria a basso costo per le tecnologie DDR3, DDR4, LP-DDR3 e LP-DDR4. Prezzo intorno ai 200.000 USD, offre test ad alta velocit\xe0, versatilit\xe0, funzionalit\xe0 avanzate e basso consumo energetico. Perfetto per le aziende che cercano soluzioni di test della memoria affidabili e convenienti.","date":"2024-06-01T00:00:00.000Z","categories":["Semiconduttori"],"author":"Tan Shuai","tags":["DDR3","DDR4","LP-DDR3","LP-DDR4","Sistema di Test della Memoria"],"draft":false},"content":"\\nSe sei come me, sempre alla ricerca di soluzioni economiche senza compromettere la qualit\xe0, amerai ci\xf2 che ho da condividere oggi. Nel nostro mondo tecnologico frenetico, assicurarsi che la memoria dei nostri dispositivi sia all\'altezza \xe8 cruciale. Opzioni di fascia alta come il T5503/T5503HS2 sono fantastiche, ma hanno un prezzo elevato. Fortunatamente, Zeeis ha proposto un sistema di test di memoria ultra economico che non sacrifica le prestazioni.\\n\\n## Perch\xe9 \xe8 Importante\\n\\nQuando ho saputo per la prima volta del sistema di test di memoria di Zeeis, sono rimasto intrigato. Questo sistema \xe8 progettato per gestire le tecnologie di memoria DDR3, DDR4, LP-DDR3 e LP-DDR4. Che tu stia lavorando con sistemi pi\xf9 vecchi o con le tecnologie pi\xf9 recenti, questo sistema \xe8 coperto.\\n\\n### Test ad Alta Velocit\xe0\\n\\nUna delle caratteristiche principali \xe8 la sua capacit\xe0 di supportare velocit\xe0 di trasferimento dati che vanno da 800 a 3200 MT/s per DDR3 e DDR4. Pu\xf2 valutare i moduli di memoria a velocit\xe0 di clock fino a 1600 MHz. Questo significa test approfonditi e affidabili, garantendo che i tuoi dispositivi funzionino al meglio.\\n\\n### Versatilit\xe0\\n\\nLa versatilit\xe0 di questo sistema \xe8 rivoluzionaria. Supporta pi\xf9 standard di memoria, rendendolo adatto a un\'ampia gamma di applicazioni, dall\'elettronica di consumo all\'informatica ad alte prestazioni. Inoltre, \xe8 a prova di futuro. Con l\'emergere di nuove tecnologie di memoria, questo sistema pu\xf2 essere facilmente aggiornato per supportarle.\\n\\n### Efficienza dei Costi\\n\\nOra, parliamo del prezzo. A circa 200.000 USD, questo sistema offre un eccellente ritorno sull\'investimento. \xc8 abbastanza conveniente per le piccole e medie imprese, garantendo capacit\xe0 di test di alta qualit\xe0 senza spendere una fortuna.\\n\\n### Funzionalit\xe0 Avanzate\\n\\nIl sistema viene fornito con algoritmi di test avanzati, incluso un generatore di pattern algoritmici integrato (ALPG). Questo assicura una valutazione accurata e affidabile della memoria, cos\xec ogni modulo soddisfa rigorosi standard di prestazione.\\n\\n### Basso Consumo Energetico\\n\\nCi\xf2 che \xe8 anche impressionante \xe8 il suo basso consumo energetico. Si allinea con le tendenze delle tecnologie di memoria LP-DDR3 e LP-DDR4. Operando a tensioni pi\xf9 basse, non solo riduce i costi energetici, ma minimizza anche l\'output termico, rendendolo una scelta ecologica.\\n\\n## Perch\xe9 Scegliere Zeeis?\\n\\n### Scalabilit\xe0\\n\\nIl sistema di Zeeis \xe8 progettato con la scalabilit\xe0 in mente. Con l\'emergere di nuove tecnologie di memoria, il sistema pu\xf2 essere facilmente aggiornato, garantendo un\'uso a lungo termine e riducendo la necessit\xe0 di frequenti sostituzioni.\\n\\n### Supporto e Documentazione\\n\\nUn altro grande vantaggio \xe8 il supporto estensivo e la documentazione di Zeeis. Che tu sia un professionista esperto o nuovo nei test di memoria, le loro guide dettagliate e il servizio clienti reattivo assicurano un\'esperienza fluida.\\n\\n### Soddisfare le Richieste del Mercato\\n\\nCon la crescente domanda di memoria ad alta velocit\xe0 in tutto, dagli smartphone ai data center, avere una soluzione di test di memoria affidabile e conveniente \xe8 essenziale. Il sistema di Zeeis soddisfa queste esigenze, garantendo che i tuoi prodotti siano pronti per il mercato e funzionino perfettamente nelle applicazioni reali.\\n\\n## Conclusione\\n\\nIn poche parole, il sistema di test di memoria ultra economico DDR3, DDR4, LP-DDR3 e LP-DDR4 di Zeeis \xe8 una fantastica opzione per coloro che hanno bisogno di soluzioni di test di memoria affidabili, versatili e convenienti. Offre alte prestazioni a una frazione del costo di altri sistemi di fascia alta, permettendo alle aziende di mantenere standard elevati senza spendere una fortuna.\\n\\nSe sei interessato a migliorare le tue capacit\xe0 di test con un sistema progettato per il futuro della tecnologia della memoria, non esitare a contattarmi per maggiori informazioni all\'indirizzo [i@tanshuai.com](mailto:i@tanshuai.com).\\n\\nBuon test!\\n"},{"lang":"it","group":"blog","slug":"blog/usr-bin-sudo-must-be-owned-by-uid-0-and-have-the-setuid-bit-set-on-ubuntu-20-04","frontmatter":{"title":"/usr/bin/sudo deve essere di propriet\xe0 di uid 0 e avere il bit setuid impostato su Ubuntu 20.04","date":"2021-10-08T13:07:25.406Z","draft":false,"author":"Tan Shuai","tags":["Ubuntu","Linux","Sudo"],"categories":["Linux"]},"content":"\\nSe incontri il messaggio di errore \\"/usr/bin/sudo deve essere di propriet\xe0 di uid 0 e avere il bit setuid impostato\\" su Ubuntu 20.04, segui questi passaggi per risolvere il problema.\\n\\n1. Durante il processo di avvio, premi il tasto \'ESC\' per accedere al menu GRUB.\\n\\n![Schermata GRUB](/images/content/wx20211008-210752.png \\"Schermata GRUB\\")\\n\\n2. Seleziona la prima opzione, “Ubuntu”, e premi il tasto \'e\' per modificare i parametri di avvio.\\n\\n![Modifica Parametri di Avvio](/images/content/wx20211008-210841.png \\"Modifica Parametri di Avvio\\")\\n\\n3. Aggiungi la seguente stringa alla riga che inizia con \'linux\' per avviare in modalit\xe0 di ripristino:\\n\\n```bash\\nsystemd.unit=rescue.target\\n```\\n\\n4. Una volta in modalit\xe0 di ripristino, esegui il seguente comando per ripristinare i permessi e la propriet\xe0 corretti per `/usr/bin/sudo`:\\n\\n```bash\\npkexec chmod a=rx,u+ws /usr/bin/sudo\\n```\\n\\nQuesto comando imposta i permessi necessari e assicura che `sudo` sia di propriet\xe0 dell\'utente root con il bit setuid impostato.\\n\\nSeguendo questi passaggi, dovresti essere in grado di risolvere il problema e ripristinare la funzionalit\xe0 corretta del comando `sudo` sul tuo sistema Ubuntu.\\n\\n---\\n"},{"lang":"nl","group":"blog","slug":"blog/aws-codecommit-the-githubs-large-file-storage-git-lfs-free-alternative","frontmatter":{"title":"AWS CodeCommit： Het Gratis Alternatief voor GitHub Large File Storage (Git LFS)","description":"Ontdek hoe AWS CodeCommit fungeert als een kosteneffectief en effici\xebnt alternatief voor GitHub\'s Large File Storage (Git LFS). Dit artikel behandelt de beperkingen van Git LFS, de voordelen van het gebruik van AWS CodeCommit voor grote bestandsopslag en biedt een stapsgewijze handleiding voor het migreren van Git LFS naar CodeCommit. Verbeter uw ontwikkelingsworkflow met de schaalbare en veilige infrastructuur van AWS.","date":"2022-02-09T00:00:00.000Z","author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["Softwareontwikkeling"],"draft":false},"content":"\\nAWS CodeCommit biedt een robuust alternatief voor de Large File Storage (Git LFS) service van GitHub, en biedt een effici\xebnte oplossing voor het beheren van grote bestanden in je Git repositories.\\n\\n## Waarom Je Het Gebruik van Git LFS Zou Moeten Heroverwegen\\n\\nHoewel Git LFS een populaire keuze is voor het omgaan met grote bestanden in Git repositories, heeft het zijn beperkingen en uitdagingen. Git LFS vereist extra setup en beheer, wat de ontwikkelworkflow kan bemoeilijken. Bovendien kunnen de opslag- en bandbreedtekosten die gepaard gaan met Git LFS snel oplopen, vooral voor projecten met veel grote bestanden of uitgebreide samenwerking.\\n\\n## Waarom GitHub\'s Large File Storage Service Niet Perfect Is\\n\\nGitHub\'s Large File Storage service, hoewel nuttig, heeft inherente nadelen. De belangrijkste zorg is de kosten die gepaard gaan met opslag en bandbreedte, die voor grotere projecten prohibitief kunnen worden. Bovendien kan het beheer van Git LFS omslachtig zijn, omdat ontwikkelaars de LFS-client moeten installeren en configureren, specifieke bestanden moeten volgen en te maken kunnen krijgen met potenti\xeble merge conflicten als gevolg van de aparte verwerking van grote bestanden ten opzichte van de rest van de repository.\\n\\n## Waarom AWS CodeCommit Gebruiken om Grote Bestanden in Git op te Slaan\\n\\nAWS CodeCommit biedt een overtuigend alternatief voor het opslaan van grote bestanden in Git repositories zonder de noodzaak van Git LFS. CodeCommit is een volledig beheerde source control service die naadloos integreert met andere AWS services, en biedt robuuste schaalbaarheid, veiligheid en kosteneffici\xebntie. Door gebruik te maken van CodeCommit kunnen ontwikkelaars de extra overhead van het beheren van Git LFS vermijden, terwijl ze profiteren van de robuuste infrastructuur van AWS en het pay-as-you-go prijsmodel.\\n\\n## Wat Zijn de Beperkingen van AWS CodeCommit Vergeleken met GitHub\\n\\nOndanks de voordelen heeft AWS CodeCommit enkele beperkingen in vergelijking met GitHub. GitHub\'s uitgebreide gemeenschapsondersteuning, rijke ecosysteem van integraties en geavanceerde functies zoals GitHub Actions en GitHub Pages zijn mogelijk niet volledig gerepliceerd in CodeCommit. Bovendien kunnen ontwikkelaars die gewend zijn aan de gebruikersinterface en samenwerkingstools van GitHub merken dat de overgang naar CodeCommit enige aanpassing vereist.\\n\\n## Hoe een Git LFS Repository naar CodeCommit Migreren\\n\\nHet migreren van een Git LFS repository naar CodeCommit omvat verschillende stappen. Zorg eerst dat alle grote bestanden correct worden gevolgd in je Git LFS repository. Vervolgens, clone de repository en verwijder de Git LFS tracking configuratie. Daarna, maak een nieuwe repository in AWS CodeCommit en push je lokale repository ernaartoe. Gedetailleerde documentatie en scripts zijn beschikbaar om dit proces te stroomlijnen, en zorgen voor een soepele overgang zonder dataverlies of onderbreking.\\n\\n## Een Betere Oplossing\\n\\nVoor teams en projecten die sterk afhankelijk zijn van Git LFS, kan het verkennen van AWS CodeCommit als alternatief aanzienlijke voordelen bieden. De naadloze integratie van CodeCommit met het AWS-ecosysteem, gecombineerd met de kosteneffectieve en schaalbare aard, maakt het een aantrekkelijke optie voor het beheren van grote bestanden in Git repositories. Door de uitdagingen die gepaard gaan met Git LFS te mitigeren, stelt CodeCommit ontwikkelingsteams in staat zich te concentreren op coderen en samenwerking, waardoor productiviteit en innovatie worden bevorderd.\\n\\nConcluderend biedt AWS CodeCommit een levensvatbaar, kosteneffectief en effici\xebnt alternatief voor de Large File Storage-service van GitHub. Door gebruik te maken van de robuuste infrastructuur van AWS kunnen ontwikkelaars grote bestanden in Git-opslagplaatsen gemakkelijk beheren, hun workflows optimaliseren en de overhead verminderen.\\n"},{"lang":"nl","group":"blog","slug":"blog/check-voltage-current-on-macos-for-power-adapter","frontmatter":{"title":"Controleer Spanning & Stroom op MacOS voor Voedingsadapter","meta_title":"Controleer Spanning & Stroom op MacOS voor Voedingsadapter","date":"2022-02-14T00:00:00.000Z","author":"Tan Shuai","tags":["MacOS","Voedingsadapter","Spanning","Stroom"],"categories":["MacOS"],"draft":false},"content":"\\nWanneer je een MacBook gebruikt, wil je misschien de spanning en stroom van de voedingsadapter controleren. Hier is een eenvoudige manier om de spanning en stroom van de voedingsadapter op MacOS te controleren.\\n\\nOpen Terminal.app en typ het commando:\\n\\n`ioreg -l -n AppleSmartBattery -r |grep AppleRawAdapterDetails`\\n\\nJe krijgt de volgende informatie inclusief stroom en spanning:\\n\\n```json\\n\\"AppleRawAdapterDetails\\" = ({\\"IsWireless\\"=No,\\"AdapterID\\"=0,\\"FamilyCode\\"=18446744073172697098,\\"Watts\\"=89,**\\"Current\\"=4450**,\\"PMUConfiguration\\"=4448,**\\"Voltage\\"=20000**})\\n"},{"lang":"nl","group":"blog","slug":"blog/convert-markdown-academic-paper-pdf-macos","frontmatter":{"title":"Snel Markdown omzetten naar academische stijl PDF op macOS","meta_title":"Markdown omzetten naar academische stijl PDF op macOS met Pandoc","description":"Leer hoe je Markdown-documenten omzet naar PDF\'s in academische stijl op macOS met behulp van Pandoc en BasicTeX. Deze snelle en eenvoudige methode is perfect voor het maken van professionele PDF-bestanden voor academische papers.","date":"2022-03-03T00:00:00.000Z","categories":["Softwareontwikkeling"],"author":"Tan Shuai","tags":["Pandoc","LaTeX","PDF","Paper","Markdown","macOS"],"draft":false},"content":"\\nIn deze gids laat ik je zien hoe ik Markdown-documenten omzet naar academische PDF-bestanden op macOS met behulp van Pandoc en BasicTeX. Deze methode is snel en eenvoudig, perfect voor wanneer je professionele PDF-bestanden voor je academische papers moet maken.\\n\\n### Stap 1: Installeer Pandoc en BasicTeX\\n\\nAllereerst moet je Pandoc en BasicTeX op je macOS-systeem installeren. Zo heb ik het gedaan:\\n\\n1. **Installeer Pandoc**: Open Terminal en voer het volgende commando in om Pandoc te installeren:\\n\\n   ```bash\\n   brew install pandoc\\n   ```\\n\\n2. **Installeer BasicTeX**: Omdat MacTeX vrij groot is, koos ik voor het kleinere BasicTeX-pakket om ruimte te besparen. Voer dit commando uit:\\n\\n   ```bash\\n   brew install --cask basictex\\n   ```\\n\\n3. **Installeer Algemene LaTeX-pakketten**: Om ervoor te zorgen dat je de benodigde pakketten hebt voor het genereren van PDF\'s, voer je deze commando\'s uit:\\n   ```bash\\n   sudo tlmgr update --self\\n   sudo tlmgr install collection-basic collection-latex collection-latexrecommended collection-fontsrecommended\\n   ```\\n\\n### Stap 2: Bereid je Markdown-bestand voor\\n\\nMaak vervolgens je Markdown-bestand (bijvoorbeeld `paper.md`). Zo heb ik mijn bestand ingesteld, inclusief de titel, auteur, datum en contactinformatie:\\n\\n```markdown\\n---\\ntitle: \\"Your Paper Title\\"\\nsubtitle: \\"Optional Subtitle\\"\\ndate: \\\\today\\n\\nauthor: |\\n  | Your Name\\n  | your-email@tanshuai.com\\n  | www.tanshuai.com\\n---\\n\\n# Abstract\\n\\nYour abstract here.\\n\\n# Introduction\\n\\nYour introduction here.\\n\\n# Methodology\\n\\nYour methodology here.\\n\\n# Results\\n\\nYour results here.\\n\\n# Conclusion\\n\\nYour conclusion here.\\n```\\n\\n### Stap 3: Converteer Markdown naar PDF met Pandoc\\n\\nNu kun je je Markdown-bestand naar een PDF converteren. Ik gebruikte het volgende commando in Terminal:\\n\\n```bash\\npandoc paper.md -o paper.pdf --pdf-engine=xelatex\\n```\\n\\nDit commando gebruikt het standaard LaTeX-sjabloon van Pandoc om het Markdown-bestand om te zetten in een academische PDF, inclusief de contactinformatie van de auteur onder hun naam.\\n\\n### Aanvullende Tips\\n\\n- **Aangepast LaTeX-sjabloon**: Als je meer geavanceerde opmaak of specifieke stijlen nodig hebt, kun je een aangepast LaTeX-sjabloon maken of downloaden en gebruiken met Pandoc:\\n\\n  ```bash\\n  pandoc paper.md -o paper.pdf --pdf-engine=xelatex --template=your-template.tex\\n  ```\\n\\n- **Meer Metadata**: Je kunt extra informatie toevoegen in de YAML-metadata header, zoals een abstract of trefwoorden, en deze gebruiken in aangepaste sjablonen.\\n\\n### Conclusie\\n\\nDoor deze stappen te volgen, kun je eenvoudig Markdown-documenten omzetten naar academische PDF-bestanden op macOS. Het gebruik van Pandoc en BasicTeX maakt dit proces snel en effici\xebnt, perfect voor wanneer je professionele PDF-documenten moet genereren. Of je nu academische papers, technische rapporten of andere formele documenten voorbereidt, deze methode werkt uitstekend. Het toevoegen van contactinformatie in de metadata header geeft een professionele touch aan je documenten.\\n\\nIk hoop dat je deze gids nuttig vindt! Als je vragen hebt of tegen problemen aanloopt, aarzel dan niet om contact op te nemen. Veel schrijfplezier!\\n"},{"lang":"nl","group":"blog","slug":"blog/electron-build-tools-error-error-failed-to-run-choco-install-pywin32-yes","frontmatter":{"title":"Electron Build Tools `ERROR Error： Failed to run \\"choco install pywin32 --yes\\"`","date":"2021-09-08T00:00:00.000Z","draft":false,"author":"Tan Shuai","tags":["Electron","Build Tools","PyWin32","Chocolatey","Win32"],"categories":["Softwareontwikkeling"]},"content":"\\nBij het werken met Electron Build Tools, kunt u een fout tegenkomen die te maken heeft met de installatie van pywin32 via Chocolatey. Dit kan frustrerend zijn, vooral als het een vereiste afhankelijkheid voor uw project is. Hieronder vindt u een gedetailleerde uitleg van het probleem en mogelijke stappen om het op te lossen.\\n\\n### De Fout\\n\\nBij het initialiseren van een Electron-project met Electron Build Tools, kunt u de volgende foutmelding zien:\\n\\n```bash\\nE:\\\\\\\\>e init main-testing -i testing --root=e:/src/electron\\nWARN A fixable error has occurred\\n--> A required dependency \\"pywin32\\" could not be located, it probably has to be installed.\\nDo you want build-tools to try fix this for you? [y/n]: y\\n\\nRunning \\"choco install pywin32 --yes\\"\\nERROR Error: Failed to run \\"choco install pywin32 --yes\\"\\n    at spawnSyncWithLog (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:11:11)\\n    at fix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:39:9)\\n    at maybeAutoFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\maybe-auto-fix.js:13:3)\\n    at whichAndFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\which.js:10:5)\\n    at checkPlatformDependencies (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:61:7)\\n    at Object.<anonymous> (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\e-init.js:165:3)\\n    at Module._compile (internal/modules/cjs/loader.js:1072:14)\\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1101:10)\\n    at Module.load (internal/modules/cjs/loader.js:937:32)\\n    at Function.Module._load (internal/modules/cjs/loader.js:778:12)\\n```\\n\\nDeze fout treedt meestal op omdat het installatieprogramma van het pywin32-pakket de vereiste bestanden op de externe server niet kan vinden. Dit resulteert in een 404-fout, wat aangeeft dat het bestand niet beschikbaar is op de opgegeven URL.\\n\\n### Begrijpen van de Fout\\n\\nHet belangrijkste deel van de foutmelding is:\\n\\n```bash\\nERROR: The remote file either doesn\'t exist, is unauthorized, or is forbidden for url \'http://sourceforge.net/projects/pywin32/files/pywin32/Build%20219/pywin32-219.win-amd64-py3.9.exe/download\'. Exception calling \\"GetResponse\\" with \\"0\\" argument(s): \\"The remote server returned an error: (404) Not Found.\\"\\n```\\n\\nDit geeft aan dat de download-URL voor pywin32 niet langer geldig is, wat betekent dat Chocolatey de benodigde installatiebestanden niet kan ophalen.\\n\\n### Stappen voor Probleemoplossing\\n\\nHier zijn een paar stappen die u kunt nemen om dit probleem op te lossen:\\n\\n#### 1. Controleer Chocolatey Installatie\\n\\nZorg ervoor dat Chocolatey correct is ge\xefnstalleerd en bijgewerkt naar de nieuwste versie. U kunt uw Chocolatey-versie controleren met:\\n\\n```bash\\nchoco --version\\n```\\n\\nOm Chocolatey bij te werken, gebruikt u:\\n\\n```bash\\nchoco upgrade chocolatey\\n```\\n\\n#### 2. Installeer pywin32 Handmatig\\n\\nAangezien de geautomatiseerde installatie mislukt, probeer pywin32 handmatig te installeren. U kunt de juiste versie downloaden van de offici\xeble [pywin32 GitHub releases pagina](https://github.com/mhammond/pywin32/releases) en deze handmatig installeren.\\n\\n#### 3. Wijzig het Installatiescript\\n\\nAls u controle hebt over het Electron Build Tools-script, kunt u het aanpassen om te verwijzen naar een geldige URL voor pywin32 of het handmatige installatieproces afhandelen.\\n\\n#### 4. Gebruik een Alternatieve Pakketbeheerder\\n\\nAls Chocolatey blijft falen, overweeg dan een alternatieve pakketbeheerder zoals pip voor Python-pakketten:\\n\\n```bash\\npip install pywin32\\n```\\n\\n### Voorbeeld van Handmatige Installatie van pywin32\\n\\n1. Download de juiste pywin32 installer van de [offici\xeble GitHub releases](https://github.com/mhammond/pywin32/releases).\\n2. Voer de installer uit en volg de installatie-instructies.\\n3. Verifieer de installatie door een eenvoudig Python-script uit te voeren dat pywin32 importeert:\\n\\n```python\\nimport win32api\\nprint(win32api.GetVersionEx())\\n```\\n\\nHet tegenkomen van de foutmelding \\"Failed to run `choco install pywin32 --yes`\\" kan een hindernis zijn in je ontwikkelingsproces. Door echter de oorzaak te begrijpen en de hierboven beschreven stappen te volgen, kun je dit probleem overwinnen en doorgaan met je Electron-projectopstelling.\\n"},{"lang":"nl","group":"blog","slug":"blog/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining","frontmatter":{"title":"Geheime Ontwerpen van Volledig Aangepaste ASIC\'s voor Bitcoin- en Cryptovaluta-mijnbouw","date":"2022-05-30T00:00:00.000Z","update":"2024-08-02T00:00:00.000Z","categories":["Halfgeleiders","Bitcoin","Cryptovaluta","Blockchain"],"author":"Tan Shuai","tags":["ASIC","Bitcoin","Mijnbouw","BTC"],"draft":false,"contact":"Tan Shuai | tanshuai@btc.com | tanshuai.com"},"content":"\\n\\\\nTan Shuai  \\n[tanshuai@btc.com](mailto:tanshuai@btc.com)  \\n[tanshuai.com](https://tanshuai.com)\\n\\n---\\n\\n## Samenvatting\\n\\nIn de competitieve wereld van cryptocurrency mining zijn energie-effici\xebntie, hashrate-prestaties en betrouwbaarheid van het grootste belang. Dit document verdiept zich in het topsegment van full custom ASIC (Application-Specific Integrated Circuit) ontwerp, onthult industri\xeble geheimen en expertmethodologie\xebn die zorgen voor hoogpresterende Bitcoin en cryptocurrency mining. Geschreven door een tech-expert van een van de topbedrijven in ASIC miners, maakt dit document gebruik van geavanceerde ontwerpmethoden, zorgvuldige fysieke lay-out en uitgebreide verificatieprocessen om de uitzonderlijke capaciteiten van full custom ASICs te tonen in het maximaliseren van mining effici\xebntie en winstgevendheid.\\n\\n## Inleiding\\n\\nDe evolutie van cryptocurrency mining, met name Bitcoin mining, heeft een verschuiving gezien van het gebruik van algemene CPU\'s, FPGA\'s en GPU\'s naar gespecialiseerde ASIC\'s. Deze ASIC\'s bieden onge\xebvenaarde prestaties en energie-effici\xebntie. Full custom ASIC-ontwerp vertegenwoordigt het hoogtepunt van deze evolutie, waardoor op maat gemaakte oplossingen mogelijk zijn die voldoen aan de specifieke eisen van mining operaties.\\n\\nVeel van de bestaande literatuur over ASIC-ontwerp voor cryptocurrency mining komt uit de academische wereld of niet-mining bedrijven, die vaak een gebrek aan praktische toepasbaarheid vertonen. Tot op heden zijn slechts een handvol bedrijven, voornamelijk Chinese (bijvoorbeeld MicroBT, Bitmain), erin geslaagd om commercieel levensvatbare Bitcoin mining ASIC\'s te ontwikkelen. Dit document streeft ernaar die leemte op te vullen door inzichten te bieden die zijn getrokken uit de praktijk, en een perspectief te bieden dat is geworteld in de realiteit van de miningsector.\\n\\nAls een professional met meer dan tien jaar ervaring in de tech-industrie, heeft de auteur van dit document de wereld\'s beste Bitcoin ASIC Miner (WhatsMiner), LTC/DOGE en ETH Miners ontwikkeld en een sleutelrol gespeeld in bedrijven zoals MicroBT, BTC.COM en andere publieke fablesses. Hij heeft sleutelposities bekleed in bedrijven genoteerd aan NASDAQ, HKSE en NYSE. Met uitgebreide ervaring in het aangaan van partnerschappen met TSMC, Texas Instruments, ARM en Intel, brengt hij een schat aan kennis en praktische expertise mee naar het gebied van custom ASIC-ontwerp voor Bitcoin en cryptocurrency mining.\\n\\n## Methodologie en Ontwerpstroom\\n\\n### Ontwerpfilosofie\\n\\nOnze benadering van full custom ASIC-ontwerp wordt gedreven door een focus op het maximaliseren van PPA (Power, Performance, and Area), vooral onder laagspanningsomstandigheden. Dit gedeelte beschrijft onze ontwerpfilosofie en methodologie:\\n\\n1. **Pipeline Architectuur**: Gebruik makend van de inherente voordelen van pipeline-structuren voor mining-algoritmen, gekenmerkt door registers en combinatorische logica-stadia. Door gebruik te maken van een pipeline-architectuur kunnen we effici\xebnt omgaan met de hoogfrequente bewerkingen die nodig zijn voor cryptocurrency mining.\\n2. **Handmatige Netlist en Plaatsing**: Gedetailleerd scripten voor netlist-creatie en handmatige celplaatsing om kritieke paden te optimaliseren. Dit stelt ons in staat om de timing nauwkeurig te beheersen en parasitaire effecten te verminderen.\\n3. **Aangepaste Cell Libraries**: Ontwikkelen van gespecialiseerde cellen met geoptimaliseerde transistor-aantallen en dynamische energiebesparingsfuncties. Aangepaste cellen zijn ontworpen om te werken bij de laagst mogelijke spanningen, wat zorgt voor minimaal energieverbruik.\\n\\n### Het Behalen van PPA-voordelen\\n\\nGedetailleerde strategie\xebn voor het behalen van PPA-voordelen door middel van maatwerkontwerp:\\n\\n1. **Aangepast Registerontwerp**: Het gebruik van multi-bit registers en latch-gebaseerde ontwerpen om klokvermogen te verminderen en timing-borrowing te verbeteren. Multi-bit registers minimaliseren het stroomverbruik van de klokboom en verminderen de totale oppervlakte.\\n2. **Handmatige Plaatsing**: Het verkorten van de draadlengte en het balanceren van setup- en hold-tijden om de algehele prestaties te verbeteren. Handmatige plaatsing biedt betere controle over interconnectvertragingen en overspraak, wat de signaalintegriteit verbetert en het stroomverbruik vermindert.\\n3. **Geoptimaliseerd Celontwerp**: Maatwerkcellen zijn ontworpen om bij lagere spanningen te werken, waardoor dynamisch stroomverbruik wordt geminimaliseerd en effici\xebntie wordt gemaximaliseerd. Door de celontwerpen af te stemmen op de specifieke behoeften van de mijnalgoritmen, kunnen we aanzienlijke prestatieverbeteringen bereiken.\\n\\n### Betrouwbaarheid bij Lage Spanning\\n\\nHet waarborgen van de betrouwbaarheid van maatwerk-timinglogica bij lage spanningen omvat:\\n\\n1. **Nauwkeurige Simulatie**: Circuitniveau-simulaties om het gedrag van maatwerkcellen onder specifieke omstandigheden te valideren. Hulpmiddelen zoals SPICE worden gebruikt voor gedetailleerde elektrische simulaties om ervoor te zorgen dat de cellen correct werken onder alle PVT (Process, Voltage, Temperature) hoeken.\\n2. **Consistentie in Plaatsing**: Handmatige plaatsing om uniformiteit en verminderde variabiliteit te waarborgen. Door de fysieke lay-out te beheersen, kunnen we de impact van procesvariaties minimaliseren en consistente prestaties garanderen.\\n3. **Precieze PVT-calibratie**: Verificatie tegen proces-, voltage- en temperatuurvariaties. Uitgebreide tests en calibratie worden uitgevoerd om de robuustheid van het ontwerp te waarborgen bij verschillende bedrijfsomstandigheden.\\n\\n## Case Studies en Resultaten\\n\\nPresentatie van gegevens uit de praktijk en casestudy\'s van volledige maskertape-outs:\\n\\n| Project | Process Node | Voltage/Stroomeffici\xebntie | Algoritme |\\n| ------- | ------------ | ------------------------- | --------- |\\n| SC      | TSMC 28nm    | 0.45V, 257J/T             | Blake2b   |\\n| DCR     | TSMC 28nm    | 0.45V, 150J/T             | Blake256  |\\n| DASH    | TSMC 16nm    | 0.38V, 6.2J/G             | X11       |\\n| BTC     | TSMC 16nm    | 0.38V, 65J/T              | SHA-256d  |\\n| BTC     | TSMC 7nm     | 0.30V, 37J/T              | SHA-256d  |\\n| BTC     | Samsung 8nm  | 0.31V, 45J/T              | SHA-256d  |\\n| BTC     | SMIC N+1     | 0.30V, 35J/T              | SHA-256d  |\\n\\nDeze resultaten tonen de aanzienlijke winsten in effici\xebntie en prestaties die mogelijk zijn door ons maatwerkontwerp.\\n\\n## Integratie en Verificatie\\n\\n### Mixed-Cell Signoff\\n\\n- **Integratie van Maatwerkcellen**: Maatwerkcellen worden ge\xefntegreerd met standaardcellen van TSMC en andere foundries, om compatibiliteit en prestaties te waarborgen. Maatwerkcellen worden gekarakteriseerd en gevalideerd om aan de eisen van de standaardcellenbibliotheek te voldoen, waardoor naadloze integratie mogelijk is.\\n- **Signoff-strategie\xebn**: Strategie\xebn om naadloze compatibiliteit en prestaties te waarborgen omvatten gedetailleerde DRC (Design Rule Check) en LVS (Layout Versus Schematic) controles, evenals timing- en vermogensanalyse met behulp van industriestandaard EDA (Electronic Design Automation) tools.\\n\\n### Digitaal en Analoog Co-Design\\n\\n- **Technieken voor Integratie**: Het integreren van digitale en analoge componenten om de algehele chipprestaties te optimaliseren. Technieken zoals gemengde-signaal verificatie en co-simulatie worden gebruikt om een goede integratie en functionaliteit te waarborgen.\\n- **Verificatiemethodologie\xebn**: Methodologie\xebn om robuustheid te garanderen onder verschillende operationele omstandigheden omvatten hoekanalyse, Monte Carlo-simulaties en betrouwbaarheidsverificatie om veroudering en elektromigratie aan te pakken.\\n\\n## Conclusie\\n\\nVolledig aangepaste ASIC-ontwerpen bieden aanzienlijke voordelen voor Bitcoin- en cryptocurrency-mining, met onge\xebvenaarde prestaties, energie-effici\xebntie en betrouwbaarheid. Door de geheimen van topniveau aangepaste ASIC-ontwerpen te onthullen, belicht dit document de methodologie\xebn en innovaties die de industrie koplopers onderscheiden. Naarmate cryptocurrency-mining blijft evolueren, zullen aangepaste ASIC\'s een cruciale rol spelen bij het aandrijven van de volgende generatie van energie-effici\xebnte, hoogpresterende mining hardware.\\n\\n[PDF-versie van het document](/docs/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining.pdf)\\n"},{"lang":"nl","group":"blog","slug":"blog/get-current-commit-id-of-git-and-update-to-package-json","frontmatter":{"title":"Haal de huidige commit-id van Git op en werk deze bij in package.json","date":"2021-08-21T09:19:58.875Z","draft":false,"author":"Tan Shuai","tags":["Git","Package.json","Node.js"],"categories":["Softwareontwikkeling"]},"content":"\\nBij het ontwikkelen van een Node.js-project wil je mogelijk het huidige commit-ID van je Git-repository bijhouden. Deze informatie kan nuttig zijn voor debugging, versiebeheer of implementatiedoeleinden. Een manier om dit te bereiken is door het `package.json`-bestand bij te werken met het huidige commit-ID tijdens het buildproces. Dit artikel leidt je door de stappen om het huidige commit-ID van Git te krijgen en dit bij te werken in het `package.json`-bestand met behulp van Node.js.\\n\\n```bash\\n\\"predev\\": \\"node ./node_modules/json/lib/json.js -I -f package.json -e \\\\\\\\\\\\\\"this.commit=\'$(git rev-parse --short HEAD)\'\\\\\\\\\\\\\\"\\",\\n"},{"lang":"nl","group":"blog","slug":"blog/migrate-a-github-lfs-git-large-file-storage-repository-to-aws-codecommit","frontmatter":{"title":"Een GitHub LFS (Git Large File Storage) repository migreren naar AWS CodeCommit","date":"2022-02-09T09:36:57.481Z","draft":false,"author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["Softwareontwikkeling"]},"content":"\\nIk heb onlangs een van mijn GitHub-repositories, die Git Large File Storage (LFS) gebruikt, gemigreerd naar AWS CodeCommit. Ik dacht dat ik het proces met je zou delen voor het geval je iets soortgelijks wilt doen. Hier is een stapsgewijze handleiding op basis van mijn ervaring.\\n\\n## Vereisten\\n\\nVoordat we beginnen, zorg ervoor dat je deze tools hebt ge\xefnstalleerd:\\n\\n- Git\\n- Git LFS\\n- AWS CLI\\n\\n## Stapsgewijze Handleiding\\n\\n### 1. Clone de Repository\\n\\nClone eerst je GitHub-repository met de optie `--mirror`. Dit maakt een bare clone van de repository, inclusief alle branches en tags.\\n\\n```zsh\\ngit clone --mirror https://github.com/tanshuai/designs.git designs\\n```\\n\\n### 2. Verifieer LFS-bestanden\\n\\nLijst vervolgens alle bestanden die worden beheerd door Git LFS om te controleren of alles op zijn plaats is.\\n\\n```zsh\\ngit lfs ls-files\\n```\\n\\nJe zou iets als dit moeten zien:\\n\\n```\\ncadfa0bc9e * Brochure-Trifold-Draft.ai\\naf9b8b8a1c * Brochure-Trifold-English.ai\\n27bb5f4e61 * Brochure-Trifold.ai\\n```\\n\\n### 3. Migreer LFS-bestanden\\n\\nExporteer nu de LFS-bestanden. Deze stap zorgt ervoor dat ze deel uitmaken van de geschiedenis van je repository.\\n\\n```zsh\\ngit lfs migrate export --include=\\"*.ai\\" --everything\\n```\\n\\nJe zult voortgangsberichten zoals deze zien:\\n\\n```\\nmigrate: Sorting commits: ..., done.\\nmigrate: Rewriting commits: 100% (20/20), done.\\nmaster 98a3c48d85... -> 82f8873b41...\\nmigrate: Updating refs: ..., done.\\nmigrate: checkout: ..., done.\\nprune: 3 local object(s), 0 retained, done.\\ncadfa0bc9e... (133 MB)\\n27bb5f4e61... (131 MB)\\naf9b8b8a1c... (130 MB), done.\\nprune: Deleting objects: 100% (3/3), done.\\n```\\n\\n### 4. Ruim LFS op\\n\\nVerwijder de Git LFS-trackinginformatie en de\xefnstalleer Git LFS.\\n\\n```zsh\\ngit lfs ls-files\\ngit rm .gitattributes -f\\ngit lfs uninstall\\n```\\n\\n### 5. Push naar AWS CodeCommit\\n\\nPush ten slotte je repository naar AWS CodeCommit.\\n\\n```zsh\\ngit push https://git-codecommit.us-east-2.amazonaws.com/v1/repos/designs --all\\n```\\n\\nDat is het! Door deze stappen te volgen, heb ik mijn GitHub LFS-repository succesvol gemigreerd naar AWS CodeCommit. De grote bestanden en de geschiedenis van de repository zijn perfect behouden gebleven.\\n\\n## Afsluiting\\n\\nHet migreren van een GitHub-repository die Git LFS gebruikt naar AWS CodeCommit is vrij eenvoudig als je de juiste stappen volgt. Als je vragen hebt of tegen problemen aanloopt, zijn de [AWS CodeCommit documentatie](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) en de [Git LFS documentatie](https://git-lfs.github.com/) geweldige bronnen.\\n\\nIk hoop dat je deze handleiding nuttig vindt. Veel programmeerplezier!\\n"},{"lang":"nl","group":"blog","slug":"blog/reset-restore-all-subdirectories-of-git","frontmatter":{"title":"Reset/Herstellen van Alle Subdirectories van Git","date":"2021-09-22T08:33:49.201Z","draft":false,"author":"Tan Shuai","tags":["Git","Versiebeheer"],"categories":["Softwareontwikkeling"]},"content":"\\nHet effectief beheren van een Git-repository vereist vaak het resetten of herstellen van subdirectories om een schone en functionele codebase te behouden. Deze gids biedt een beknopte, stapsgewijze aanpak om alle subdirectories in een Git-repository te resetten of herstellen.\\n\\n## Subdirectories resetten\\n\\nHet volgende Git-commando verwijdert alle niet-getrackte bestanden en directories uit de repository. Dit is nuttig voor het opruimen van onnodige bestanden voordat u een reset of herstel uitvoert.\\n\\n```bash\\ngit clean -xfdf -- .\\n```\\n\\n### Uitleg van het commando:\\n\\n- `-x`: Verwijdert alle niet-getrackte bestanden, inclusief de bestanden die worden genegeerd door `.gitignore`.\\n- `-f`: Forceert het verwijderen van bestanden.\\n- `-d`: Verwijdert niet-getrackte directories.\\n- `-- .`: Past het commando toe op de huidige directory en alle subdirectories.\\n\\n## Subdirectories herstellen\\n\\nOm alle bestanden in de repository te herstellen naar hun laatst gecommitteerde staat, gebruikt u het volgende commando:\\n\\n```bash\\ngit checkout {HEAD OR BRANCH} -- .\\n```\\n\\n### Uitleg van het commando:\\n\\n- `{HEAD OR BRANCH}`: Vervang door `HEAD` om te resetten naar de laatste commit of specificeer een branchnaam om te resetten naar een specifieke branch.\\n- `-- .`: Past het commando toe op de huidige directory en alle subdirectories.\\n\\nDoor deze commando\'s te gebruiken, kunt u ervoor zorgen dat uw repository vrij is van ongewenste bestanden en dat alle bestanden zijn hersteld naar hun gecommitteerde staten. Dit proces helpt bij het onderhouden van een schone en georganiseerde codebase, wat samenwerking en ontwikkeling vergemakkelijkt.\\n\\nVoel u vrij om deze gids aan te passen aan uw specifieke behoeften en voorkeuren. Voor meer geavanceerde Git-operaties, raadpleeg de [offici\xeble Git-documentatie](https://git-scm.com/doc).\\n"},{"lang":"nl","group":"blog","slug":"blog/ultra-low-cost-ddr3-ddr4-lpddr3-lpddr4-memory-test-system","frontmatter":{"title":"Ultra-Lagekosten DDR3, DDR4, LP-DDR3 & LP-DDR4 Geheugentest Systeem","description":"Ontdek het ultra-lagekosten geheugentest systeem voor DDR3, DDR4, LP-DDR3 en LP-DDR4 technologie\xebn. Geprijsd rond de $200.000 USD, biedt het hogesnelheidstesten, veelzijdigheid, geavanceerde functies en laag stroomverbruik. Perfect voor bedrijven die op zoek zijn naar kosteneffectieve, betrouwbare geheugentestoplossingen.","date":"2024-06-01T00:00:00.000Z","categories":["Halfgeleiders"],"author":"Tan Shuai","tags":["DDR3","DDR4","LP-DDR3","LP-DDR4","Geheugentest Systeem"],"draft":false},"content":"\\nAls je net als ik altijd op zoek bent naar kosteneffectieve oplossingen zonder concessies te doen aan kwaliteit, dan ga je houden van wat ik vandaag te delen heb. In onze snel veranderende tech-wereld is het cruciaal dat het geheugen van onze apparaten in orde is. Hoogwaardige opties zoals de T5503/T5503HS2 zijn fantastisch, maar ze hebben een fors prijskaartje. Gelukkig heeft Zeeis een ultra-low-cost geheugentest systeem ontwikkeld dat geen concessies doet aan de prestaties.\\n\\n## Waarom Dit Belangrijk Is\\n\\nToen ik voor het eerst hoorde over het geheugentest systeem van Zeeis, was ik ge\xefntrigeerd. Dit systeem is ontworpen om DDR3, DDR4, LP-DDR3 en LP-DDR4 geheugen technologie\xebn aan te kunnen. Of je nu met oudere systemen werkt of de nieuwste technologie hebt, dit systeem dekt het allemaal.\\n\\n### Hogesnelheidstesten\\n\\nEen van de opvallende kenmerken is het vermogen om datasnelheden van 800 tot 3200 MT/s voor zowel DDR3 als DDR4 te ondersteunen. Het kan geheugenmodules evalueren bij kloksnelheden tot 1600 MHz. Dat betekent grondige en betrouwbare tests, zodat je apparaten optimaal presteren.\\n\\n### Veelzijdigheid\\n\\nDe veelzijdigheid van dit systeem is een game-changer. Het ondersteunt meerdere geheugenstandaarden, waardoor het geschikt is voor een breed scala aan toepassingen, van consumentenelektronica tot high-performance computing. Bovendien is het toekomstbestendig. Naarmate nieuwe geheugentechnologie\xebn op de markt komen, kan dit systeem eenvoudig worden ge\xfcpgraded om ze te ondersteunen.\\n\\n### Kosteneffici\xebntie\\n\\nLaten we het nu hebben over de prijs. Voor ongeveer $200.000 USD biedt dit systeem een uitstekende return on investment. Het is betaalbaar genoeg voor kleine tot middelgrote ondernemingen en biedt topkwaliteit testmogelijkheden zonder de bank te breken.\\n\\n### Geavanceerde Functies\\n\\nHet systeem wordt geleverd met geavanceerde testalgoritmen, waaronder een ge\xefntegreerde algoritmische patroon generator (ALPG). Dit zorgt voor nauwkeurige en betrouwbare geheugenevaluatie, zodat elke module voldoet aan strenge prestatienormen.\\n\\n### Laag Energieverbruik\\n\\nWat ook indrukwekkend is, is het lage energieverbruik. Het sluit aan bij de trends die we zien in LP-DDR3 en LP-DDR4 geheugentechnologie\xebn. Door op lagere voltages te werken, verlaagt het niet alleen de energiekosten, maar minimaliseert het ook de thermische output, wat het een milieuvriendelijke keuze maakt.\\n\\n## Waarom Kiezen Voor Zeeis?\\n\\n### Schaalbaarheid\\n\\nHet systeem van Zeeis is ontworpen met schaalbaarheid in gedachten. Naarmate nieuwe geheugentechnologie\xebn verschijnen, kan het systeem eenvoudig worden ge\xfcpgraded, wat zorgt voor langdurige bruikbaarheid en de noodzaak voor frequente vervangingen vermindert.\\n\\n### Ondersteuning en Documentatie\\n\\nEen ander groot pluspunt is de uitgebreide ondersteuning en documentatie van Zeeis. Of je nu een doorgewinterde professional bent of nieuw in geheugentesten, hun gedetailleerde handleidingen en responsieve klantenservice zorgen voor een soepele ervaring.\\n\\n### Voldoen Aan Marktbehoeften\\n\\nMet de groeiende vraag naar hogesnelheidsgeheugen in alles, van smartphones tot datacenters, is het essentieel om een betrouwbare en kosteneffectieve geheugentest oplossing te hebben. Het systeem van Zeeis voldoet aan deze eisen, zodat je producten marktklaar zijn en perfect presteren in real-world toepassingen.\\n\\n## Conclusie\\n\\nKortom, het Ultra Low Cost DDR3, DDR4, LP-DDR3 & LP-DDR4 Memory Test System van Zeeis is een fantastische optie voor degenen onder ons die betrouwbare, veelzijdige en betaalbare geheugentest oplossingen nodig hebben. Het biedt hoge prestaties tegen een fractie van de kosten van andere high-end systemen, waardoor bedrijven hoge standaarden kunnen handhaven zonder de bank te breken.\\n\\nAls je ge\xefnteresseerd bent in het verbeteren van je testmogelijkheden met een systeem dat is ontworpen voor de toekomst van geheugen technologie, neem dan gerust contact met mij op voor meer informatie via [i@tanshuai.com](mailto:i@tanshuai.com).\\n\\nVeel testplezier!\\n"},{"lang":"nl","group":"blog","slug":"blog/usr-bin-sudo-must-be-owned-by-uid-0-and-have-the-setuid-bit-set-on-ubuntu-20-04","frontmatter":{"title":"/usr/bin/sudo moet eigendom zijn van uid 0 en de setuid-bit hebben op Ubuntu 20.04","date":"2021-10-08T13:07:25.406Z","draft":false,"author":"Tan Shuai","tags":["Ubuntu","Linux","Sudo"],"categories":["Linux"]},"content":"\\nAls je de foutmelding \\"/usr/bin/sudo moet eigendom zijn van uid 0 en de setuid-bit hebben\\" tegenkomt op Ubuntu 20.04, volg dan deze stappen om het probleem op te lossen.\\n\\n1. Druk tijdens het opstartproces op de \'ESC\'-toets om toegang te krijgen tot het GRUB-menu.\\n\\n![GRUB-scherm](/images/content/wx20211008-210752.png \\"GRUB-scherm\\")\\n\\n2. Selecteer de eerste optie, “Ubuntu,” en druk op de \'e\'-toets om de opstartparameters te bewerken.\\n\\n![Opstartparameters bewerken](/images/content/wx20211008-210841.png \\"Opstartparameters bewerken\\")\\n\\n3. Voeg de volgende string toe aan de regel die begint met \'linux\' om in de reddingsmodus te starten:\\n\\n```bash\\nsystemd.unit=rescue.target\\n```\\n\\n4. Zodra je in de reddingsmodus bent, voer je het volgende commando uit om de juiste permissies en eigendom voor `/usr/bin/sudo` te herstellen:\\n\\n```bash\\npkexec chmod a=rx,u+ws /usr/bin/sudo\\n```\\n\\nDit commando stelt de benodigde permissies in en zorgt ervoor dat `sudo` eigendom is van de root-gebruiker met de setuid-bit ingesteld.\\n\\nDoor deze stappen te volgen, zou je het probleem moeten kunnen oplossen en de juiste functionaliteit van het `sudo`-commando op je Ubuntu-systeem kunnen herstellen.\\n\\n---\\n"},{"lang":"sv","group":"blog","slug":"blog/aws-codecommit-the-githubs-large-file-storage-git-lfs-free-alternative","frontmatter":{"title":"AWS CodeCommit： Det kostnadsfria alternativet till GitHub Large File Storage (Git LFS)","description":"Uppt\xe4ck hur AWS CodeCommit fungerar som ett kostnadseffektivt och effektivt alternativ till GitHubs Large File Storage (Git LFS). Den h\xe4r artikeln t\xe4cker begr\xe4nsningarna med Git LFS, f\xf6rdelarna med att anv\xe4nda AWS CodeCommit f\xf6r lagring av stora filer, och ger en steg-f\xf6r-steg-guide f\xf6r att migrera fr\xe5n Git LFS till CodeCommit. F\xf6rb\xe4ttra ditt utvecklingsfl\xf6de med AWS:s skalbara och s\xe4kra infrastruktur.","date":"2022-02-09T00:00:00.000Z","author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["Mjukvaruutveckling"],"draft":false},"content":"\\nAWS CodeCommit erbjuder ett robust alternativ till GitHubs Large File Storage (Git LFS)-tj\xe4nst och tillhandah\xe5ller en effektiv l\xf6sning f\xf6r att hantera stora filer i dina Git-repositorier.\\n\\n## Varf\xf6r Du B\xf6r \xd6verv\xe4ga att Inte Anv\xe4nda Git LFS\\n\\n\xc4ven om Git LFS \xe4r ett popul\xe4rt val f\xf6r att hantera stora filer i Git-repositorier, har det sina begr\xe4nsningar och utmaningar. Git LFS kr\xe4ver ytterligare inst\xe4llningar och hantering, vilket kan komplicera utvecklingsarbetsfl\xf6det. Dessutom kan lagrings- och bandbreddskostnaderna f\xf6r Git LFS snabbt eskalera, s\xe4rskilt f\xf6r projekt med m\xe5nga stora filer eller omfattande samarbete.\\n\\n## Varf\xf6r GitHubs Large File Storage-tj\xe4nst Inte \xe4r Perfekt\\n\\nGitHubs Large File Storage-tj\xe4nst, \xe4ven om den \xe4r anv\xe4ndbar, har inneboende nackdelar. Den fr\xe4msta oron \xe4r kostnaden f\xf6r lagring och bandbredd, som kan bli prohibitiva f\xf6r st\xf6rre projekt. Dessutom kan hanteringen av Git LFS vara besv\xe4rlig, vilket kr\xe4ver att utvecklare installerar och konfigurerar LFS-klienten, sp\xe5rar specifika filer och hanterar potentiella sammanslagningskonflikter som uppst\xe5r p\xe5 grund av hanteringen av stora filer separat fr\xe5n resten av repositoriet.\\n\\n## Varf\xf6r Anv\xe4nda AWS CodeCommit f\xf6r att Lagra Stora Filer i Git\\n\\nAWS CodeCommit erbjuder ett \xf6vertygande alternativ f\xf6r att lagra stora filer i Git-repositorier utan behov av Git LFS. CodeCommit \xe4r en fullt hanterad k\xe4llkontrolltj\xe4nst som s\xf6ml\xf6st integreras med andra AWS-tj\xe4nster och erbjuder robust skalbarhet, s\xe4kerhet och kostnadseffektivitet. Genom att utnyttja CodeCommit kan utvecklare undvika den extra \xf6verbelastningen av att hantera Git LFS samtidigt som de drar nytta av AWS:s robusta infrastruktur och betalningsmodell efter anv\xe4ndning.\\n\\n## Vilka \xc4r Begr\xe4nsningarna med AWS CodeCommit j\xe4mf\xf6rt med GitHub\\n\\nTrots sina f\xf6rdelar har AWS CodeCommit vissa begr\xe4nsningar j\xe4mf\xf6rt med GitHub. GitHubs omfattande community-st\xf6d, rika ekosystem av integrationer och avancerade funktioner som GitHub Actions och GitHub Pages kanske inte fullt ut replikeras i CodeCommit. Dessutom kan utvecklare som \xe4r vana vid GitHubs anv\xe4ndargr\xe4nssnitt och samarbetsverktyg finna att \xf6verg\xe5ngen till CodeCommit kr\xe4ver en viss anpassning.\\n\\n## Hur man Migrerar ett Git LFS Repository till CodeCommit\\n\\nAtt migrera ett Git LFS-repository till CodeCommit inneb\xe4r flera steg. F\xf6rst, se till att alla stora filer \xe4r korrekt sp\xe5rade i ditt Git LFS-repository. D\xe4refter klonar du repositoriet och tar bort Git LFS-sp\xe5rningskonfigurationen. Efter det skapar du ett nytt repository i AWS CodeCommit och pushar ditt lokala repository till det. Detaljerad dokumentation och skript finns tillg\xe4ngliga f\xf6r att effektivisera denna process och s\xe4kerst\xe4lla en smidig \xf6verg\xe5ng utan dataf\xf6rlust eller avbrott.\\n\\n## En B\xe4ttre L\xf6sning\\n\\nF\xf6r team och projekt som \xe4r starkt beroende av Git LFS kan utforskning av AWS CodeCommit som ett alternativ erbjuda betydande f\xf6rdelar. CodeCommits s\xf6ml\xf6sa integration med AWS-ekosystemet, tillsammans med dess kostnadseffektiva och skalbara natur, g\xf6r det till ett attraktivt alternativ f\xf6r att hantera stora filer i Git-repositorier. Genom att mildra de utmaningar som \xe4r f\xf6rknippade med Git LFS, ger CodeCommit utvecklingsteam m\xf6jlighet att fokusera p\xe5 kodning och samarbete, vilket driver produktivitet och innovation.\\n\\nSammanfattningsvis erbjuder AWS CodeCommit ett genomf\xf6rbart, kostnadseffektivt och effektivt alternativ till GitHubs Large File Storage-tj\xe4nst. Genom att utnyttja AWS:s robusta infrastruktur kan utvecklare hantera stora filer i Git-repositorier med l\xe4tthet, optimera sina arbetsfl\xf6den och minska overhead.\\n"},{"lang":"sv","group":"blog","slug":"blog/check-voltage-current-on-macos-for-power-adapter","frontmatter":{"title":"Kontrollera sp\xe4nning och str\xf6m p\xe5 MacOS f\xf6r str\xf6madapter","meta_title":"Kontrollera sp\xe4nning och str\xf6m p\xe5 MacOS f\xf6r str\xf6madapter","date":"2022-02-14T00:00:00.000Z","author":"Tan Shuai","tags":["MacOS","Str\xf6madapter","Sp\xe4nning","Str\xf6m"],"categories":["MacOS"],"draft":false},"content":"\\nN\xe4r du anv\xe4nder en MacBook kan du vilja kontrollera sp\xe4nningen och str\xf6mmen p\xe5 str\xf6madaptern. H\xe4r \xe4r ett enkelt s\xe4tt att kontrollera sp\xe4nningen och str\xf6mmen p\xe5 str\xf6madaptern p\xe5 MacOS.\\n\\n\xd6ppna Terminal.app och skriv kommandot:\\n\\n`ioreg -l -n AppleSmartBattery -r |grep AppleRawAdapterDetails`\\n\\nDu f\xe5r f\xf6ljande information inklusive str\xf6m och sp\xe4nning:\\n\\n```json\\n\\"AppleRawAdapterDetails\\" = ({\\"IsWireless\\"=No,\\"AdapterID\\"=0,\\"FamilyCode\\"=18446744073172697098,\\"Watts\\"=89,**\\"Current\\"=4450**,\\"PMUConfiguration\\"=4448,**\\"Voltage\\"=20000**})\\n"},{"lang":"sv","group":"blog","slug":"blog/convert-markdown-academic-paper-pdf-macos","frontmatter":{"title":"Konvertera snabbt Markdown till akademisk stil PDF p\xe5 macOS","meta_title":"Konvertera Markdown till akademisk stil PDF p\xe5 macOS med Pandoc","description":"L\xe4r dig hur du konverterar Markdown-dokument till akademiska stil-PDF:er p\xe5 macOS med Pandoc och BasicTeX. Denna snabba och enkla metod \xe4r perfekt f\xf6r att skapa professionella PDF-filer f\xf6r akademiska papper.","date":"2022-03-03T00:00:00.000Z","categories":["Programvaruutveckling"],"author":"Tan Shuai","tags":["Pandoc","LaTeX","PDF","Papper","Markdown","macOS"],"draft":false},"content":"\\nI den h\xe4r guiden g\xe5r jag igenom hur jag konverterar Markdown-dokument till akademiska PDF-filer p\xe5 macOS med hj\xe4lp av Pandoc och BasicTeX. Denna metod \xe4r snabb och enkel, perfekt n\xe4r du beh\xf6ver skapa professionellt utseende PDF-filer f\xf6r dina akademiska papper.\\n\\n### Steg 1: Installera Pandoc och BasicTeX\\n\\nF\xf6rst m\xe5ste du installera Pandoc och BasicTeX p\xe5 ditt macOS-system. S\xe5 h\xe4r gjorde jag:\\n\\n1. **Installera Pandoc**: \xd6ppna Terminal och ange f\xf6ljande kommando f\xf6r att installera Pandoc:\\n\\n   ```bash\\n   brew install pandoc\\n   ```\\n\\n2. **Installera BasicTeX**: Eftersom MacTeX \xe4r ganska stort, valde jag det mindre BasicTeX-paketet f\xf6r att spara utrymme. K\xf6r detta kommando:\\n\\n   ```bash\\n   brew install --cask basictex\\n   ```\\n\\n3. **Installera vanliga LaTeX-paket**: F\xf6r att s\xe4kerst\xe4lla att du har de n\xf6dv\xe4ndiga paketen f\xf6r att generera PDF-filer, k\xf6r dessa kommandon:\\n   ```bash\\n   sudo tlmgr update --self\\n   sudo tlmgr install collection-basic collection-latex collection-latexrecommended collection-fontsrecommended\\n   ```\\n\\n### Steg 2: F\xf6rbered ditt Markdown-fil\\n\\nSkapa d\xe4refter din Markdown-fil (t.ex. `paper.md`). S\xe5 h\xe4r st\xe4llde jag upp min fil, inklusive titel, f\xf6rfattare, datum och kontaktinformation:\\n\\n```markdown\\n---\\ntitle: \\"Your Paper Title\\"\\nsubtitle: \\"Optional Subtitle\\"\\ndate: \\\\today\\n\\nauthor: |\\n  | Your Name\\n  | your-email@tanshuai.com\\n  | www.tanshuai.com\\n---\\n\\n# Abstract\\n\\nYour abstract here.\\n\\n# Introduction\\n\\nYour introduction here.\\n\\n# Methodology\\n\\nYour methodology here.\\n\\n# Results\\n\\nYour results here.\\n\\n# Conclusion\\n\\nYour conclusion here.\\n```\\n\\n### Steg 3: Konvertera Markdown till PDF med Pandoc\\n\\nNu kan du konvertera din Markdown-fil till en PDF. Jag anv\xe4nde f\xf6ljande kommando i Terminal:\\n\\n```bash\\npandoc paper.md -o paper.pdf --pdf-engine=xelatex\\n```\\n\\nDetta kommando anv\xe4nder Pandocs standard LaTeX-mall f\xf6r att konvertera Markdown-filen till en akademisk PDF-fil, inklusive f\xf6rfattarens kontaktinformation under deras namn.\\n\\n### Ytterligare tips\\n\\n- **Anpassad LaTeX-mall**: Om du beh\xf6ver mer avancerad formatering eller specifika stilar, kan du skapa eller ladda ner en anpassad LaTeX-mall och anv\xe4nda den med Pandoc:\\n\\n  ```bash\\n  pandoc paper.md -o paper.pdf --pdf-engine=xelatex --template=your-template.tex\\n  ```\\n\\n- **Mer metadata**: Du kan l\xe4gga till extra information i YAML-metadatahuvudet, s\xe5som en sammanfattning eller nyckelord, och anv\xe4nda dessa i anpassade mallar.\\n\\n### Slutsats\\n\\nGenom att f\xf6lja dessa steg kan du enkelt konvertera Markdown-dokument till akademiska PDF-filer p\xe5 macOS. Att anv\xe4nda Pandoc och BasicTeX g\xf6r denna process snabb och effektiv, perfekt n\xe4r du beh\xf6ver generera professionella PDF-dokument. Oavsett om du f\xf6rbereder akademiska papper, tekniska rapporter eller andra formella dokument, fungerar denna metod utm\xe4rkt. Att inkludera kontaktinformation i metadatahuvudet ger en professionell touch till dina dokument.\\n\\nJag hoppas att du finner denna guide anv\xe4ndbar! Om du har n\xe5gra fr\xe5gor eller st\xf6ter p\xe5 problem, tveka inte att h\xf6ra av dig. Lycka till med skrivandet!\\n"},{"lang":"sv","group":"blog","slug":"blog/electron-build-tools-error-error-failed-to-run-choco-install-pywin32-yes","frontmatter":{"title":"Electron Build Tools `ERROR Error： Failed to run \\"choco install pywin32 --yes\\"`","date":"2021-09-08T00:00:00.000Z","draft":false,"author":"Tan Shuai","tags":["Elektron","Byggverktyg","PyWin32","Chocolatey","Win32"],"categories":["Programvaruutveckling"]},"content":"\\nN\xe4r du arbetar med Electron Build Tools kan du st\xf6ta p\xe5 ett fel relaterat till installationen av pywin32 via Chocolatey. Detta kan vara frustrerande, s\xe4rskilt n\xe4r det \xe4r en n\xf6dv\xe4ndig beroende f\xf6r ditt projekt. Nedan f\xf6ljer en detaljerad f\xf6rklaring av problemet och potentiella steg f\xf6r att l\xf6sa det.\\n\\n### Felet\\n\\nN\xe4r du initierar ett Electron-projekt med Electron Build Tools kan du se f\xf6ljande felmeddelande:\\n\\n```bash\\nE:\\\\\\\\>e init main-testing -i testing --root=e:/src/electron\\nWARN Ett \xe5tg\xe4rdbart fel har uppst\xe5tt\\n--> En n\xf6dv\xe4ndig beroende \\"pywin32\\" kunde inte hittas, det m\xe5ste f\xf6rmodligen installeras.\\nVill du att build-tools ska f\xf6rs\xf6ka fixa detta \xe5t dig? [y/n]: y\\n\\nK\xf6r \\"choco install pywin32 --yes\\"\\nERROR Fel: Misslyckades med att k\xf6ra \\"choco install pywin32 --yes\\"\\n    p\xe5 spawnSyncWithLog (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:11:11)\\n    p\xe5 fix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:39:9)\\n    p\xe5 maybeAutoFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\maybe-auto-fix.js:13:3)\\n    p\xe5 whichAndFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\which.js:10:5)\\n    p\xe5 checkPlatformDependencies (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:61:7)\\n    p\xe5 Object.<anonymous> (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\e-init.js:165:3)\\n    p\xe5 Module._compile (internal/modules/cjs/loader.js:1072:14)\\n    p\xe5 Object.Module._extensions..js (internal/modules/cjs/loader.js:1101:10)\\n    p\xe5 Module.load (internal/modules/cjs/loader.js:937:32)\\n    p\xe5 Function.Module._load (internal/modules/cjs/loader.js:778:12)\\n```\\n\\nDetta fel uppst\xe5r vanligtvis eftersom installationsskriptet f\xf6r pywin32-paketet inte kan hitta de n\xf6dv\xe4ndiga filerna p\xe5 den avl\xe4gsna servern. Detta resulterar i ett 404-fel, vilket indikerar att filen inte \xe4r tillg\xe4nglig p\xe5 den angivna URL:en.\\n\\n### F\xf6rst\xe5 Felet\\n\\nDen viktiga delen av felmeddelandet \xe4r:\\n\\n```bash\\nERROR: Den avl\xe4gsna filen finns antingen inte, \xe4r obeh\xf6rig eller \xe4r f\xf6rbjuden f\xf6r URL \'http://sourceforge.net/projects/pywin32/files/pywin32/Build%20219/pywin32-219.win-amd64-py3.9.exe/download\'. Undantag vid anrop av \\"GetResponse\\" med \\"0\\" argument(er): \\"Den avl\xe4gsna servern returnerade ett fel: (404) Hittades inte.\\"\\n```\\n\\nDetta indikerar att nedladdnings-URL:en f\xf6r pywin32 inte l\xe4ngre \xe4r giltig, vilket inneb\xe4r att Chocolatey inte kan h\xe4mta de n\xf6dv\xe4ndiga installationsfilerna.\\n\\n### Fels\xf6kningssteg\\n\\nH\xe4r \xe4r n\xe5gra steg du kan ta f\xf6r att l\xf6sa detta problem:\\n\\n#### 1. Verifiera Chocolatey-installation\\n\\nS\xe4kerst\xe4ll att Chocolatey \xe4r korrekt installerat och uppdaterat till den senaste versionen. Du kan kontrollera din Chocolatey-version med:\\n\\n```bash\\nchoco --version\\n```\\n\\nF\xf6r att uppdatera Chocolatey, anv\xe4nd:\\n\\n```bash\\nchoco upgrade chocolatey\\n```\\n\\n#### 2. Installera pywin32 manuellt\\n\\nEftersom den automatiska installationen misslyckas, f\xf6rs\xf6k att installera pywin32 manuellt. Du kan ladda ner r\xe4tt version fr\xe5n den officiella [pywin32 GitHub releases-sidan](https://github.com/mhammond/pywin32/releases) och installera den manuellt.\\n\\n#### 3. Modifiera installationsskriptet\\n\\nOm du har kontroll \xf6ver Electron Build Tools-skriptet kan du \xe4ndra det f\xf6r att peka p\xe5 en giltig URL f\xf6r pywin32 eller hantera den manuella installationsprocessen.\\n\\n#### 4. Anv\xe4nd en Alternativ Paket Hanterare\\n\\nOm Chocolatey forts\xe4tter att misslyckas, \xf6verv\xe4g att anv\xe4nda en alternativ pakethanterare som pip f\xf6r Python-paket:\\n\\n```bash\\npip install pywin32\\n```\\n\\n### Exempel p\xe5 Manuell Installation av pywin32\\n\\n1. Ladda ner den l\xe4mpliga pywin32-installationsfilen fr\xe5n [officiella GitHub-utg\xe5vor](https://github.com/mhammond/pywin32/releases).\\n2. K\xf6r installationsprogrammet och f\xf6lj installationsinstruktionerna.\\n3. Verifiera installationen genom att k\xf6ra ett enkelt Python-skript som importerar pywin32:\\n\\n```python\\nimport win32api\\nprint(win32api.GetVersionEx())\\n```\\n\\nAtt st\xf6ta p\xe5 felet \\"Failed to run `choco install pywin32 --yes`\\" kan vara ett hinder i din utvecklingsprocess. Men genom att f\xf6rst\xe5 grundorsaken och f\xf6lja stegen ovan kan du \xf6vervinna detta problem och forts\xe4tta med din Electron-projektinstallation.\\n"},{"lang":"sv","group":"blog","slug":"blog/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining","frontmatter":{"title":"Full Custom ASIC Design Secrets for Bitcoin och Kryptovalutamining","date":"2022-05-30T00:00:00.000Z","update":"2024-08-02T00:00:00.000Z","categories":["Halvledare","Bitcoin","Kryptovaluta","Blockchain"],"author":"Tan Shuai","tags":["ASIC","Bitcoin","Mining","BTC"],"draft":false,"contact":"Tan Shuai | tanshuai@btc.com | tanshuai.com"},"content":"\\n\\\\nTan Shuai  \\n[tanshuai@btc.com](mailto:tanshuai@btc.com)  \\n[tanshuai.com](https://tanshuai.com)\\n\\n---\\n\\n## Sammanfattning\\n\\nI den konkurrensutsatta v\xe4rlden av kryptovalutamining \xe4r energieffektivitet, hashrate-prestanda och tillf\xf6rlitlighet av st\xf6rsta vikt. Denna artikel dyker ner i toppklassens full custom ASIC (Application-Specific Integrated Circuit)-design, avsl\xf6jar branschhemligheter och expertmetoder som driver h\xf6gpresterande Bitcoin- och kryptovalutamining. Skriven av en teknisk expert fr\xe5n ett av de ledande ASIC-minerf\xf6retagen, utnyttjar denna artikel avancerade designtekniker, noggrann fysisk layout och omfattande verifieringsprocesser f\xf6r att visa p\xe5 de exceptionella kapaciteterna hos full custom ASICs f\xf6r att maximera miningeffektivitet och l\xf6nsamhet.\\n\\n## Inledning\\n\\nUtvecklingen av kryptovalutamining, s\xe4rskilt Bitcoin-mining, har sett en f\xf6rskjutning fr\xe5n att anv\xe4nda allm\xe4nna processorer, FPGAs och GPUs till specialiserade ASICs. Dessa ASICs erbjuder o\xf6vertr\xe4ffad prestanda och energieffektivitet. Full custom ASIC-design representerar kulmen av denna utveckling, vilket m\xf6jligg\xf6r skr\xe4ddarsydda l\xf6sningar som uppfyller de specifika kraven f\xf6r miningverksamhet.\\n\\nMycket av den befintliga litteraturen om ASIC-design f\xf6r kryptovalutamining kommer fr\xe5n akademin eller icke-miningf\xf6retag, vilket ofta saknar verklig till\xe4mplighet. Hittills har endast ett f\xe5tal f\xf6retag, fr\xe4mst kinesiska (t.ex. MicroBT, Bitmain), framg\xe5ngsrikt utvecklat marknadsf\xf6rbara Bitcoin-mining ASICs. Denna artikel syftar till att fylla detta gap genom att tillhandah\xe5lla insikter dragna fr\xe5n faktisk branschpraxis, och erbjuda ett perspektiv grundat i verkligheten av miningsektorn.\\n\\nSom en professionell med \xf6ver tio \xe5rs erfarenhet inom teknikindustrin har f\xf6rfattaren till denna artikel utvecklat v\xe4rldens fr\xe4msta Bitcoin ASIC Miner (WhatsMiner), LTC/DOGE och ETH Miners, och spelat en nyckelroll i f\xf6retag som MicroBT, BTC.COM och andra publika fablesses. Han har innehaft nyckelpositioner i f\xf6retag noterade p\xe5 NASDAQ, HKSE och NYSE. Med omfattande erfarenhet av att etablera partnerskap med TSMC, Texas Instruments, ARM och Intel, tillf\xf6r han en rikedom av kunskap och praktisk expertis till omr\xe5det f\xf6r custom ASIC-design f\xf6r Bitcoin och kryptovalutamining.\\n\\n## Metodik och Designfl\xf6de\\n\\n### Designfilosofi\\n\\nV\xe5r ansats till full custom ASIC-design drivs av ett fokus p\xe5 att maximera PPA (Power, Performance, and Area), s\xe4rskilt under l\xe5gsp\xe4nningsdriftsf\xf6rh\xe5llanden. Denna sektion kommer att beskriva v\xe5r designfilosofi och metodik:\\n\\n1. **Pipeline-arkitektur**: Utnyttjande av de inneboende f\xf6rdelarna med pipeline-strukturer f\xf6r miningalgoritmer, k\xe4nnetecknade av register och kombinationslogiksteg. Genom att anv\xe4nda en pipeline-arkitektur kan vi effektivt hantera de h\xf6gfrekventa operationer som kr\xe4vs f\xf6r kryptovalutamining.\\n2. **Manuell Netlist och Placering**: Detaljerad skriptning f\xf6r netlist-skapande och manuell cellplacering f\xf6r att optimera kritiska v\xe4gar. Detta m\xf6jligg\xf6r exakt kontroll \xf6ver timing och minskar parasit\xe4ra effekter.\\n3. **Anpassade Cellbibliotek**: Utveckling av specialiserade celler med optimerade transistorr\xe4knare och dynamiska str\xf6mbesparingsfunktioner. Anpassade celler \xe4r designade f\xf6r att fungera vid l\xe4gsta m\xf6jliga sp\xe4nningar, vilket s\xe4kerst\xe4ller minimal str\xf6mf\xf6rbrukning.\\n\\n### Uppn\xe5 f\xf6rdelar med PPA\\n\\nDetaljerade strategier f\xf6r att uppn\xe5 f\xf6rdelar med PPA genom skr\xe4ddarsydd design:\\n\\n1. **Skr\xe4ddarsydd registerdesign**: Anv\xe4nda flerbitsregister och latch-baserade designer f\xf6r att minska klockeffekt och f\xf6rb\xe4ttra timing-borrowing. Flerbitsregister minskar klocktr\xe4dets str\xf6mf\xf6rbrukning och minskar den totala arean.\\n2. **Manuell placering**: Minska ledningsl\xe4ngden och balansera uppst\xe4llnings- och h\xe5lltider f\xf6r att f\xf6rb\xe4ttra den totala prestandan. Manuell placering ger b\xe4ttre kontroll \xf6ver f\xf6rdr\xf6jningar och \xf6verh\xf6rning i sammankopplingar, vilket f\xf6rb\xe4ttrar signalintegritet och minskar str\xf6mf\xf6rbrukningen.\\n3. **Optimerad celldesign**: Anpassade celler \xe4r designade f\xf6r att fungera vid l\xe4gre sp\xe4nningar, vilket minimerar dynamisk str\xf6mf\xf6rbrukning och maximerar effektiviteten. Genom att anpassa celldesignerna till de specifika behoven hos gruvalgoritmerna kan vi uppn\xe5 betydande f\xf6rb\xe4ttringar i prestanda.\\n\\n### Tillf\xf6rlitlighet vid l\xe5g sp\xe4nning\\n\\nS\xe4kerst\xe4lla tillf\xf6rlitligheten hos skr\xe4ddarsydd timinglogik vid l\xe5ga sp\xe4nningar inneb\xe4r:\\n\\n1. **Noggrann simulering**: Kretsniv\xe5simuleringar f\xf6r att validera skr\xe4ddarsydd cellbeteende under specifika f\xf6rh\xe5llanden. Verktyg som SPICE anv\xe4nds f\xf6r detaljerade elektriska simuleringar f\xf6r att s\xe4kerst\xe4lla att cellerna fungerar korrekt under alla PVT (Process, Voltage, Temperature) f\xf6rh\xe5llanden.\\n2. **Konsekvens i placering**: Manuell placering f\xf6r att s\xe4kerst\xe4lla enhetlighet och minska variabilitet. Genom att kontrollera den fysiska layouten kan vi minimera inverkan av processvariationer och s\xe4kerst\xe4lla konsekvent prestanda.\\n3. **Exakt PVT-kalibrering**: Verifiering mot process-, sp\xe4nnings- och temperaturvariationer. Omfattande testning och kalibrering utf\xf6rs f\xf6r att s\xe4kerst\xe4lla designens robusthet under olika driftf\xf6rh\xe5llanden.\\n\\n## Fallstudier och resultat\\n\\nPresentera verkliga data och fallstudier fr\xe5n fulla mask tape-outs:\\n\\n| Projekt | Processnod | Sp\xe4nning/Str\xf6meffektivitet | Algoritm  |\\n| ------- | ----------- | ------------------------- | --------- |\\n| SC      | TSMC 28nm   | 0,45V, 257J/T             | Blake2b   |\\n| DCR     | TSMC 28nm   | 0,45V, 150J/T             | Blake256  |\\n| DASH    | TSMC 16nm   | 0,38V, 6,2J/G             | X11       |\\n| BTC     | TSMC 16nm   | 0,38V, 65J/T              | SHA-256d  |\\n| BTC     | TSMC 7nm    | 0,30V, 37J/T              | SHA-256d  |\\n| BTC     | Samsung 8nm | 0,31V, 45J/T              | SHA-256d  |\\n| BTC     | SMIC N+1    | 0,30V, 35J/T              | SHA-256d  |\\n\\nDessa resultat visar p\xe5 de betydande f\xf6rb\xe4ttringar i effektivitet och prestanda som kan uppn\xe5s genom v\xe5r skr\xe4ddarsydda designmetod.\\n\\n## Integration och verifiering\\n\\n### Blandcells signoff\\n\\n- **Integration av skr\xe4ddarsydda celler**: Skr\xe4ddarsydda celler integreras med standardceller fr\xe5n TSMC och andra foundries f\xf6r att s\xe4kerst\xe4lla kompatibilitet och prestanda. Skr\xe4ddarsydda celler karakt\xe4riseras och valideras f\xf6r att matcha standardcellbibliotekens krav, vilket m\xf6jligg\xf6r s\xf6ml\xf6s integration.\\n- **Signoff-strategier**: Strategier f\xf6r att s\xe4kerst\xe4lla s\xf6ml\xf6s kompatibilitet och prestanda inkluderar detaljerade DRC (Design Rule Check) och LVS (Layout Versus Schematic) kontroller, samt tids- och str\xf6manalys med hj\xe4lp av industristandard EDA (Electronic Design Automation) verktyg.\\n\\n### Digital och Analog Samdesign\\n\\n- **Tekniker f\xf6r Integration**: Att integrera digitala och analoga komponenter f\xf6r att optimera den totala chipprestandan. Tekniker som mixed-signal-verifiering och co-simulering anv\xe4nds f\xf6r att s\xe4kerst\xe4lla korrekt integration och funktionalitet.\\n- **Verifieringsmetoder**: Metoder f\xf6r att s\xe4kerst\xe4lla robusthet under olika driftsf\xf6rh\xe5llanden inkluderar h\xf6rnanalyser, Monte Carlo-simuleringar och tillf\xf6rlitlighetsverifiering f\xf6r att adressera \xe5ldrande och elektromigration.\\n\\n## Slutsats\\n\\nFull anpassad ASIC-design erbjuder betydande f\xf6rdelar f\xf6r Bitcoin- och kryptovalutautvinning, med enast\xe5ende prestanda, energieffektivitet och tillf\xf6rlitlighet. Genom att avsl\xf6ja hemligheterna bakom f\xf6rstklassig anpassad ASIC-design, belyser detta papper de metoder och innovationer som skiljer industriledarna \xe5t. Allteftersom kryptovalutautvinning forts\xe4tter att utvecklas, kommer anpassade ASIC:er att spela en avg\xf6rande roll i att driva n\xe4sta generation av h\xf6gpresterande och energieffektiv utvinningsh\xe5rdvara.\\n\\n[PDF-version av dokumentet](/docs/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining.pdf)\\n"},{"lang":"sv","group":"blog","slug":"blog/get-current-commit-id-of-git-and-update-to-package-json","frontmatter":{"title":"H\xe4mta aktuellt commit-ID fr\xe5n Git och uppdatera package.json","date":"2021-08-21T09:19:58.875Z","draft":false,"author":"Tan Shuai","tags":["Git","Package.json","Node.js"],"categories":["Programvaruutveckling"]},"content":"\\nN\xe4r du utvecklar ett Node.js-projekt kan du vilja h\xe5lla reda p\xe5 den aktuella commit-ID:n f\xf6r ditt Git-arkiv. Denna information kan vara anv\xe4ndbar f\xf6r fels\xf6kning, versionering eller distributions\xe4ndam\xe5l. Ett s\xe4tt att uppn\xe5 detta \xe4r genom att uppdatera `package.json`-filen med den aktuella commit-ID:n under byggprocessen. Denna artikel kommer att guida dig genom stegen f\xf6r att f\xe5 den aktuella commit-ID:n fr\xe5n Git och uppdatera den i `package.json`-filen med hj\xe4lp av Node.js.\\n\\n```bash\\n\\"predev\\": \\"node ./node_modules/json/lib/json.js -I -f package.json -e \\\\\\\\\\\\\\"this.commit=\'$(git rev-parse --short HEAD)\'\\\\\\\\\\\\\\"\\",\\n"},{"lang":"sv","group":"blog","slug":"blog/migrate-a-github-lfs-git-large-file-storage-repository-to-aws-codecommit","frontmatter":{"title":"Migrera ett GitHub LFS (Git Large File Storage) arkiv till AWS CodeCommit","date":"2022-02-09T09:36:57.481Z","draft":false,"author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["Mjukvaruutveckling"]},"content":"\\nJag migrerade nyligen ett av mina GitHub-repositorier, som anv\xe4nder Git Large File Storage (LFS), till AWS CodeCommit. Jag t\xe4nkte dela med mig av processen ifall du vill g\xf6ra n\xe5got liknande. H\xe4r \xe4r en steg-f\xf6r-steg-guide baserad p\xe5 min erfarenhet.\\n\\n## F\xf6ruts\xe4ttningar\\n\\nInnan vi b\xf6rjar, se till att du har f\xf6ljande verktyg installerade:\\n\\n- Git\\n- Git LFS\\n- AWS CLI\\n\\n## Steg-f\xf6r-steg-guide\\n\\n### 1. Klona Repositoriet\\n\\nF\xf6rst, klona ditt GitHub-repository med `--mirror`-alternativet. Detta skapar en bar klon av repositoryt, inklusive alla grenar och taggar.\\n\\n```zsh\\ngit clone --mirror https://github.com/tanshuai/designs.git designs\\n```\\n\\n### 2. Verifiera LFS-filer\\n\\nN\xe4sta steg \xe4r att lista alla filer som hanteras av Git LFS f\xf6r att s\xe4kerst\xe4lla att allt \xe4r p\xe5 plats.\\n\\n```zsh\\ngit lfs ls-files\\n```\\n\\nDu b\xf6r se n\xe5got liknande detta:\\n\\n```\\ncadfa0bc9e * Brochure-Trifold-Draft.ai\\naf9b8b8a1c * Brochure-Trifold-English.ai\\n27bb5f4e61 * Brochure-Trifold.ai\\n```\\n\\n### 3. Migrera LFS-filer\\n\\nNu, exportera LFS-filerna. Detta steg s\xe4kerst\xe4ller att de \xe4r en del av ditt repositories historia.\\n\\n```zsh\\ngit lfs migrate export --include=\\"*.ai\\" --everything\\n```\\n\\nDu kommer att se n\xe5gra progressmeddelanden som dessa:\\n\\n```\\nmigrate: Sorting commits: ..., done.\\nmigrate: Rewriting commits: 100% (20/20), done.\\nmaster    98a3c48d85... -> 82f8873b41...\\nmigrate: Updating refs: ..., done.\\nmigrate: checkout: ..., done.\\nprune: 3 local object(s), 0 retained, done.\\ncadfa0bc9e... (133 MB)\\n27bb5f4e61... (131 MB)\\naf9b8b8a1c... (130 MB), done.\\nprune: Deleting objects: 100% (3/3), done.\\n```\\n\\n### 4. Rensa LFS\\n\\nTa bort Git LFS-sp\xe5rningsinformationen och avinstallera Git LFS.\\n\\n```zsh\\ngit lfs ls-files\\ngit rm .gitattributes -f\\ngit lfs uninstall\\n```\\n\\n### 5. Skicka till AWS CodeCommit\\n\\nSlutligen, skicka ditt repository till AWS CodeCommit.\\n\\n```zsh\\ngit push https://git-codecommit.us-east-2.amazonaws.com/v1/repos/designs --all\\n```\\n\\nDet var allt! Genom att f\xf6lja dessa steg migrerade jag framg\xe5ngsrikt mitt GitHub LFS-repository till AWS CodeCommit. De stora filerna och repositoryhistoriken bevarades perfekt.\\n\\n## Avslutning\\n\\nAtt migrera ett GitHub-repository som anv\xe4nder Git LFS till AWS CodeCommit \xe4r ganska enkelt om du f\xf6ljer r\xe4tt steg. Om du har n\xe5gra fr\xe5gor eller st\xf6ter p\xe5 problem, \xe4r [AWS CodeCommit-dokumentationen](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) och [Git LFS-dokumentationen](https://git-lfs.github.com/) bra resurser.\\n\\nJag hoppas du finner denna guide hj\xe4lpsam. Lycka till med kodningen!\\n"},{"lang":"sv","group":"blog","slug":"blog/reset-restore-all-subdirectories-of-git","frontmatter":{"title":"\xc5terst\xe4ll alla underkataloger i Git","date":"2021-09-22T08:33:49.201Z","draft":false,"author":"Tan Shuai","tags":["Git","Versionskontroll"],"categories":["Mjukvaruutveckling"]},"content":"\\nAtt hantera ett Git-f\xf6rr\xe5d effektivt kr\xe4ver ofta att underkataloger \xe5terst\xe4lls eller \xe5terst\xe4lls f\xf6r att uppr\xe4tth\xe5lla en ren och funktionell kodbas. Denna guide ger en kortfattad, steg-f\xf6r-steg-metod f\xf6r att \xe5terst\xe4lla eller \xe5terst\xe4lla alla underkataloger i ett Git-f\xf6rr\xe5d.\\n\\n## \xc5terst\xe4llning av underkataloger\\n\\nF\xf6ljande Git-kommando tar bort alla osp\xe5rade filer och kataloger fr\xe5n f\xf6rr\xe5det. Detta \xe4r anv\xe4ndbart f\xf6r att rensa on\xf6diga filer innan du utf\xf6r en \xe5terst\xe4llning eller \xe5terst\xe4llning.\\n\\n```bash\\ngit clean -xfdf -- .\\n```\\n\\n### Kommandobeskrivning:\\n\\n- `-x`: Ta bort alla osp\xe5rade filer, inklusive de som ignoreras av `.gitignore`.\\n- `-f`: Tvinga borttagning av filer.\\n- `-d`: Ta bort osp\xe5rade kataloger.\\n- `-- .`: Applicera kommandot p\xe5 den aktuella katalogen och alla underkataloger.\\n\\n## \xc5terst\xe4llning av underkataloger\\n\\nF\xf6r att \xe5terst\xe4lla alla filer i f\xf6rr\xe5det till deras senast committade tillst\xe5nd, anv\xe4nd f\xf6ljande kommando:\\n\\n```bash\\ngit checkout {HEAD OR BRANCH} -- .\\n```\\n\\n### Kommandobeskrivning:\\n\\n- `{HEAD OR BRANCH}`: Ers\xe4tt med `HEAD` f\xf6r att \xe5terst\xe4lla till den senaste commit eller ange ett branchnamn f\xf6r att \xe5terst\xe4lla till en specifik branch.\\n- `-- .`: Applicera kommandot p\xe5 den aktuella katalogen och alla underkataloger.\\n\\nGenom att anv\xe4nda dessa kommandon kan du s\xe4kerst\xe4lla att ditt f\xf6rr\xe5d \xe4r fritt fr\xe5n o\xf6nskade filer och att alla filer \xe5terst\xe4lls till sina committade tillst\xe5nd. Denna process hj\xe4lper till att uppr\xe4tth\xe5lla en ren och organiserad kodbas, vilket underl\xe4ttar enklare samarbete och utveckling.\\n\\nK\xe4nn dig fri att anpassa denna guide efter dina specifika behov och preferenser. F\xf6r mer avancerade Git-operationer, h\xe4nvisa till [officiell Git-dokumentation](https://git-scm.com/doc).\\n"},{"lang":"sv","group":"blog","slug":"blog/ultra-low-cost-ddr3-ddr4-lpddr3-lpddr4-memory-test-system","frontmatter":{"title":"Ultra l\xe5gkostnad DDR3, DDR4, LP-DDR3 & LP-DDR4 minnestestningssystem","description":"Uppt\xe4ck ett ultra l\xe5gkostnad minnestestningssystem f\xf6r DDR3, DDR4, LP-DDR3 och LP-DDR4 teknologier. Prissatt runt $200,000 USD, erbjuder det h\xf6g-hastighetstestning, m\xe5ngsidighet, avancerade funktioner och l\xe5g str\xf6mf\xf6rbrukning. Perfekt f\xf6r f\xf6retag som s\xf6ker kostnadseffektiva och p\xe5litliga minnestestningsl\xf6sningar.","date":"2024-06-01T00:00:00.000Z","categories":["Halvledare"],"author":"Tan Shuai","tags":["DDR3","DDR4","LP-DDR3","LP-DDR4","Minnestestningssystem"],"draft":false},"content":"\\nOm du \xe4r som jag, alltid p\xe5 jakt efter kostnadseffektiva l\xf6sningar utan att kompromissa med kvaliteten, kommer du att \xe4lska det jag har att dela med dig idag. I v\xe5r snabbr\xf6rliga teknologiv\xe4rld \xe4r det avg\xf6rande att s\xe4kerst\xe4lla att v\xe5ra enheters minne \xe4r i toppskick. H\xf6gklassiga alternativ som T5503/T5503HS2 \xe4r fantastiska, men de har en saftig prislapp. Tack och lov har Zeeis klivit fram med ett ultrabilligt minnestestsystem som inte kompromissar med prestandan.\\n\\n## Varf\xf6r detta \xe4r viktigt\\n\\nN\xe4r jag f\xf6rst h\xf6rde talas om Zeeis minnestestsystem blev jag nyfiken. Detta system \xe4r designat f\xf6r att hantera DDR3, DDR4, LP-DDR3 och LP-DDR4 minnesteknologier. Oavsett om du arbetar med \xe4ldre system eller den senaste tekniken, har detta system allt du beh\xf6ver.\\n\\n### H\xf6g hastighetstestning\\n\\nEn av de mest framst\xe5ende egenskaperna \xe4r dess f\xf6rm\xe5ga att st\xf6dja data\xf6verf\xf6ringshastigheter mellan 800 och 3200 MT/s f\xf6r b\xe5de DDR3 och DDR4. Det kan utv\xe4rdera minnesmoduler vid klockfrekvenser upp till 1600 MHz. Det betyder grundlig och p\xe5litlig testning, som s\xe4kerst\xe4ller att dina enheter presterar p\xe5 topp.\\n\\n### M\xe5ngsidighet\\n\\nSystemets m\xe5ngsidighet \xe4r en riktig spelv\xe4xlare. Det st\xf6djer flera minnesstandarder, vilket g\xf6r det l\xe4mpligt f\xf6r en m\xe4ngd olika till\xe4mpningar - fr\xe5n konsumentelektronik till h\xf6gpresterande datorer. Dessutom \xe4r det framtidss\xe4kert. N\xe4r nya minnesteknologier dyker upp kan systemet enkelt uppgraderas f\xf6r att st\xf6dja dem.\\n\\n### Kostnadseffektivitet\\n\\nNu, l\xe5t oss prata om priset. Med ett pris p\xe5 runt 200 000 USD erbjuder detta system en utm\xe4rkt avkastning p\xe5 investeringen. Det \xe4r tillr\xe4ckligt prisv\xe4rt f\xf6r sm\xe5 till medelstora f\xf6retag, vilket s\xe4kerst\xe4ller toppklassiga testm\xf6jligheter utan att spr\xe4cka budgeten.\\n\\n### Avancerade funktioner\\n\\nSystemet levereras med avancerade testalgoritmer, inklusive en integrerad algoritmisk m\xf6nstergenerator (ALPG). Detta s\xe4kerst\xe4ller noggrann och p\xe5litlig minnesutv\xe4rdering, s\xe5 att varje modul uppfyller strikta prestandakrav.\\n\\n### L\xe5g str\xf6mf\xf6rbrukning\\n\\nVad som ocks\xe5 imponerar \xe4r dess l\xe5ga str\xf6mf\xf6rbrukning. Det f\xf6ljer trenderna som ses i LP-DDR3 och LP-DDR4 minnesteknologier. Genom att arbeta vid l\xe4gre sp\xe4nningar minskar det inte bara energikostnaderna utan minimerar ocks\xe5 v\xe4rmeutvecklingen, vilket g\xf6r det till ett milj\xf6v\xe4nligt val.\\n\\n## Varf\xf6r v\xe4lja Zeeis?\\n\\n### Skalbarhet\\n\\nZeeis system \xe4r designat med skalbarhet i \xe5tanke. N\xe4r nya minnesteknologier dyker upp kan systemet enkelt uppgraderas, vilket s\xe4kerst\xe4ller l\xe5ngsiktig anv\xe4ndbarhet och minskar behovet av frekventa byten.\\n\\n### Support och dokumentation\\n\\nEn annan stor f\xf6rdel \xe4r Zeeis omfattande support och dokumentation. Oavsett om du \xe4r en erfaren professionell eller ny inom minnestestning, s\xe4kerst\xe4ller deras detaljerade guider och responsiva kundservice en smidig upplevelse.\\n\\n### M\xf6t marknadens krav\\n\\nMed den \xf6kande efterfr\xe5gan p\xe5 h\xf6ghastighetsminne i allt fr\xe5n smartphones till datacenter, \xe4r det viktigt att ha en p\xe5litlig och kostnadseffektiv minnestestl\xf6sning. Zeeis system uppfyller dessa krav, vilket s\xe4kerst\xe4ller att dina produkter \xe4r marknadsklara och presterar felfritt i verkliga till\xe4mpningar.\\n\\n## Slutsats\\n\\nSammanfattningsvis \xe4r Zeeis Ultra Low Cost DDR3, DDR4, LP-DDR3 & LP-DDR4 Memory Test System ett fantastiskt alternativ f\xf6r oss som beh\xf6ver p\xe5litliga, m\xe5ngsidiga och prisv\xe4rda minnestestl\xf6sningar. Det erbjuder h\xf6g prestanda till en br\xe5kdel av kostnaden f\xf6r andra h\xf6gklassiga system, vilket g\xf6r det m\xf6jligt f\xf6r f\xf6retag att uppr\xe4tth\xe5lla h\xf6ga standarder utan att spr\xe4cka budgeten.\\n\\nOm du \xe4r intresserad av att f\xf6rb\xe4ttra dina testm\xf6jligheter med ett system utformat f\xf6r framtidens minnesteknologi, tveka inte att kontakta mig f\xf6r mer information p\xe5 [i@tanshuai.com](mailto:i@tanshuai.com).\\n\\nLycka till med testandet!\\n"},{"lang":"sv","group":"blog","slug":"blog/usr-bin-sudo-must-be-owned-by-uid-0-and-have-the-setuid-bit-set-on-ubuntu-20-04","frontmatter":{"title":"/usr/bin/sudo m\xe5ste \xe4gas av uid 0 och ha setuid-bit satt p\xe5 Ubuntu 20.04","date":"2021-10-08T13:07:25.406Z","draft":false,"author":"Tan Shuai","tags":["Ubuntu","Linux","Sudo"],"categories":["Linux"]},"content":"\\nOm du st\xf6ter p\xe5 felmeddelandet \\"/usr/bin/sudo m\xe5ste \xe4gas av uid 0 och ha setuid-bit satt\\" p\xe5 Ubuntu 20.04, f\xf6lj dessa steg f\xf6r att l\xf6sa problemet.\\n\\n1. Under uppstartsprocessen, tryck p\xe5 ‘ESC’ f\xf6r att komma \xe5t GRUB-menyn.\\n\\n![GRUB-sk\xe4rmen](/images/content/wx20211008-210752.png \\"GRUB-sk\xe4rmen\\")\\n\\n2. V\xe4lj det f\xf6rsta alternativet, “Ubuntu”, och tryck p\xe5 ‘e’ f\xf6r att redigera uppstartsparametrarna.\\n\\n![Redigera uppstartsparametrar](/images/content/wx20211008-210841.png \\"Redigera uppstartsparametrar\\")\\n\\n3. L\xe4gg till f\xf6ljande str\xe4ng till raden som b\xf6rjar med ‘linux’ f\xf6r att starta i r\xe4ddningsl\xe4ge:\\n\\n```bash\\nsystemd.unit=rescue.target\\n```\\n\\n4. N\xe4r du \xe4r i r\xe4ddningsl\xe4ge, k\xf6r f\xf6ljande kommando f\xf6r att \xe5terst\xe4lla r\xe4tt beh\xf6righeter och \xe4gandeskap f\xf6r `/usr/bin/sudo`:\\n\\n```bash\\npkexec chmod a=rx,u+ws /usr/bin/sudo\\n```\\n\\nDetta kommando st\xe4ller in de n\xf6dv\xe4ndiga beh\xf6righeterna och s\xe4kerst\xe4ller att `sudo` \xe4gs av root-anv\xe4ndaren med setuid-bit satt.\\n\\nGenom att f\xf6lja dessa steg b\xf6r du kunna l\xf6sa problemet och \xe5terst\xe4lla korrekt funktion f\xf6r `sudo`-kommandot p\xe5 ditt Ubuntu-system.\\n\\n---\\n"},{"lang":"no","group":"blog","slug":"blog/aws-codecommit-the-githubs-large-file-storage-git-lfs-free-alternative","frontmatter":{"title":"AWS CodeCommit： Det gratis alternativet til GitHub Large File Storage (Git LFS)","description":"Oppdag hvordan AWS CodeCommit fungerer som et kostnadseffektivt og effektivt alternativ til GitHubs Large File Storage (Git LFS). Denne artikkelen dekker begrensningene ved Git LFS, fordelene ved \xe5 bruke AWS CodeCommit for lagring av store filer, og gir en trinnvis veiledning for migrering fra Git LFS til CodeCommit. Forbedre din utviklingsarbeidsflyt med AWSs skalerbare og sikre infrastruktur.","date":"2022-02-09T00:00:00.000Z","author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["Programvareutvikling"],"draft":false},"content":"\\nAWS CodeCommit tilbyr et robust alternativ til GitHubs Large File Storage (Git LFS)-tjeneste, og gir en effektiv l\xf8sning for \xe5 administrere store filer i Git-repositorier.\\n\\n## Hvorfor Du B\xf8r Vurdere \xc5 Bruke Git LFS P\xe5 Nytt\\n\\nSelv om Git LFS er et popul\xe6rt valg for h\xe5ndtering av store filer i Git-repositorier, har det sine begrensninger og utfordringer. Git LFS krever ekstra oppsett og administrasjon, noe som kan komplisere utviklingsarbeidsflyten. I tillegg kan lagrings- og b\xe5ndbreddekostnadene knyttet til Git LFS \xf8ke raskt, spesielt for prosjekter med mange store filer eller omfattende samarbeid.\\n\\n## Hvorfor GitHubs Large File Storage-tjeneste Ikke Er Perfekt\\n\\nGitHubs Large File Storage-tjeneste, selv om den er nyttig, har iboende ulemper. Den prim\xe6re bekymringen er kostnadene knyttet til lagring og b\xe5ndbredde, som kan bli forbudende for st\xf8rre prosjekter. Videre kan administrering av Git LFS v\xe6re tungvint, kreve at utviklere installerer og konfigurerer LFS-klienten, sporer spesifikke filer, og h\xe5ndterer potensielle sammensl\xe5ingskonflikter som oppst\xe5r p\xe5 grunn av h\xe5ndteringen av store filer separat fra resten av repositoriet.\\n\\n## Hvorfor Bruke AWS CodeCommit til \xc5 Lagre Store Filer i Git\\n\\nAWS CodeCommit gir et overbevisende alternativ for \xe5 lagre store filer i Git-repositorier uten behov for Git LFS. CodeCommit er en fullstendig administrert kildekontrolltjeneste som s\xf8ml\xf8st integreres med andre AWS-tjenester, og tilbyr robust skalerbarhet, sikkerhet og kostnadseffektivitet. Ved \xe5 utnytte CodeCommit kan utviklere unng\xe5 ekstra administrasjonskostnader for Git LFS samtidig som de drar nytte av AWS\' robuste infrastruktur og betalingsmodell basert p\xe5 forbruk.\\n\\n## Hva Er Begrensningene til AWS CodeCommit Sammenlignet med GitHub\\n\\nTil tross for sine fordeler, har AWS CodeCommit noen begrensninger sammenlignet med GitHub. GitHubs omfattende fellesskapsst\xf8tte, rike \xf8kosystem av integrasjoner, og avanserte funksjoner som GitHub Actions og GitHub Pages kan ikke v\xe6re fullt ut replikert i CodeCommit. I tillegg kan utviklere som er vant til GitHubs brukergrensesnitt og samarbeidverkt\xf8y finne at overgangen til CodeCommit krever noe tilpasning.\\n\\n## Hvordan Migrere Et Git LFS Repositorium til CodeCommit\\n\\nMigrering av et Git LFS-repositorium til CodeCommit involverer flere trinn. F\xf8rst m\xe5 du sikre at alle store filer er sporet riktig i Git LFS-repositoriet ditt. Deretter kloner du repositoriet og fjerner Git LFS-sporingskonfigurasjonen. Etter det oppretter du et nytt repositorium i AWS CodeCommit og skyver ditt lokale repositorium til det. Detaljert dokumentasjon og skript er tilgjengelig for \xe5 forenkle denne prosessen, og sikre en jevn overgang uten datatap eller avbrudd.\\n\\n## En Bedre L\xf8sning\\n\\nFor team og prosjekter som er sterkt avhengige av Git LFS, kan utforskning av AWS CodeCommit som et alternativ tilby betydelige fordeler. CodeCommits s\xf8ml\xf8se integrasjon med AWS-\xf8kosystemet, kombinert med dets kostnadseffektive og skalerbare natur, gj\xf8r det til et attraktivt alternativ for \xe5 administrere store filer i Git-repositorier. Ved \xe5 dempe utfordringene knyttet til Git LFS, gir CodeCommit utviklingsteam muligheten til \xe5 fokusere p\xe5 koding og samarbeid, og \xf8ke produktiviteten og innovasjonen.\\n\\nTil slutt gir AWS CodeCommit et levedyktig, kostnadseffektivt og effektivt alternativ til GitHubs Large File Storage-tjeneste. Ved \xe5 utnytte AWS\'s robuste infrastruktur, kan utviklere enkelt h\xe5ndtere store filer i Git-repositorier, optimalisere arbeidsflytene sine og redusere kostnadene.\\n"},{"lang":"no","group":"blog","slug":"blog/check-voltage-current-on-macos-for-power-adapter","frontmatter":{"title":"Sjekk Spenning og Str\xf8m p\xe5 MacOS for Str\xf8madapter","meta_title":"Sjekk Spenning og Str\xf8m p\xe5 MacOS for Str\xf8madapter","date":"2022-02-14T00:00:00.000Z","author":"Tan Shuai","tags":["MacOS","Str\xf8madapter","Spenning","Str\xf8m"],"categories":["MacOS"],"draft":false},"content":"\\nN\xe5r du bruker en MacBook, kan det v\xe6re du vil sjekke spenningen og str\xf8mmen til str\xf8madapteren. Her er en enkel m\xe5te \xe5 sjekke spenningen og str\xf8mmen til str\xf8madapteren p\xe5 MacOS.\\n\\n\xc5pne Terminal.app og skriv kommandoen:\\n\\n`ioreg -l -n AppleSmartBattery -r |grep AppleRawAdapterDetails`\\n\\nDu vil f\xe5 f\xf8lgende informasjon inkludert str\xf8m og spenning:\\n\\n```json\\n\\"AppleRawAdapterDetails\\" = ({\\"IsWireless\\"=No,\\"AdapterID\\"=0,\\"FamilyCode\\"=18446744073172697098,\\"Watts\\"=89,**\\"Current\\"=4450**,\\"PMUConfiguration\\"=4448,**\\"Voltage\\"=20000**})\\n"},{"lang":"no","group":"blog","slug":"blog/convert-markdown-academic-paper-pdf-macos","frontmatter":{"title":"Raskt konvertere Markdown til PDF i akademisk stil p\xe5 macOS","meta_title":"Konverter Markdown til PDF i akademisk stil p\xe5 macOS med Pandoc","description":"L\xe6r hvordan du konverterer Markdown-dokumenter til PDF-filer i akademisk stil p\xe5 macOS ved hjelp av Pandoc og BasicTeX. Denne raske og enkle metoden er perfekt for \xe5 lage profesjonelle PDF-filer for akademiske papirer.","date":"2022-03-03T00:00:00.000Z","categories":["Programvareutvikling"],"author":"Tan Shuai","tags":["Pandoc","LaTeX","PDF","Papir","Markdown","macOS"],"draft":false},"content":"\\nI denne veiledningen vil jeg vise deg hvordan jeg konverterer Markdown-dokumenter til akademiske stil-PDF-er p\xe5 macOS ved hjelp av Pandoc og BasicTeX. Denne metoden er rask og enkel, perfekt n\xe5r du trenger \xe5 lage profesjonelle PDF-filer for akademiske artikler.\\n\\n### Steg 1: Installer Pandoc og BasicTeX\\n\\nF\xf8rst m\xe5 du installere Pandoc og BasicTeX p\xe5 macOS-systemet ditt. Slik gjorde jeg det:\\n\\n1. **Installer Pandoc**: \xc5pne Terminal og skriv inn f\xf8lgende kommando for \xe5 installere Pandoc:\\n\\n   ```bash\\n   brew install pandoc\\n   ```\\n\\n2. **Installer BasicTeX**: Siden MacTeX er ganske stor, valgte jeg den mindre BasicTeX-pakken for \xe5 spare plass. Kj\xf8r denne kommandoen:\\n\\n   ```bash\\n   brew install --cask basictex\\n   ```\\n\\n3. **Installer vanlige LaTeX-pakker**: For \xe5 sikre at du har de n\xf8dvendige pakkene for \xe5 generere PDF-er, kj\xf8r disse kommandoene:\\n   ```bash\\n   sudo tlmgr update --self\\n   sudo tlmgr install collection-basic collection-latex collection-latexrecommended collection-fontsrecommended\\n   ```\\n\\n### Steg 2: Forbered Markdown-filen din\\n\\nNeste steg er \xe5 lage Markdown-filen din (f.eks. `paper.md`). Slik satte jeg opp min fil, inkludert tittel, forfatter, dato og kontaktinformasjon:\\n\\n```markdown\\n---\\ntitle: \\"Your Paper Title\\"\\nsubtitle: \\"Optional Subtitle\\"\\ndate: \\\\today\\n\\nauthor: |\\n  | Your Name\\n  | your-email@tanshuai.com\\n  | www.tanshuai.com\\n---\\n\\n# Abstract\\n\\nYour abstract here.\\n\\n# Introduction\\n\\nYour introduction here.\\n\\n# Methodology\\n\\nYour methodology here.\\n\\n# Results\\n\\nYour results here.\\n\\n# Conclusion\\n\\nYour conclusion here.\\n```\\n\\n### Steg 3: Konverter Markdown til PDF med Pandoc\\n\\nN\xe5 kan du konvertere Markdown-filen din til en PDF. Jeg brukte f\xf8lgende kommando i Terminal:\\n\\n```bash\\npandoc paper.md -o paper.pdf --pdf-engine=xelatex\\n```\\n\\nDenne kommandoen bruker Pandocs standard LaTeX-mal for \xe5 konvertere Markdown-filen til en akademisk stil-PDF, inkludert forfatterens kontaktinformasjon under navnet deres.\\n\\n### Ekstra Tips\\n\\n- **Egendefinert LaTeX-mal**: Hvis du trenger mer avansert formatering eller spesifikke stiler, kan du lage eller laste ned en egendefinert LaTeX-mal og bruke den med Pandoc:\\n\\n  ```bash\\n  pandoc paper.md -o paper.pdf --pdf-engine=xelatex --template=your-template.tex\\n  ```\\n\\n- **Mer Metadata**: Du kan legge til ekstra informasjon i YAML-metadataoverskriften, som et abstrakt eller n\xf8kkelord, og bruke disse i egendefinerte maler.\\n\\n### Konklusjon\\n\\nVed \xe5 f\xf8lge disse stegene kan du enkelt konvertere Markdown-dokumenter til akademiske stil-PDF-er p\xe5 macOS. Bruk av Pandoc og BasicTeX gj\xf8r denne prosessen rask og effektiv, perfekt n\xe5r du trenger \xe5 generere profesjonelle PDF-dokumenter. Enten du forbereder akademiske artikler, tekniske rapporter eller andre formelle dokumenter, fungerer denne metoden utmerket. \xc5 inkludere kontaktinformasjon i metadataoverskriften gir dokumentene dine et profesjonelt preg.\\n\\nJeg h\xe5per du finner denne veiledningen nyttig! Hvis du har sp\xf8rsm\xe5l eller st\xf8ter p\xe5 problemer, ikke n\xf8l med \xe5 ta kontakt. Lykke til med skrivingen!\\n"},{"lang":"no","group":"blog","slug":"blog/electron-build-tools-error-error-failed-to-run-choco-install-pywin32-yes","frontmatter":{"title":"Electron Build Tools `ERROR Error： Failed to run \\"choco install pywin32\\n  --yes\\"`","date":"2021-09-08T00:00:00.000Z","draft":false,"author":"Tan Shuai","tags":["Electron","Buildverkt\xf8y","PyWin32","Chocolatey","Win32"],"categories":["Programvareutvikling"]},"content":"\\nN\xe5r du arbeider med Electron Build Tools, kan det oppst\xe5 en feil knyttet til installasjonen av pywin32 via Chocolatey. Dette kan v\xe6re frustrerende, spesielt n\xe5r det er en n\xf8dvendig avhengighet for prosjektet ditt. Nedenfor er en detaljert forklaring av problemet og potensielle trinn for \xe5 l\xf8se det.\\n\\n### Feilen\\n\\nN\xe5r du initialiserer et Electron-prosjekt ved hjelp av Electron Build Tools, kan du se f\xf8lgende feilmelding:\\n\\n```bash\\nE:\\\\\\\\>e init main-testing -i testing --root=e:/src/electron\\nWARN A fixable error has occurred\\n--> A required dependency \\"pywin32\\" could not be located, it probably has to be installed.\\nDo you want build-tools to try fix this for you? [y/n]: y\\n\\nRunning \\"choco install pywin32 --yes\\"\\nERROR Error: Failed to run \\"choco install pywin32 --yes\\"\\n    at spawnSyncWithLog (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:11:11)\\n    at fix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:39:9)\\n    at maybeAutoFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\maybe-auto-fix.js:13:3)\\n    at whichAndFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\which.js:10:5)\\n    at checkPlatformDependencies (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:61:7)\\n    at Object.<anonymous> (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\e-init.js:165:3)\\n    at Module._compile (internal/modules/cjs/loader.js:1072:14)\\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1101:10)\\n    at Module.load (internal/modules/cjs/loader.js:937:32)\\n    at Function.Module._load (internal/modules/cjs/loader.js:778:12)\\n```\\n\\nDenne feilen oppst\xe5r vanligvis fordi installasjonsskriptet for pywin32-pakken ikke kan finne de n\xf8dvendige filene p\xe5 den eksterne serveren. Dette resulterer i en 404-feil som indikerer at filen ikke er tilgjengelig p\xe5 den angitte URL-en.\\n\\n### Forst\xe5 feilen\\n\\nDen viktigste delen av feilmeldingen er:\\n\\n```bash\\nERROR: The remote file either doesn\'t exist, is unauthorized, or is forbidden for url \'http://sourceforge.net/projects/pywin32/files/pywin32/Build%20219/pywin32-219.win-amd64-py3.9.exe/download\'. Exception calling \\"GetResponse\\" with \\"0\\" argument(s): \\"The remote server returned an error: (404) Not Found.\\"\\n```\\n\\nDette indikerer at nedlastings-URL-en for pywin32 ikke lenger er gyldig, noe som betyr at Chocolatey ikke kan hente de n\xf8dvendige installasjonsfilene.\\n\\n### Feils\xf8kingstrinn\\n\\nHer er noen trinn du kan ta for \xe5 l\xf8se dette problemet:\\n\\n#### 1. Verifiser Chocolatey-installasjonen\\n\\nS\xf8rg for at Chocolatey er installert riktig og oppdatert til den nyeste versjonen. Du kan sjekke Chocolatey-versjonen din med:\\n\\n```bash\\nchoco --version\\n```\\n\\nFor \xe5 oppdatere Chocolatey, bruk:\\n\\n```bash\\nchoco upgrade chocolatey\\n```\\n\\n#### 2. Installer pywin32 manuelt\\n\\nSiden den automatiserte installasjonen mislykkes, kan du pr\xf8ve \xe5 installere pywin32 manuelt. Du kan laste ned riktig versjon fra den offisielle [pywin32 GitHub-utgivelsessiden](https://github.com/mhammond/pywin32/releases) og installere den manuelt.\\n\\n#### 3. Endre installasjonsskriptet\\n\\nHvis du har kontroll over Electron Build Tools-skriptet, kan du endre det til \xe5 peke til en gyldig URL for pywin32 eller h\xe5ndtere den manuelle installasjonsprosessen.\\n\\n#### 4. Bruk en alternativ pakkebehandler\\n\\nHvis Chocolatey fortsatt feiler, vurder \xe5 bruke en alternativ pakkebehandler som pip for Python-pakker:\\n\\n```bash\\npip install pywin32\\n```\\n\\n### Eksempel p\xe5 manuell installasjon av pywin32\\n\\n1. Last ned riktig pywin32-installer fra [offisielle GitHub-utgivelser](https://github.com/mhammond/pywin32/releases).\\n2. Kj\xf8r installasjonsprogrammet og f\xf8lg installasjonsinstruksjonene.\\n3. Verifiser installasjonen ved \xe5 kj\xf8re et enkelt Python-skript som importerer pywin32:\\n\\n```python\\nimport win32api\\nprint(win32api.GetVersionEx())\\n```\\n\\n\xc5 m\xf8te feilen \\"Failed to run `choco install pywin32 --yes`\\" kan v\xe6re en hindring i utviklingsprosessen. Men ved \xe5 forst\xe5 \xe5rsaken og f\xf8lge trinnene beskrevet ovenfor, kan du overvinne dette problemet og fortsette med oppsettet av Electron-prosjektet ditt.\\n"},{"lang":"no","group":"blog","slug":"blog/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining","frontmatter":{"title":"Hemmeligheter for Full Custom ASIC Design for Bitcoin- og Kryptovalutautvinning","date":"2022-05-30T00:00:00.000Z","update":"2024-08-02T00:00:00.000Z","categories":["Halvledere","Bitcoin","Kryptovaluta","Blockchain"],"author":"Tan Shuai","tags":["ASIC","Bitcoin","Gruvedrift","BTC"],"draft":false,"contact":"Tan Shuai | tanshuai@btc.com | tanshuai.com"},"content":"\\nTan Shuai  \\n[tanshuai@btc.com](mailto:tanshuai@btc.com)  \\n[tanshuai.com](https://tanshuai.com)\\n\\n---\\n\\n## Sammendrag\\n\\nI den konkurransepregede verdenen av kryptovalutagruvedrift er energieffektivitet, hashrate-ytelse og p\xe5litelighet avgj\xf8rende. Dette papiret utforsker f\xf8rsteklasses full custom ASIC (Application-Specific Integrated Circuit) design, og avsl\xf8rer bransjehemmeligheter og ekspertmetodologier som driver h\xf8yytelses Bitcoin- og kryptovalutagruvedrift. Skrevet av en teknologiekspert fra et av de ledende ASIC-gruveselskapene, benytter dette papiret avanserte designteknikker, n\xf8ye fysisk layout og omfattende verifikasjonsprosesser for \xe5 vise frem de eksepsjonelle evnene til full custom ASICs i \xe5 maksimere gruvedriftseffektivitet og l\xf8nnsomhet.\\n\\n## Innledning\\n\\nEvolusjonen av kryptovalutagruvedrift, spesielt Bitcoin-gruvedrift, har sett en overgang fra bruk av generelle CPUer, FPGAer og GPUer til spesialiserte ASICer. Disse ASICene tilbyr enest\xe5ende ytelse og energieffektivitet. Full custom ASIC-design representerer toppen av denne utviklingen, og muliggj\xf8r skreddersydde l\xf8sninger som oppfyller de spesifikke kravene til gruvedriftoperasjoner.\\n\\nMye av den eksisterende litteraturen om ASIC-design for kryptovalutagruvedrift kommer fra akademia eller ikke-gruvedriftbedrifter, som ofte mangler praktisk anvendbarhet. Til dags dato har kun et f\xe5tall selskaper, hovedsakelig kinesiske (f.eks. MicroBT, Bitmain), lykkes med \xe5 utvikle markedsf\xf8rbare Bitcoin-gruvedrift-ASICer. Dette papiret s\xf8ker \xe5 fylle dette gapet ved \xe5 gi innsikt hentet fra faktisk bransjepraksis, og tilby et perspektiv forankret i virkeligheten i gruvedriftssektoren.\\n\\nSom en profesjonell med over ti \xe5rs erfaring i teknologibransjen, har forfatteren av dette papiret utviklet verdens beste Bitcoin ASIC Miner (WhatsMiner), LTC/DOGE og ETH Miners, og spilt en n\xf8kkelrolle i selskaper som MicroBT, BTC.COM og andre offentlige fablesses. Han har hatt n\xf8kkelposisjoner i selskaper notert p\xe5 NASDAQ, HKSE og NYSE. Med omfattende erfaring i \xe5 etablere partnerskap med TSMC, Texas Instruments, ARM og Intel, bringer han en mengde kunnskap og praktisk ekspertise til feltet for custom ASIC-design for Bitcoin- og kryptovalutagruvedrift.\\n\\n## Metodikk og Designflyt\\n\\n### Designfilosofi\\n\\nV\xe5r tiln\xe6rming til full custom ASIC-design er drevet av et fokus p\xe5 \xe5 maksimere PPA (Power, Performance, and Area), spesielt under lavspenningsdriftsforhold. Denne seksjonen vil beskrive v\xe5r designfilosofi og metodikk:\\n\\n1. **Pipeline-arkitektur**: Utnytte de iboende fordelene med pipeline-strukturer for gruvedriftalgoritmer, preget av registre og kombinasjonslogiske stadier. Ved \xe5 bruke en pipeline-arkitektur kan vi effektivt h\xe5ndtere h\xf8yfrekvente operasjoner som kreves for kryptovalutagruvedrift.\\n2. **Manuell Netlist og Plassering**: Detaljert skripting for netlist-opprettelse og manuell celleplassering for \xe5 optimalisere kritiske baner. Dette tillater presis kontroll over timing og reduserer parasittiske effekter.\\n3. **Custom Cellebiblioteker**: Utvikling av spesialiserte celler med optimaliserte transistortall og dynamiske str\xf8msparingsfunksjoner. Tilpassede celler er designet for \xe5 operere p\xe5 lavest mulig spenninger, og sikrer minimalt str\xf8mforbruk.\\n\\n### Oppn\xe5 PPA-fordeler\\n\\nDetaljerte strategier for \xe5 oppn\xe5 PPA-fordeler gjennom tilpasset design:\\n\\n1. **Tilpasset registerdesign**: Bruk av multi-bit registre og l\xe5sbaserte design for \xe5 redusere klokkestr\xf8m og forbedre timing. Multi-bit registre minimerer str\xf8mforbruket i klokketreet og reduserer det totale omr\xe5det.\\n2. **Manuell plassering**: Redusering av ledningslengde og balansering av oppsett- og holdetider for \xe5 forbedre total ytelse. Manuell plassering gir bedre kontroll over forsinkelser i forbindelser og krysssnakk, forbedrer signalintegritet og reduserer str\xf8mforbruk.\\n3. **Optimalisert celledesign**: Tilpassede celler er designet for \xe5 operere ved lavere spenninger, minimere dynamisk str\xf8mforbruk og maksimere effektivitet. Ved \xe5 skreddersy celledesignene til de spesifikke behovene til gruvealgoritmene, kan vi oppn\xe5 betydelige forbedringer i ytelse.\\n\\n### P\xe5litelighet ved lav spenning\\n\\nSikring av p\xe5liteligheten til tilpasset timinglogikk ved lave spenninger inneb\xe6rer:\\n\\n1. **N\xf8yaktig simulering**: Kretsniv\xe5simuleringer for \xe5 validere oppf\xf8rselen til tilpassede celler under spesifikke forhold. Verkt\xf8y som SPICE brukes for detaljerte elektriske simuleringer for \xe5 sikre at cellene fungerer korrekt under alle PVT (Prosess, Spenning, Temperatur) hj\xf8rner.\\n2. **Konsistens i plassering**: Manuell plassering for \xe5 sikre ensartethet og redusere variabilitet. Ved \xe5 kontrollere den fysiske layouten, kan vi minimere p\xe5virkningen av prosessvariasjoner og sikre konsistent ytelse.\\n3. **Presis PVT-kalibrering**: Verifikasjon mot prosess-, spenning- og temperaturvariasjoner. Omfattende testing og kalibrering utf\xf8res for \xe5 sikre designets robusthet under forskjellige driftsforhold.\\n\\n## Case-studier og resultater\\n\\nPresentasjon av data fra virkeligheten og case-studier fra full masketape-outs:\\n\\n| Prosjekt | Prosessnode | Spenning/Str\xf8meffektivitet | Algoritme |\\n| -------- | ----------- | -------------------------- | --------- |\\n| SC       | TSMC 28nm    | 0.45V, 257J/T              | Blake2b   |\\n| DCR      | TSMC 28nm    | 0.45V, 150J/T              | Blake256  |\\n| DASH     | TSMC 16nm    | 0.38V, 6.2J/G              | X11       |\\n| BTC      | TSMC 16nm    | 0.38V, 65J/T               | SHA-256d  |\\n| BTC      | TSMC 7nm     | 0.30V, 37J/T               | SHA-256d  |\\n| BTC      | Samsung 8nm  | 0.31V, 45J/T               | SHA-256d  |\\n| BTC      | SMIC N+1     | 0.30V, 35J/T               | SHA-256d  |\\n\\nDisse resultatene viser de betydelige gevinstene i effektivitet og ytelse som kan oppn\xe5s gjennom v\xe5r tilpassede designmetode.\\n\\n## Integrasjon og verifikasjon\\n\\n### Signering av blandede celler\\n\\n- **Integrasjon av tilpassede celler**: Tilpassede celler integreres med standardceller fra TSMC og andre st\xf8perier, noe som sikrer kompatibilitet og ytelse. Tilpassede celler karakteriseres og valideres for \xe5 matche kravene i standardcellebiblioteket, slik at de s\xf8ml\xf8st kan integreres.\\n- **Signeringsstrategier**: Strategier for \xe5 sikre s\xf8ml\xf8s kompatibilitet og ytelse inkluderer detaljerte DRC (Design Rule Check) og LVS (Layout Versus Schematic) sjekker, samt timing- og str\xf8mforbrukanalyse ved hjelp av industristandard EDA (Electronic Design Automation) verkt\xf8y.\\n\\n### Digital og Analog Samdesign\\n\\n- **Teknikker for Integrasjon**: Integrere digitale og analoge komponenter for \xe5 optimalisere den totale ytelsen til brikken. Teknikker som blandet-signal verifikasjon og sam-simulering brukes for \xe5 sikre riktig integrasjon og funksjonalitet.\\n- **Verifikasjonsmetodologier**: Metodologier for \xe5 sikre robusthet under forskjellige driftsforhold inkluderer hj\xf8rneanalyse, Monte Carlo-simuleringer og p\xe5litelighetsverifikasjon for \xe5 adressere aldring og elektromigrasjon.\\n\\n## Konklusjon\\n\\nFulltilpasset ASIC-design tilbyr betydelige fordeler for Bitcoin og kryptovalutamining, med uovertruffen ytelse, energieffektivitet og p\xe5litelighet. Ved \xe5 avdekke hemmelighetene til toppniv\xe5 fulltilpasset ASIC-design, fremhever dette dokumentet metodologiene og innovasjonene som skiller bransjeledere fra andre. Etter hvert som kryptovalutamining fortsetter \xe5 utvikle seg, vil tilpassede ASIC-er spille en avgj\xf8rende rolle i \xe5 drive neste generasjon av h\xf8yeffektiv, h\xf8ytytende gruveutstyr.\\n\\n[PDF-versjon av dokumentet](/docs/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining.pdf)\\n"},{"lang":"no","group":"blog","slug":"blog/get-current-commit-id-of-git-and-update-to-package-json","frontmatter":{"title":"F\xe5 gjeldende commit-id fra Git og oppdater til package.json","date":"2021-08-21T09:19:58.875Z","draft":false,"author":"Tan Shuai","tags":["Git","Package.json","Node.js"],"categories":["Programvareutvikling"]},"content":"\\nN\xe5r du utvikler et Node.js-prosjekt, kan det v\xe6re nyttig \xe5 holde oversikt over den n\xe5v\xe6rende commit-IDen til Git-repositoriet ditt. Denne informasjonen kan v\xe6re nyttig for feils\xf8king, versjonering eller distribusjonsform\xe5l. En m\xe5te \xe5 oppn\xe5 dette p\xe5 er ved \xe5 oppdatere `package.json`-filen med den n\xe5v\xe6rende commit-IDen under byggeprosessen. Denne artikkelen vil veilede deg gjennom trinnene for \xe5 hente den n\xe5v\xe6rende commit-IDen fra Git og oppdatere den i `package.json`-filen ved hjelp av Node.js.\\n\\n```bash\\n\\"predev\\": \\"node ./node_modules/json/lib/json.js -I -f package.json -e \\\\\\\\\\\\\\"this.commit=\'$(git rev-parse --short HEAD)\'\\\\\\\\\\\\\\"\\\\\\",\\n"},{"lang":"no","group":"blog","slug":"blog/migrate-a-github-lfs-git-large-file-storage-repository-to-aws-codecommit","frontmatter":{"title":"Migrer et GitHub LFS (Git Large File Storage) repository til AWS CodeCommit","date":"2022-02-09T09:36:57.481Z","draft":false,"author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["Programvareutvikling"]},"content":"\\nJeg migrerte nylig et av GitHub-repositoriene mine, som bruker Git Large File Storage (LFS), over til AWS CodeCommit. Jeg tenkte jeg skulle dele prosessen med deg i tilfelle du vurderer \xe5 gj\xf8re noe lignende. Her er en trinn-for-trinn guide basert p\xe5 mine erfaringer.\\n\\n## Forutsetninger\\n\\nF\xf8r vi starter, s\xf8rg for at du har disse verkt\xf8yene installert:\\n\\n- Git\\n- Git LFS\\n- AWS CLI\\n\\n## Trinn-for-trinn guide\\n\\n### 1. Klon repositoriet\\n\\nF\xf8rst, klon GitHub-repositoriet ditt ved \xe5 bruke `--mirror`-alternativet. Dette oppretter en bar klon av repositoriet, inkludert alle grener og tagger.\\n\\n```zsh\\ngit clone --mirror https://github.com/tanshuai/designs.git designs\\n```\\n\\n### 2. Verifiser LFS-filer\\n\\nDeretter, list opp alle filer som administreres av Git LFS for \xe5 sikre at alt er p\xe5 plass.\\n\\n```zsh\\ngit lfs ls-files\\n```\\n\\nDu b\xf8r se noe lignende dette:\\n\\n```\\ncadfa0bc9e * Brochure-Trifold-Draft.ai\\naf9b8b8a1c * Brochure-Trifold-English.ai\\n27bb5f4e61 * Brochure-Trifold.ai\\n```\\n\\n### 3. Migrer LFS-filer\\n\\nN\xe5, eksporter LFS-filene. Dette trinnet sikrer at de er en del av repositoriets historie.\\n\\n```zsh\\ngit lfs migrate export --include=\\"*.ai\\" --everything\\n```\\n\\nDu vil se noen fremdriftsmeldinger som disse:\\n\\n```\\nmigrate: Sorting commits: ..., done.\\nmigrate: Rewriting commits: 100% (20/20), done.\\nmaster\\t98a3c48d85... -> 82f8873b41...\\nmigrate: Updating refs: ..., done.\\nmigrate: checkout: ..., done.\\nprune: 3 local object(s), 0 retained, done.\\ncadfa0bc9e... (133 MB)\\n27bb5f4e61... (131 MB)\\naf9b8b8a1c... (130 MB), done.\\nprune: Deleting objects: 100% (3/3), done.\\n```\\n\\n### 4. Rydd opp i LFS\\n\\nFjern Git LFS-sporingsinformasjonen og avinstaller Git LFS.\\n\\n```zsh\\ngit lfs ls-files\\ngit rm .gitattributes -f\\ngit lfs uninstall\\n```\\n\\n### 5. Push til AWS CodeCommit\\n\\nTil slutt, push repositoriet ditt til AWS CodeCommit.\\n\\n```zsh\\ngit push https://git-codecommit.us-east-2.amazonaws.com/v1/repos/designs --all\\n```\\n\\nDet er det! Ved \xe5 f\xf8lge disse trinnene, migrerte jeg GitHub LFS-repositoriet mitt til AWS CodeCommit. De store filene og repositoriets historie ble bevart perfekt.\\n\\n## Oppsummering\\n\\n\xc5 migrere et GitHub-repositorium som bruker Git LFS til AWS CodeCommit er ganske enkelt hvis du f\xf8lger de riktige trinnene. Hvis du har noen sp\xf8rsm\xe5l eller st\xf8ter p\xe5 problemer, er [AWS CodeCommit-dokumentasjonen](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) og [Git LFS-dokumentasjonen](https://git-lfs.github.com/) gode ressurser.\\n\\nJeg h\xe5per du finner denne guiden nyttig. Lykke til med koding!\\n"},{"lang":"no","group":"blog","slug":"blog/reset-restore-all-subdirectories-of-git","frontmatter":{"title":"Tilbakestille/Gjenopprette alle underkataloger i Git","date":"2021-09-22T08:33:49.201Z","draft":false,"author":"Tan Shuai","tags":["Git","Versjonskontroll"],"categories":["Programvareutvikling"]},"content":"\\n\xc5 administrere et Git-repositorium effektivt krever ofte tilbakestilling eller gjenoppretting av underkataloger for \xe5 opprettholde en ren og funksjonell kodebase. Denne veiledningen gir en kortfattet, trinn-for-trinn tiln\xe6rming for \xe5 tilbakestille eller gjenopprette alle underkataloger i et Git-repositorium.\\n\\n## Tilbakestilling av underkataloger\\n\\nF\xf8lgende Git-kommando fjerner alle uregistrerte filer og kataloger fra repositoriet. Dette er nyttig for \xe5 rydde opp i un\xf8dvendige filer f\xf8r du utf\xf8rer en tilbakestilling eller gjenoppretting.\\n\\n```bash\\ngit clean -xfdf -- .\\n```\\n\\n### Kommandooppsummering:\\n\\n- `-x`: Fjern alle uregistrerte filer, inkludert de som ignoreres av `.gitignore`.\\n- `-f`: Tving fjerning av filer.\\n- `-d`: Fjern uregistrerte kataloger.\\n- `-- .`: Bruk kommandoen p\xe5 gjeldende katalog og alle underkataloger.\\n\\n## Gjenoppretting av underkataloger\\n\\nFor \xe5 gjenopprette alle filer i repositoriet til deres siste commit-tilstand, bruk f\xf8lgende kommando:\\n\\n```bash\\ngit checkout {HEAD OR BRANCH} -- .\\n```\\n\\n### Kommandooppsummering:\\n\\n- `{HEAD OR BRANCH}`: Erstatt med `HEAD` for \xe5 tilbakestille til siste commit eller spesifiser et gren-navn for \xe5 tilbakestille til en spesifikk gren.\\n- `-- .`: Bruk kommandoen p\xe5 gjeldende katalog og alle underkataloger.\\n\\nVed \xe5 bruke disse kommandoene kan du sikre at repositoriet ditt er fritt for u\xf8nskede filer, og at alle filer er gjenopprettet til deres commit-tilstand. Denne prosessen hjelper med \xe5 opprettholde en ren og organisert kodebase, som letter samarbeid og utvikling.\\n\\nTilpass gjerne denne veiledningen etter dine spesifikke behov og preferanser. For mer avanserte Git-operasjoner, se den [offisielle Git-dokumentasjonen](https://git-scm.com/doc).\\n"},{"lang":"no","group":"blog","slug":"blog/ultra-low-cost-ddr3-ddr4-lpddr3-lpddr4-memory-test-system","frontmatter":{"title":"Ultra lavkost DDR3, DDR4, LP-DDR3 og LP-DDR4 minnetestsystem","description":"Oppdag et ultra lavkost minnetestsystem for DDR3, DDR4, LP-DDR3 og LP-DDR4 teknologier. Priset til rundt 200 000 USD, tilbyr det h\xf8yhastighetstesting, allsidighet, avanserte funksjoner og lavt str\xf8mforbruk. Perfekt for bedrifter som s\xf8ker kostnadseffektive, p\xe5litelige minnetestel\xf8sninger.","date":"2024-06-01T00:00:00.000Z","categories":["Halvledere"],"author":"Tan Shuai","tags":["DDR3","DDR4","LP-DDR3","LP-DDR4","Minnetestsystem"],"draft":false},"content":"\\nHvis du er som meg, alltid p\xe5 utkikk etter kostnadseffektive l\xf8sninger uten \xe5 g\xe5 p\xe5 kompromiss med kvaliteten, vil du elske det jeg har \xe5 dele i dag. I v\xe5r hektiske teknologiverden er det avgj\xf8rende \xe5 sikre at enhetenes minne er opp til par. H\xf8ykvalitets alternativer som T5503/T5503HS2 er fantastiske, men de har en h\xf8y prislapp. Heldigvis har Zeeis kommet med et ultra lavkost minnetestsystem som ikke ofrer ytelse.\\n\\n## Hvorfor Dette Er Viktig\\n\\nDa jeg f\xf8rst h\xf8rte om Zeeis sitt minnetestsystem, ble jeg nysgjerrig. Dette systemet er designet for \xe5 h\xe5ndtere DDR3, DDR4, LP-DDR3 og LP-DDR4 minneteknologier. Enten du jobber med eldre systemer eller den nyeste teknologien, har dette systemet det du trenger.\\n\\n### H\xf8yhastighetstesting\\n\\nEn av de fremtredende funksjonene er dens evne til \xe5 st\xf8tte dataoverf\xf8ringshastigheter fra 800 til 3200 MT/s for b\xe5de DDR3 og DDR4. Den kan evaluere minnemoduler ved klokkehastigheter opp til 1600 MHz. Det betyr grundig og p\xe5litelig testing, noe som sikrer at enhetene dine yter sitt beste.\\n\\n### Allsidighet\\n\\nAllsidigheten til dette systemet er en game-changer. Det st\xf8tter flere minnestandarder, noe som gj\xf8r det egnet for et bredt spekter av applikasjoner—fra forbrukerelektronikk til h\xf8yytelses databehandling. Dessuten er det fremtidssikret. Etter hvert som nye minneteknologier dukker opp, kan dette systemet enkelt oppgraderes til \xe5 st\xf8tte dem.\\n\\n### Kostnadseffektivitet\\n\\nLa oss n\xe5 snakke om prisen. For rundt $200,000 USD, gir dette systemet en utmerket avkastning p\xe5 investeringen. Det er rimelig nok for sm\xe5 til mellomstore bedrifter, noe som sikrer f\xf8rsteklasses testmuligheter uten \xe5 sprenge budsjettet.\\n\\n### Avanserte Funksjoner\\n\\nSystemet kommer med avanserte testalgoritmer, inkludert en integrert algoritmisk m\xf8nstergenerator (ALPG). Dette sikrer n\xf8yaktig og p\xe5litelig minnevurdering, slik at hver modul m\xf8ter strenge ytelsesstandarder.\\n\\n### Lavt Str\xf8mforbruk\\n\\nDet som ogs\xe5 er imponerende, er det lave str\xf8mforbruket. Det er i tr\xe5d med trendene sett i LP-DDR3 og LP-DDR4 minneteknologier. Ved \xe5 operere ved lavere spenninger reduserer det ikke bare energikostnadene, men ogs\xe5 termisk utslipp, noe som gj\xf8r det til et milj\xf8vennlig valg.\\n\\n## Hvorfor Velge Zeeis?\\n\\n### Skalerbarhet\\n\\nZeeis sitt system er designet med skalerbarhet i tankene. Etter hvert som nye minneteknologier dukker opp, kan systemet enkelt oppgraderes, noe som sikrer langvarig brukbarhet og reduserer behovet for hyppige utskiftninger.\\n\\n### Support og Dokumentasjon\\n\\nEn annen stor fordel er Zeeis sin omfattende support og dokumentasjon. Enten du er en erfaren profesjonell eller ny innen minnetesting, sikrer deres detaljerte veiledninger og responsive kundeservice en jevn opplevelse.\\n\\n### M\xf8te Markedskrav\\n\\nMed den \xf8kende ettersp\xf8rselen etter h\xf8yhastighetsminne i alt fra smarttelefoner til datasentre, er det essensielt \xe5 ha en p\xe5litelig og kostnadseffektiv minnetestl\xf8sning. Zeeis sitt system m\xf8ter disse kravene, og sikrer at produktene dine er klare for markedet og fungerer feilfritt i virkelige applikasjoner.\\n\\n## Konklusjon\\n\\nI korte trekk er Zeeis sitt Ultra Low Cost DDR3, DDR4, LP-DDR3 & LP-DDR4 Memory Test System et fantastisk alternativ for oss som trenger p\xe5litelige, allsidige og rimelige minnetestl\xf8sninger. Det tilbyr h\xf8y ytelse til en br\xf8kdel av prisen p\xe5 andre h\xf8ykvalitetssystemer, og gir selskaper muligheten til \xe5 opprettholde h\xf8ye standarder uten \xe5 sprenge budsjettet.\\n\\nHvis du er interessert i \xe5 forbedre testkapasiteten din med et system designet for fremtidens minneteknologi, vennligst ta kontakt med meg for mer informasjon p\xe5 [i@tanshuai.com](mailto:i@tanshuai.com).\\n\\nGod testing!\\n"},{"lang":"no","group":"blog","slug":"blog/usr-bin-sudo-must-be-owned-by-uid-0-and-have-the-setuid-bit-set-on-ubuntu-20-04","frontmatter":{"title":"/usr/bin/sudo m\xe5 eies av uid 0 og ha setuid-bit satt p\xe5 Ubuntu 20.04","date":"2021-10-08T13:07:25.406Z","draft":false,"author":"Tan Shuai","tags":["Ubuntu","Linux","Sudo"],"categories":["Linux"]},"content":"\\nHvis du f\xe5r feilmeldingen \\"/usr/bin/sudo m\xe5 eies av uid 0 og ha setuid-biten satt\\" p\xe5 Ubuntu 20.04, f\xf8lg disse trinnene for \xe5 l\xf8se problemet.\\n\\n1. Under oppstartsprosessen, trykk p\xe5 \'ESC\'-tasten for \xe5 f\xe5 tilgang til GRUB-menyen.\\n\\n![GRUB-skjerm](/images/content/wx20211008-210752.png \\"GRUB-skjerm\\")\\n\\n2. Velg det f\xf8rste alternativet, \\"Ubuntu\\", og trykk p\xe5 \'e\'-tasten for \xe5 redigere oppstartsparametrene.\\n\\n![Rediger oppstartsparametere](/images/content/wx20211008-210841.png \\"Rediger oppstartsparametere\\")\\n\\n3. Legg til f\xf8lgende streng p\xe5 linjen som starter med \'linux\' for \xe5 starte opp i redningsmodus:\\n\\n```bash\\nsystemd.unit=rescue.target\\n```\\n\\n4. N\xe5r du er i redningsmodus, kj\xf8r f\xf8lgende kommando for \xe5 gjenopprette de riktige tillatelsene og eierskapet for `/usr/bin/sudo`:\\n\\n```bash\\npkexec chmod a=rx,u+ws /usr/bin/sudo\\n```\\n\\nDenne kommandoen setter de n\xf8dvendige tillatelsene og s\xf8rger for at `sudo` eies av root-brukeren med setuid-biten satt.\\n\\nVed \xe5 f\xf8lge disse trinnene, skal du kunne l\xf8se problemet og gjenopprette riktig funksjonalitet til `sudo`-kommandoen p\xe5 Ubuntu-systemet ditt.\\n\\n---\\n"},{"lang":"da","group":"blog","slug":"blog/aws-codecommit-the-githubs-large-file-storage-git-lfs-free-alternative","frontmatter":{"title":"AWS CodeCommit： Det gratis alternativ til GitHub Large File Storage (Git LFS)","description":"Opdag, hvordan AWS CodeCommit fungerer som et omkostningseffektivt og effektivt alternativ til GitHubs Large File Storage (Git LFS). Denne artikel d\xe6kker begr\xe6nsningerne ved Git LFS, fordelene ved at bruge AWS CodeCommit til lagring af store filer, og giver en trin-for-trin guide til at migrere fra Git LFS til CodeCommit. Forbedr din udviklingsarbejdsgang med AWS\'s skalerbare og sikre infrastruktur.","date":"2022-02-09T00:00:00.000Z","author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["Softwareudvikling"],"draft":false},"content":"\\nAWS CodeCommit tilbyder et robust alternativ til GitHubs Large File Storage (Git LFS) tjeneste, hvilket giver en effektiv l\xf8sning til h\xe5ndtering af store filer i dine Git-repositorier.\\n\\n## Hvorfor du b\xf8r overveje at undg\xe5 Git LFS\\n\\nSelvom Git LFS er et popul\xe6rt valg til h\xe5ndtering af store filer i Git-repositorier, har det sine begr\xe6nsninger og udfordringer. Git LFS kr\xe6ver ekstra ops\xe6tning og administration, hvilket kan komplicere udviklingsarbejdet. Derudover kan omkostningerne til opbevaring og b\xe5ndbredde, som er forbundet med Git LFS, hurtigt eskalere, is\xe6r for projekter med mange store filer eller omfattende samarbejde.\\n\\n## Hvorfor GitHubs Large File Storage Service ikke er perfekt\\n\\nGitHubs Large File Storage-tjeneste er nyttig, men har iboende ulemper. Den prim\xe6re bekymring er omkostningerne forbundet med opbevaring og b\xe5ndbredde, som kan blive uoverkommelige for st\xf8rre projekter. Desuden kan administrationen af Git LFS v\xe6re besv\xe6rlig, da udviklere skal installere og konfigurere LFS-klienten, spore specifikke filer og h\xe5ndtere potentielle sammenfletningskonflikter, der opst\xe5r p\xe5 grund af h\xe5ndteringen af store filer separat fra resten af depotet.\\n\\n## Hvorfor bruge AWS CodeCommit til at opbevare store filer i Git\\n\\nAWS CodeCommit tilbyder et overbevisende alternativ til opbevaring af store filer i Git-repositorier uden behov for Git LFS. CodeCommit er en fuldt administreret kildekodetjeneste, der problemfrit integreres med andre AWS-tjenester, og tilbyder robust skalerbarhed, sikkerhed og omkostningseffektivitet. Ved at udnytte CodeCommit kan udviklere undg\xe5 den ekstra administration af Git LFS, mens de drager fordel af AWS\'s robuste infrastruktur og pay-as-you-go-priss\xe6tningsmodel.\\n\\n## Hvad er begr\xe6nsningerne ved AWS CodeCommit sammenlignet med GitHub\\n\\nP\xe5 trods af sine fordele har AWS CodeCommit nogle begr\xe6nsninger sammenlignet med GitHub. GitHubs omfattende community support, rige \xf8kosystem af integrationer og avancerede funktioner som GitHub Actions og GitHub Pages er m\xe5ske ikke fuldt ud replikeret i CodeCommit. Derudover kan udviklere, der er vant til GitHubs brugergr\xe6nseflade og samarbejdsv\xe6rkt\xf8jer, finde overgangen til CodeCommit kr\xe6ver en vis tilpasning.\\n\\n## S\xe5dan migrerer du et Git LFS-repository til CodeCommit\\n\\nMigration af et Git LFS-repository til CodeCommit involverer flere trin. F\xf8rst skal du sikre, at alle store filer er korrekt sporet i dit Git LFS-repository. Dern\xe6st skal du klone depotet og fjerne Git LFS-sporingskonfigurationen. Derefter skal du oprette et nyt depot i AWS CodeCommit og skubbe dit lokale depot til det. Detaljeret dokumentation og scripts er tilg\xe6ngelige for at str\xf8mline denne proces, s\xe5 en glidende overgang uden datatab eller afbrydelser sikres.\\n\\n## En bedre l\xf8sning\\n\\nFor teams og projekter, der er st\xe6rkt afh\xe6ngige af Git LFS, kan det at udforske AWS CodeCommit som et alternativ give betydelige fordele. CodeCommits problemfri integration med AWS-\xf8kosystemet, kombineret med dets omkostningseffektive og skalerbare natur, g\xf8r det til en attraktiv mulighed for h\xe5ndtering af store filer i Git-repositorier. Ved at afhj\xe6lpe de udfordringer, der er forbundet med Git LFS, g\xf8r CodeCommit det muligt for udviklingsteams at fokusere p\xe5 kodning og samarbejde, hvilket driver produktivitet og innovation.\\n\\nAfslutningsvis tilbyder AWS CodeCommit et levedygtigt, omkostningseffektivt og effektivt alternativ til GitHub\'s Large File Storage-tjeneste. Ved at udnytte AWS\'s robuste infrastruktur kan udviklere nemt administrere store filer i Git-repositorier, optimere deres arbejdsgange og reducere omkostningerne.\\n"},{"lang":"da","group":"blog","slug":"blog/check-voltage-current-on-macos-for-power-adapter","frontmatter":{"title":"Kontroller sp\xe6nding og str\xf8m p\xe5 MacOS for str\xf8mforsyning","meta_title":"Kontroller sp\xe6nding og str\xf8m p\xe5 MacOS for str\xf8mforsyning","date":"2022-02-14T00:00:00.000Z","author":"Tan Shuai","tags":["MacOS","Str\xf8mforsyning","Sp\xe6nding","Str\xf8m"],"categories":["MacOS"],"draft":false},"content":"\\nN\xe5r du bruger en MacBook, vil du m\xe5ske tjekke sp\xe6ndingen og str\xf8mmen p\xe5 str\xf8madapteren. Her er en enkel m\xe5de at tjekke sp\xe6ndingen og str\xf8mmen p\xe5 str\xf8madapteren p\xe5 MacOS.\\n\\n\xc5bn Terminal.app og indtast kommandoen:\\n\\n`ioreg -l -n AppleSmartBattery -r |grep AppleRawAdapterDetails`\\n\\nDu vil f\xe5 f\xf8lgende oplysninger inklusive str\xf8m og sp\xe6nding:\\n\\n```json\\n\\"AppleRawAdapterDetails\\" = ({\\"IsWireless\\"=No,\\"AdapterID\\"=0,\\"FamilyCode\\"=18446744073172697098,\\"Watts\\"=89,**\\"Current\\"=4450**,\\"PMUConfiguration\\"=4448,**\\"Voltage\\"=20000**})\\n"},{"lang":"da","group":"blog","slug":"blog/convert-markdown-academic-paper-pdf-macos","frontmatter":{"title":"Konverter hurtigt Markdown til akademisk-stil papir PDF p\xe5 macOS","meta_title":"Konverter Markdown til akademisk-stil papir PDF p\xe5 macOS med Pandoc","description":"L\xe6r hvordan du konverterer Markdown-dokumenter til akademisk-stil papir PDF\'er p\xe5 macOS ved hj\xe6lp af Pandoc og BasicTeX. Denne hurtige og enkle metode er perfekt til at skabe professionelle PDF-filer til akademiske papirer.","date":"2022-03-03T00:00:00.000Z","categories":["Softwareudvikling"],"author":"Tan Shuai","tags":["Pandoc","LaTeX","PDF","Papir","Markdown","macOS"],"draft":false},"content":"\\nI denne guide vil jeg vise dig, hvordan jeg konverterer Markdown-dokumenter til PDF-filer i akademisk stil p\xe5 macOS ved hj\xe6lp af Pandoc og BasicTeX. Denne metode er hurtig og ligetil, perfekt n\xe5r du har brug for at skabe professionelle PDF-filer til dine akademiske artikler.\\n\\n### Trin 1: Installer Pandoc og BasicTeX\\n\\nF\xf8rst skal du installere Pandoc og BasicTeX p\xe5 dit macOS-system. Her er hvordan jeg gjorde det:\\n\\n1. **Installer Pandoc**: \xc5bn Terminal og indtast f\xf8lgende kommando for at installere Pandoc:\\n\\n   ```bash\\n   brew install pandoc\\n   ```\\n\\n2. **Installer BasicTeX**: Da MacTeX er ret stor, valgte jeg den mindre BasicTeX-pakke for at spare plads. K\xf8r denne kommando:\\n\\n   ```bash\\n   brew install --cask basictex\\n   ```\\n\\n3. **Installer Almindelige LaTeX-pakker**: For at sikre, at du har de n\xf8dvendige pakker til at generere PDF\'er, skal du k\xf8re disse kommandoer:\\n   ```bash\\n   sudo tlmgr update --self\\n   sudo tlmgr install collection-basic collection-latex collection-latexrecommended collection-fontsrecommended\\n   ```\\n\\n### Trin 2: Forbered Dit Markdown-fil\\n\\nDerefter skal du oprette din Markdown-fil (f.eks. `paper.md`). Her er, hvordan jeg opsatte min fil, inklusive titel, forfatter, dato og kontaktoplysninger:\\n\\n```markdown\\n---\\ntitle: \\"Your Paper Title\\"\\nsubtitle: \\"Optional Subtitle\\"\\ndate: \\\\today\\n\\nauthor: |\\n  | Your Name\\n  | your-email@tanshuai.com\\n  | www.tanshuai.com\\n---\\n\\n# Abstract\\n\\nYour abstract here.\\n\\n# Introduction\\n\\nYour introduction here.\\n\\n# Methodology\\n\\nYour methodology here.\\n\\n# Results\\n\\nYour results here.\\n\\n# Conclusion\\n\\nYour conclusion here.\\n```\\n\\n### Trin 3: Konverter Markdown til PDF med Pandoc\\n\\nNu kan du konvertere din Markdown-fil til en PDF. Jeg brugte f\xf8lgende kommando i Terminal:\\n\\n```bash\\npandoc paper.md -o paper.pdf --pdf-engine=xelatex\\n```\\n\\nDenne kommando bruger Pandocs standard LaTeX-skabelon til at konvertere Markdown-filen til en PDF i akademisk stil, inklusive forfatterens kontaktoplysninger under deres navn.\\n\\n### Yderligere Tips\\n\\n- **Brugerdefineret LaTeX-skabelon**: Hvis du har brug for mere avanceret formatering eller specifikke stilarter, kan du oprette eller downloade en brugerdefineret LaTeX-skabelon og bruge den med Pandoc:\\n\\n  ```bash\\n  pandoc paper.md -o paper.pdf --pdf-engine=xelatex --template=your-template.tex\\n  ```\\n\\n- **Mere Metadata**: Du kan tilf\xf8je ekstra information i YAML-metadata headeren, s\xe5som et abstract eller n\xf8gleord, og bruge disse i brugerdefinerede skabeloner.\\n\\n### Konklusion\\n\\nVed at f\xf8lge disse trin kan du nemt konvertere Markdown-dokumenter til PDF-filer i akademisk stil p\xe5 macOS. Ved hj\xe6lp af Pandoc og BasicTeX bliver denne proces hurtig og effektiv, perfekt n\xe5r du skal generere professionelle PDF-dokumenter. Uanset om du forbereder akademiske artikler, tekniske rapporter eller andre formelle dokumenter, fungerer denne metode godt. Ved at inkludere kontaktoplysninger i metadata-headeren tilf\xf8jer du et professionelt touch til dine dokumenter.\\n\\nJeg h\xe5ber, du finder denne guide nyttig! Hvis du har sp\xf8rgsm\xe5l eller st\xf8der p\xe5 problemer, er du velkommen til at kontakte mig. God skrivelyst!\\n"},{"lang":"da","group":"blog","slug":"blog/electron-build-tools-error-error-failed-to-run-choco-install-pywin32-yes","frontmatter":{"title":"Electron Build Tools `ERROR Error： Failed to run \\"choco install pywin32 --yes\\"`","date":"2021-09-08T00:00:00.000Z","draft":false,"author":"Tan Shuai","tags":["Electron","Byggev\xe6rkt\xf8jer","PyWin32","Chocolatey","Win32"],"categories":["Softwareudvikling"]},"content":"\\nN\xe5r du arbejder med Electron Build Tools, kan du st\xf8de p\xe5 en fejl relateret til installationen af pywin32 via Chocolatey. Dette kan v\xe6re frustrerende, is\xe6r n\xe5r det er en n\xf8dvendig afh\xe6ngighed for dit projekt. Nedenfor er en detaljeret forklaring af problemet og mulige trin til at l\xf8se det.\\n\\n### Fejlen\\n\\nN\xe5r du initialiserer et Electron-projekt ved hj\xe6lp af Electron Build Tools, kan du se f\xf8lgende fejlmeddelelse:\\n\\n```bash\\nE:\\\\\\\\>e init main-testing -i testing --root=e:/src/electron\\nWARN En rettelig fejl er opst\xe5et\\n--> En n\xf8dvendig afh\xe6ngighed \\"pywin32\\" kunne ikke findes, det skal sandsynligvis installeres.\\nVil du have, at build-tools skal fors\xf8ge at rette dette for dig? [y/n]: y\\n\\nK\xf8rer \\"choco install pywin32 --yes\\"\\nERROR Fejl: Kunne ikke k\xf8re \\"choco install pywin32 --yes\\"\\n    at spawnSyncWithLog (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:11:11)\\n    at fix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:39:9)\\n    at maybeAutoFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\maybe-auto-fix.js:13:3)\\n    at whichAndFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\which.js:10:5)\\n    at checkPlatformDependencies (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:61:7)\\n    at Object.<anonymous> (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\e-init.js:165:3)\\n    at Module._compile (internal/modules/cjs/loader.js:1072:14)\\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1101:10)\\n    at Module.load (internal/modules/cjs/loader.js:937:32)\\n    at Function.Module._load (internal/modules/cjs/loader.js:778:12)\\n```\\n\\nDenne fejl opst\xe5r typisk, fordi installationsscriptet for pywin32-pakken ikke kan finde de n\xf8dvendige filer p\xe5 fjernserveren. Dette resulterer i en 404-fejl, hvilket indikerer, at filen ikke er tilg\xe6ngelig p\xe5 den angivne URL.\\n\\n### Forst\xe5 fejlen\\n\\nDen vigtige del af fejlmeddelelsen er:\\n\\n```bash\\nERROR: Den eksterne fil findes enten ikke, er uautoriseret eller forbudt for URL \'http://sourceforge.net/projects/pywin32/files/pywin32/Build%20219/pywin32-219.win-amd64-py3.9.exe/download\'. Exception calling \\"GetResponse\\" with \\"0\\" argument(s): \\"Den eksterne server returnerede en fejl: (404) Ikke fundet.\\"\\n```\\n\\nDette indikerer, at download-URL\'en for pywin32 ikke l\xe6ngere er gyldig, hvilket betyder, at Chocolatey ikke kan hente de n\xf8dvendige installationsfiler.\\n\\n### Fejlfindingstrin\\n\\nHer er et par trin, du kan tage for at l\xf8se dette problem:\\n\\n#### 1. Bekr\xe6ft Chocolatey-installation\\n\\nS\xf8rg for, at Chocolatey er korrekt installeret og opdateret til den nyeste version. Du kan tjekke din Chocolatey-version med:\\n\\n```bash\\nchoco --version\\n```\\n\\nFor at opdatere Chocolatey skal du bruge:\\n\\n```bash\\nchoco upgrade chocolatey\\n```\\n\\n#### 2. Installer pywin32 manuelt\\n\\nDa den automatiske installation fejler, kan du pr\xf8ve at installere pywin32 manuelt. Du kan downloade den passende version fra den officielle [pywin32 GitHub releases page](https://github.com/mhammond/pywin32/releases) og installere den manuelt.\\n\\n#### 3. \xc6ndre installationsscriptet\\n\\nHvis du har kontrol over Electron Build Tools-skriptet, kan du \xe6ndre det til at pege p\xe5 en gyldig URL for pywin32 eller h\xe5ndtere den manuelle installationsproces.\\n\\n#### 4. Brug en alternativ pakkemanager\\n\\nHvis Chocolatey fortsat fejler, overvej at bruge en alternativ pakkemanager som pip til Python-pakker:\\n\\n```bash\\npip install pywin32\\n```\\n\\n### Eksempel p\xe5 manuel installation af pywin32\\n\\n1. Download den passende pywin32-installationsprogram fra [officielle GitHub-udgivelser](https://github.com/mhammond/pywin32/releases).\\n2. K\xf8r installationsprogrammet og f\xf8lg installationsinstruktionerne.\\n3. Bekr\xe6ft installationen ved at k\xf8re et simpelt Python-script, der importerer pywin32:\\n\\n```python\\nimport win32api\\nprint(win32api.GetVersionEx())\\n```\\n\\nAt st\xf8de p\xe5 fejlen \\"Failed to run `choco install pywin32 --yes`\\" kan v\xe6re en forhindring i din udviklingsproces. Men ved at forst\xe5 \xe5rsagen og f\xf8lge de ovenst\xe5ende trin kan du overvinde dette problem og forts\xe6tte med ops\xe6tningen af dit Electron-projekt.\\n"},{"lang":"da","group":"blog","slug":"blog/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining","frontmatter":{"title":"Hemmelige Designhemmeligheder for Fuldt Tilpassede ASIC\'er til Bitcoin og Kryptovaluta Mining","date":"2022-05-30T00:00:00.000Z","update":"2024-08-02T00:00:00.000Z","categories":["Halvledere","Bitcoin","Kryptovaluta","Blockchain"],"author":"Tan Shuai","tags":["ASIC","Bitcoin","Mining","BTC"],"draft":false,"contact":"Tan Shuai | tanshuai@btc.com | tanshuai.com"},"content":"\\n\\\\[\\nTan Shuai  \\n[tanshuai@btc.com](mailto:tanshuai@btc.com)  \\n[tanshuai.com](https://tanshuai.com)\\n\\\\]\\n\\n---\\n\\n## Resum\xe9\\n\\nI den konkurrencepr\xe6gede verden af kryptovalutamining er energieffektivitet, hashrate-ydeevne og p\xe5lidelighed altafg\xf8rende. Dette dokument dykker ned i den f\xf8rsteklasses fuldtilpassede ASIC (Application-Specific Integrated Circuit) design, og afsl\xf8rer branchens hemmeligheder og ekspertmetoder, der driver h\xf8jtydende Bitcoin og kryptovalutamining. Skrevet af en teknisk ekspert fra et af de bedste ASIC-minerselskaber, udnytter dette dokument avancerede designteknikker, omhyggelig fysisk layout og omfattende verificeringsprocesser for at fremvise de enest\xe5ende egenskaber ved fuldtilpassede ASIC\'er i at maksimere miningeffektivitet og rentabilitet.\\n\\n## Introduktion\\n\\nUdviklingen af kryptovalutamining, is\xe6r Bitcoin mining, har set en overgang fra brugen af generelle CPU\'er, FPGA\'er og GPU\'er til specialiserede ASIC\'er. Disse ASIC\'er tilbyder enest\xe5ende ydeevne og energieffektivitet. Fuldtilpasset ASIC-design repr\xe6senterer h\xf8jdepunktet af denne udvikling og muligg\xf8r skr\xe6ddersyede l\xf8sninger, der opfylder de specifikke krav fra miningoperationer.\\n\\nMeget af den eksisterende litteratur om ASIC-design til kryptovalutamining stammer fra akademia eller ikke-minende virksomheder, som ofte mangler reel anvendelighed. Til dato har kun en h\xe5ndfuld virksomheder, prim\xe6rt kinesiske (f.eks. MicroBT, Bitmain), med succes udviklet markedsf\xf8rbare Bitcoin-mining ASIC\'er. Dette dokument s\xf8ger at udfylde dette hul ved at give indsigt trukket fra faktisk industri praksis og tilbyde et perspektiv forankret i miningsektorens realiteter.\\n\\nSom professionel med over ti \xe5rs erfaring i teknologibranchen har forfatteren af dette dokument udviklet verdens bedste Bitcoin ASIC Miner (WhatsMiner), LTC/DOGE og ETH Miners og spillet en n\xf8glerolle i virksomheder som MicroBT, BTC.COM og andre offentlige fablesses. Han har haft n\xf8glepositioner i virksomheder noteret p\xe5 NASDAQ, HKSE og NYSE. Med omfattende erfaring i etablering af partnerskaber med TSMC, Texas Instruments, ARM og Intel, bringer han en enorm viden og praktisk ekspertise til feltet af tilpasset ASIC-design til Bitcoin og kryptovalutamining.\\n\\n## Metodologi og Design Flow\\n\\n### Designfilosofi\\n\\nVores tilgang til fuldtilpasset ASIC-design er drevet af et fokus p\xe5 at maksimere PPA (Power, Performance, and Area), is\xe6r under lavsp\xe6ndingsdriftsbetingelser. Dette afsnit vil beskrive vores designfilosofi og metodologi:\\n\\n1. **Pipeline-arkitektur**: Udnyttelse af de iboende fordele ved pipeline-strukturer til mining-algoritmer, kendetegnet ved registre og kombinationslogiktrin. Ved at bruge en pipeline-arkitektur kan vi effektivt h\xe5ndtere de h\xf8jfrekvente operationer, der kr\xe6ves til kryptovalutamining.\\n2. **Manuel netliste og placering**: Detaljeret scripting til netlisteoprettelse og manuel celleplacering for at optimere kritiske stier. Dette muligg\xf8r pr\xe6cis kontrol over timing og reducerer parasitiske effekter.\\n3. **Tilpassede cellebiblioteker**: Udvikling af specialiserede celler med optimerede transistorantal og dynamiske str\xf8mbesparende funktioner. Tilpassede celler er designet til at fungere ved de lavest mulige sp\xe6ndinger, hvilket sikrer minimalt str\xf8mforbrug.\\n\\n### Opn\xe5 PPA-fordele\\n\\nDetaljerede strategier for at opn\xe5 PPA-fordele gennem specialdesign:\\n\\n1. **Specialdesignet Register**: Udnyttelse af multi-bit registre og latch-baserede designs for at reducere urkraft og forbedre timing. Multi-bit registre minimerer urtr\xe6ets str\xf8mforbrug og reducerer det samlede areal.\\n2. **Manuel Placering**: Reduktion af ledningsl\xe6ngde og balance mellem setup- og holdetider for at forbedre den samlede ydeevne. Manuel placering giver bedre kontrol over forbindelsesforsinkelser og krydstale, forbedrer signalintegriteten og reducerer str\xf8mforbruget.\\n3. **Optimeret Celledesign**: Specialdesignede celler, der opererer ved lavere sp\xe6ndinger, minimerer dynamisk str\xf8mforbrug og maksimerer effektiviteten. Ved at tilpasse celledesign til de specifikke behov i minealgoritmer kan vi opn\xe5 betydelige forbedringer i ydeevne.\\n\\n### P\xe5lidelighed ved Lav Sp\xe6nding\\n\\nSikring af p\xe5lideligheden af specialdesignet timinglogik ved lave sp\xe6ndinger involverer:\\n\\n1. **N\xf8jagtig Simulation**: Kredsl\xf8bssimuleringer til at validere specialcellers opf\xf8rsel under specifikke forhold. V\xe6rkt\xf8jer som SPICE bruges til detaljerede elektriske simuleringer for at sikre, at cellerne fungerer korrekt under alle PVT (Proces, Sp\xe6nding, Temperatur) hj\xf8rner.\\n2. **Konsistens i Placering**: Manuel placering for at sikre ensartethed og reducere variabilitet. Ved at kontrollere den fysiske layout kan vi minimere p\xe5virkningen af procesvariationer og sikre ensartet ydeevne.\\n3. **Pr\xe6cis PVT-kalibrering**: Verifikation mod proces-, sp\xe6ndings- og temperaturvariationer. Omfattende testning og kalibrering udf\xf8res for at sikre designets robusthed under forskellige driftsforhold.\\n\\n## Case Studies og Resultater\\n\\nPr\xe6sentation af data og casestudier fra fulde masketape-outs:\\n\\n| Projekt | Procesnode | Sp\xe6nding/Str\xf8meffektivitet | Algoritme |\\n| ------- | ---------- | -------------------------- | --------- |\\n| SC      | TSMC 28nm  | 0,45V, 257J/T              | Blake2b   |\\n| DCR     | TSMC 28nm  | 0,45V, 150J/T              | Blake256  |\\n| DASH    | TSMC 16nm  | 0,38V, 6,2J/G              | X11       |\\n| BTC     | TSMC 16nm  | 0,38V, 65J/T               | SHA-256d  |\\n| BTC     | TSMC 7nm   | 0,30V, 37J/T               | SHA-256d  |\\n| BTC     | Samsung 8nm| 0,31V, 45J/T               | SHA-256d  |\\n| BTC     | SMIC N+1   | 0,30V, 35J/T               | SHA-256d  |\\n\\nDisse resultater viser de betydelige gevinster i effektivitet og ydeevne, der kan opn\xe5s gennem vores specialdesignede tilgang.\\n\\n## Integration og Verifikation\\n\\n### Mixed-Cell Signoff\\n\\n- **Integration af Specialceller**: Specialceller integreres med standardceller fra TSMC og andre foundries for at sikre kompatibilitet og ydeevne. Specialceller karakteriseres og valideres for at matche standardcellebibliotekets krav, hvilket muligg\xf8r problemfri integration.\\n- **Signoff Strategier**: Strategier for at sikre problemfri kompatibilitet og ydeevne inkluderer detaljerede DRC (Design Rule Check) og LVS (Layout Versus Schematic) checks, samt timing- og str\xf8manalyser ved hj\xe6lp af industristandard EDA (Electronic Design Automation) v\xe6rkt\xf8jer.\\n\\n### Digital og Analog Co-Design\\n\\n- **Teknikker til Integration**: Integration af digitale og analoge komponenter for at optimere den samlede chipydelse. Teknikker som mixed-signal verifikation og co-simulering anvendes for at sikre korrekt integration og funktionalitet.\\n- **Verifikationsmetodologier**: Metodologier til at sikre robusthed p\xe5 tv\xe6rs af forskellige driftsbetingelser omfatter hj\xf8rneanalyse, Monte Carlo-simuleringer og p\xe5lidelighedsverifikation for at im\xf8deg\xe5 \xe6ldning og elektromigration.\\n\\n## Konklusion\\n\\nFuldt tilpasset ASIC-design tilbyder betydelige fordele for Bitcoin- og kryptovalutamining, hvilket giver enest\xe5ende ydeevne, energieffektivitet og p\xe5lidelighed. Ved at afsl\xf8re hemmelighederne bag topklasse tilpasset ASIC-design fremh\xe6ver dette papir de metodologier og innovationer, der adskiller industriens f\xf8rende akt\xf8rer. Efterh\xe5nden som kryptovalutamining forts\xe6tter med at udvikle sig, vil tilpassede ASIC\'er spille en afg\xf8rende rolle i at drive n\xe6ste generation af h\xf8jeffektiv, h\xf8jtydende mininghardware.\\n\\n[PDF Version of the Paper](/docs/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining.pdf)\\n"},{"lang":"da","group":"blog","slug":"blog/get-current-commit-id-of-git-and-update-to-package-json","frontmatter":{"title":"F\xe5 nuv\xe6rende commit-id fra Git og opdatere til package.json","date":"2021-08-21T09:19:58.875Z","draft":false,"author":"Tan Shuai","tags":["Git","Package.json","Node.js"],"categories":["Softwareudvikling"]},"content":"\\nN\xe5r du udvikler et Node.js-projekt, vil du m\xe5ske holde styr p\xe5 den aktuelle commit-ID for dit Git-repositorium. Disse oplysninger kan v\xe6re nyttige til fejlfinding, versionering eller implementeringsform\xe5l. En m\xe5de at opn\xe5 dette p\xe5 er ved at opdatere `package.json`-filen med den aktuelle commit-ID under build-processen. Denne artikel vil guide dig gennem trinene til at f\xe5 den aktuelle commit-ID for Git og opdatere den til `package.json`-filen ved hj\xe6lp af Node.js.\\n\\n```bash\\n\\"predev\\": \\"node ./node_modules/json/lib/json.js -I -f package.json -e \\\\\\\\\\\\\\"this.commit=\'$(git rev-parse --short HEAD)\'\\\\\\\\\\\\\\"\\",\\n"},{"lang":"da","group":"blog","slug":"blog/migrate-a-github-lfs-git-large-file-storage-repository-to-aws-codecommit","frontmatter":{"title":"Migrer et GitHub LFS (Git Large File Storage) repository til AWS CodeCommit","date":"2022-02-09T09:36:57.481Z","draft":false,"author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["Softwareudvikling"]},"content":"\\nJeg migrerede for nylig et af mine GitHub-repositorier, som bruger Git Large File Storage (LFS), til AWS CodeCommit. Jeg t\xe6nkte, at jeg ville dele processen med dig, hvis du overvejer at g\xf8re noget lignende. Her er en trin-for-trin guide baseret p\xe5 mine erfaringer.\\n\\n## Foruds\xe6tninger\\n\\nF\xf8r vi g\xe5r i gang, skal du s\xf8rge for at have disse v\xe6rkt\xf8jer installeret:\\n\\n- Git\\n- Git LFS\\n- AWS CLI\\n\\n## Trin-for-Trin Guide\\n\\n### 1. Klon Repositoriet\\n\\nF\xf8rst skal du klone dit GitHub-repositorie ved hj\xe6lp af `--mirror`-optionen. Dette opretter en bare klon af repositoriet, inklusive alle grene og tags.\\n\\n```zsh\\ngit clone --mirror https://github.com/tanshuai/designs.git designs\\n```\\n\\n### 2. Verificer LFS-Filer\\n\\nN\xe6st skal du liste alle filer, der administreres af Git LFS, for at sikre, at alt er p\xe5 plads.\\n\\n```zsh\\ngit lfs ls-files\\n```\\n\\nDu burde se noget lignende dette:\\n\\n```\\ncadfa0bc9e * Brochure-Trifold-Draft.ai\\naf9b8b8a1c * Brochure-Trifold-English.ai\\n27bb5f4e61 * Brochure-Trifold.ai\\n```\\n\\n### 3. Migrer LFS-Filer\\n\\nNu skal du eksportere LFS-filerne. Dette trin sikrer, at de er en del af din repositories historie.\\n\\n```zsh\\ngit lfs migrate export --include=\\"*.ai\\" --everything\\n```\\n\\nDu vil se nogle fremdriftsmeddelelser som disse:\\n\\n```\\nmigrate: Sorting commits: ..., done.\\nmigrate: Rewriting commits: 100% (20/20), done.\\nmaster\\t98a3c48d85... -> 82f8873b41...\\nmigrate: Updating refs: ..., done.\\nmigrate: checkout: ..., done.\\nprune: 3 local object(s), 0 retained, done.\\ncadfa0bc9e... (133 MB)\\n27bb5f4e61... (131 MB)\\naf9b8b8a1c... (130 MB), done.\\nprune: Deleting objects: 100% (3/3), done.\\n```\\n\\n### 4. Ryd Op i LFS\\n\\nFjern Git LFS-trackinginformationen og afinstaller Git LFS.\\n\\n```zsh\\ngit lfs ls-files\\ngit rm .gitattributes -f\\ngit lfs uninstall\\n```\\n\\n### 5. Push til AWS CodeCommit\\n\\nEndelig skal du pushe dit repositorie til AWS CodeCommit.\\n\\n```zsh\\ngit push https://git-codecommit.us-east-2.amazonaws.com/v1/repos/designs --all\\n```\\n\\nDet er det! Ved at f\xf8lge disse trin lykkedes det mig at migrere mit GitHub LFS-repositorie til AWS CodeCommit. De store filer og repositories historik blev bevaret perfekt.\\n\\n## Afslutning\\n\\nMigrering af et GitHub-repositorie, der bruger Git LFS, til AWS CodeCommit er ret ligetil, hvis du f\xf8lger de rigtige trin. Hvis du har sp\xf8rgsm\xe5l eller st\xf8der p\xe5 problemer, er [AWS CodeCommit-dokumentationen](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) og [Git LFS-dokumentationen](https://git-lfs.github.com/) gode ressourcer.\\n\\nJeg h\xe5ber, du finder denne guide nyttig. God kodning!\\n"},{"lang":"da","group":"blog","slug":"blog/reset-restore-all-subdirectories-of-git","frontmatter":{"title":"Nulstil/Gendan Alle Undermapper i Git","date":"2021-09-22T08:33:49.201Z","draft":false,"author":"Tan Shuai","tags":["Git","Versionskontrol"],"categories":["Softwareudvikling"]},"content":"\\nAt administrere et Git-repositorium effektivt kr\xe6ver ofte, at man nulstiller eller gendanner undermapper for at opretholde en ren og funktionel kodebase. Denne guide giver en kortfattet, trin-for-trin tilgang til at nulstille eller gendanne alle undermapper i et Git-repositorium.\\n\\n## Nulstilling af Undermapper\\n\\nDen f\xf8lgende Git-kommando fjerner alle uoverv\xe5gede filer og mapper fra repositoriet. Dette er nyttigt til at rydde op i un\xf8dvendige filer f\xf8r en nulstilling eller gendannelse.\\n\\n```bash\\ngit clean -xfdf -- .\\n```\\n\\n### Kommandoopdeling:\\n\\n- `-x`: Fjerner alle uoverv\xe5gede filer, inklusive dem, der ignoreres af `.gitignore`.\\n- `-f`: Tvinger fjernelse af filer.\\n- `-d`: Fjerner uoverv\xe5gede mapper.\\n- `-- .`: Anvender kommandoen p\xe5 det aktuelle bibliotek og alle undermapper.\\n\\n## Gendannelse af Undermapper\\n\\nFor at gendanne alle filer i repositoriet til deres sidst beg\xe5ede tilstand, brug f\xf8lgende kommando:\\n\\n```bash\\ngit checkout {HEAD OR BRANCH} -- .\\n```\\n\\n### Kommandoopdeling:\\n\\n- `{HEAD OR BRANCH}`: Erstat med `HEAD` for at nulstille til den seneste commit eller angiv et branchnavn for at nulstille til en bestemt branch.\\n- `-- .`: Anvender kommandoen p\xe5 det aktuelle bibliotek og alle undermapper.\\n\\nVed at bruge disse kommandoer kan du sikre, at dit repositorium er fri for u\xf8nskede filer, og at alle filer er gendannet til deres beg\xe5ede tilstande. Denne proces hj\xe6lper med at opretholde en ren og organiseret kodebase, hvilket letter lettere samarbejde og udvikling.\\n\\nDu er velkommen til at tilpasse denne guide efter dine specifikke behov og pr\xe6ferencer. For mere avancerede Git-operationer, henvis til [den officielle Git-dokumentation](https://git-scm.com/doc).\\n"},{"lang":"da","group":"blog","slug":"blog/ultra-low-cost-ddr3-ddr4-lpddr3-lpddr4-memory-test-system","frontmatter":{"title":"Ultra-lavpris DDR3, DDR4, LP-DDR3 & LP-DDR4 Hukommelsestestsystem","description":"Opdag ultra-lavpris hukommelsestestsystem til DDR3, DDR4, LP-DDR3 og LP-DDR4 teknologier. Prissat til omkring $200.000 USD, tilbyder det h\xf8jhastighedstestning, alsidighed, avancerede funktioner og lavt str\xf8mforbrug. Perfekt til virksomheder, der s\xf8ger omkostningseffektive, p\xe5lidelige hukommelsestestl\xf8sninger.","date":"2024-06-01T00:00:00.000Z","categories":["Halvledere"],"author":"Tan Shuai","tags":["DDR3","DDR4","LP-DDR3","LP-DDR4","Hukommelsestestsystem"],"draft":false},"content":"\\nHvis du er som mig og altid p\xe5 udkig efter omkostningseffektive l\xf8sninger uden at g\xe5 p\xe5 kompromis med kvaliteten, vil du elske, hvad jeg har at dele i dag. I vores hurtigt udviklende teknologiske verden er det afg\xf8rende at sikre, at vores enheders hukommelse er i topform. High-end muligheder som T5503/T5503HS2 er fantastiske, men de kommer med en h\xf8j pris. Heldigvis har Zeeis tr\xe5dt til med et ultra-lavpris hukommelsestestsystem, der ikke ofrer ydeevnen.\\n\\n## Hvorfor Dette Er Vigtigt\\n\\nDa jeg f\xf8rst h\xf8rte om Zeeis\'s hukommelsestestsystem, blev jeg nysgerrig. Dette system er designet til at h\xe5ndtere DDR3, DDR4, LP-DDR3 og LP-DDR4 hukommelsesteknologier. Uanset om du arbejder med \xe6ldre systemer eller den nyeste teknologi, har dette system dig d\xe6kket.\\n\\n### H\xf8jhastighedstestning\\n\\nEn af de fremtr\xe6dende funktioner er dens evne til at underst\xf8tte dataoverf\xf8rselshastigheder fra 800 til 3200 MT/s for b\xe5de DDR3 og DDR4. Det kan evaluere hukommelsesmoduler ved clockhastigheder op til 1600 MHz. Det betyder grundig og p\xe5lidelig testning, der sikrer, at dine enheder pr\xe6sterer optimalt.\\n\\n### Alsidighed\\n\\nAlsidigheden i dette system er en game-changer. Det underst\xf8tter flere hukommelsesstandarder, hvilket g\xf8r det velegnet til en bred vifte af anvendelser—fra forbrugerelektronik til h\xf8jtydende computing. Plus, det er fremtidssikret. N\xe5r nye hukommelsesteknologier opst\xe5r, kan dette system let opgraderes til at underst\xf8tte dem.\\n\\n### Omkostningseffektivitet\\n\\nLad os nu tale om prisen. Til omkring $200.000 USD tilbyder dette system en fremragende investering. Det er overkommeligt nok for sm\xe5 til mellemstore virksomheder, der sikrer topklasse testmuligheder uden at spr\xe6nge budgettet.\\n\\n### Avancerede Funktioner\\n\\nSystemet kommer med avancerede testalgoritmer, herunder en integreret algoritmisk m\xf8nstergenerator (ALPG). Dette sikrer n\xf8jagtig og p\xe5lidelig hukommelsesevaluering, s\xe5 hvert modul opfylder strenge ydeevnestandarder.\\n\\n### Lavt Str\xf8mforbrug\\n\\nHvad der ogs\xe5 er imponerende, er det lave str\xf8mforbrug. Det stemmer overens med de tendenser, der ses i LP-DDR3 og LP-DDR4 hukommelsesteknologier. Ved at operere ved lavere sp\xe6ndinger reducerer det ikke kun energikostnader, men ogs\xe5 termisk output, hvilket g\xf8r det til et milj\xf8venligt valg.\\n\\n## Hvorfor V\xe6lge Zeeis?\\n\\n### Skalerbarhed\\n\\nZeeis\'s system er designet med skalerbarhed i tankerne. N\xe5r nye hukommelsesteknologier opst\xe5r, kan systemet let opgraderes, hvilket sikrer langsigtet brugbarhed og reducerer behovet for hyppige udskiftninger.\\n\\n### Support og Dokumentation\\n\\nEn anden stor fordel er Zeeis\'s omfattende support og dokumentation. Uanset om du er en erfaren professionel eller ny inden for hukommelsestestning, sikrer deres detaljerede vejledninger og responsive kundeservice en gnidningsfri oplevelse.\\n\\n### M\xf8de Markedets Krav\\n\\nMed den voksende eftersp\xf8rgsel efter h\xf8jhastighedshukommelse i alt fra smartphones til datacentre, er det essentielt at have en p\xe5lidelig og omkostningseffektiv hukommelsestestl\xf8sning. Zeeis\'s system opfylder disse krav, hvilket sikrer, at dine produkter er markedsklare og pr\xe6sterer fejlfrit i virkelige applikationer.\\n\\n## Konklusion\\n\\nKort sagt er Zeeis’s Ultra Low Cost DDR3, DDR4, LP-DDR3 & LP-DDR4 Memory Test System en fantastisk mulighed for os, der har brug for p\xe5lidelige, alsidige og overkommelige hukommelsestestl\xf8sninger. Det tilbyder h\xf8j ydeevne til en br\xf8kdel af prisen af andre high-end systemer, hvilket g\xf8r det muligt for virksomheder at opretholde h\xf8je standarder uden at spr\xe6nge budgettet.\\n\\nHvis du er interesseret i at forbedre dine testmuligheder med et system designet til fremtidens hukommelsesteknologi, er du velkommen til at kontakte mig for mere information p\xe5 [i@tanshuai.com](mailto:i@tanshuai.com).\\n\\nGod testning!\\n"},{"lang":"da","group":"blog","slug":"blog/usr-bin-sudo-must-be-owned-by-uid-0-and-have-the-setuid-bit-set-on-ubuntu-20-04","frontmatter":{"title":"/usr/bin/sudo skal ejes af uid 0 og have setuid-bitten sat p\xe5 Ubuntu 20.04","date":"2021-10-08T13:07:25.406Z","draft":false,"author":"Tan Shuai","tags":["Ubuntu","Linux","Sudo"],"categories":["Linux"]},"content":"\\nHvis du st\xf8der p\xe5 fejlmeddelelsen \\"/usr/bin/sudo skal ejes af uid 0 og have setuid-bitten sat\\" p\xe5 Ubuntu 20.04, f\xf8lg disse trin for at l\xf8se problemet.\\n\\n1. Under opstartsprocessen, tryk p\xe5 \'ESC\'-tasten for at f\xe5 adgang til GRUB-menuen.\\n\\n![GRUB-sk\xe6rm](/images/content/wx20211008-210752.png \\"GRUB-sk\xe6rm\\")\\n\\n2. V\xe6lg den f\xf8rste mulighed, “Ubuntu”, og tryk p\xe5 \'e\'-tasten for at redigere opstartsparametrene.\\n\\n![Rediger opstartsparametre](/images/content/wx20211008-210841.png \\"Rediger opstartsparametre\\")\\n\\n3. Tilf\xf8j f\xf8lgende streng til linjen, der starter med \'linux\' for at starte i redningstilstand:\\n\\n```bash\\nsystemd.unit=rescue.target\\n```\\n\\n4. N\xe5r du er i redningstilstand, udf\xf8r f\xf8lgende kommando for at gendanne de korrekte tilladelser og ejerskab for `/usr/bin/sudo`:\\n\\n```bash\\npkexec chmod a=rx,u+ws /usr/bin/sudo\\n```\\n\\nDenne kommando indstiller de n\xf8dvendige tilladelser og sikrer, at `sudo` ejes af root-brugeren med setuid-bitten sat.\\n\\nVed at f\xf8lge disse trin b\xf8r du kunne l\xf8se problemet og gendanne korrekt funktionalitet til `sudo`-kommandoen p\xe5 dit Ubuntu-system.\\n\\n---\\n"},{"lang":"fi","group":"blog","slug":"blog/aws-codecommit-the-githubs-large-file-storage-git-lfs-free-alternative","frontmatter":{"title":"AWS CodeCommit： Ilmainen Vaihtoehto GitHub Large File Storage (Git LFS) -palvelulle","description":"Tutustu siihen, kuinka AWS CodeCommit toimii kustannustehokkaana ja tehokkaana vaihtoehtona GitHubin Large File Storage (Git LFS) -palvelulle. T\xe4m\xe4 artikkeli k\xe4sittelee Git LFS:n rajoituksia, AWS CodeCommitin etuja suurten tiedostojen tallennuksessa ja tarjoaa vaiheittaisen oppaan siirtymisest\xe4 Git LFS:st\xe4 CodeCommitiin. Paranna kehitysprosessiasi AWS:n skaalautuvan ja turvallisen infrastruktuurin avulla.","date":"2022-02-09T00:00:00.000Z","author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["Ohjelmistokehitys"],"draft":false},"content":"\\nAWS CodeCommit tarjoaa vankan vaihtoehdon GitHubin Large File Storage (Git LFS) -palvelulle, tarjoten tehokkaan ratkaisun suurten tiedostojen hallintaan Git-repositoriossasi.\\n\\n## Miksi Sinun Kannattaisi Harkita Uudelleen Git LFS:n K\xe4ytt\xf6\xe4\\n\\nVaikka Git LFS on suosittu valinta suurten tiedostojen k\xe4sittelyyn Git-repositorioissa, sill\xe4 on omat rajoituksensa ja haasteensa. Git LFS vaatii lis\xe4asennuksia ja hallintaa, mik\xe4 voi monimutkaistaa kehitysprosessia. Lis\xe4ksi Git LFS:n tallennus- ja kaistaleveyden kustannukset voivat nousta nopeasti, erityisesti projekteissa, joissa on lukuisia suuria tiedostoja tai laajaa yhteisty\xf6t\xe4.\\n\\n## Miksi GitHubin Large File Storage -Palvelu Ei Ole T\xe4ydellinen\\n\\nGitHubin Large File Storage -palvelu on hy\xf6dyllinen, mutta sill\xe4 on omat haittapuolensa. Ensisijainen huolenaihe on tallennus- ja kaistaleveyden kustannukset, jotka voivat tulla kohtuuttomiksi suuremmissa projekteissa. Lis\xe4ksi Git LFS:n hallinta voi olla hankalaa, sill\xe4 kehitt\xe4jien on asennettava ja konfiguroitava LFS-asiakasohjelma, seurattava tiettyj\xe4 tiedostoja ja k\xe4sitelt\xe4v\xe4 mahdollisia yhdist\xe4miskonflikteja, jotka johtuvat suurten tiedostojen erillisest\xe4 k\xe4sittelyst\xe4 muusta repositoriosta.\\n\\n## Miksi K\xe4ytt\xe4\xe4 AWS CodeCommitia Suurten Tiedostojen Tallentamiseen Gitiss\xe4\\n\\nAWS CodeCommit tarjoaa houkuttelevan vaihtoehdon suurten tiedostojen tallentamiseen Git-repositorioissa ilman Git LFS:n tarvetta. CodeCommit on t\xe4ysin hallittu l\xe4hdekoodinhallintapalvelu, joka integroituu saumattomasti muiden AWS-palveluiden kanssa, tarjoten vankan skaalautuvuuden, turvallisuuden ja kustannustehokkuuden. Hy\xf6dynt\xe4m\xe4ll\xe4 CodeCommitia, kehitt\xe4j\xe4t voivat v\xe4ltt\xe4\xe4 Git LFS:n hallinnan ylim\xe4\xe4r\xe4isen taakan ja hy\xf6ty\xe4 AWS:n vankasta infrastruktuurista ja maksut k\xe4yt\xf6n mukaan -hinnoittelumallista.\\n\\n## Mitk\xe4 Ovat AWS CodeCommitin Rajoitukset Verrattuna GitHubiin\\n\\nHuolimatta eduistaan, AWS CodeCommitilla on joitakin rajoituksia verrattuna GitHubiin. GitHubin laaja yhteis\xf6n tuki, rikas integraatioekosysteemi ja edistyneet ominaisuudet, kuten GitHub Actions ja GitHub Pages, eiv\xe4t v\xe4ltt\xe4m\xe4tt\xe4 ole t\xe4ysin toistettavissa CodeCommitissa. Lis\xe4ksi GitHubin k\xe4ytt\xf6liittym\xe4\xe4n ja yhteisty\xf6ty\xf6kaluihin tottuneet kehitt\xe4j\xe4t saattavat huomata, ett\xe4 siirtyminen CodeCommitiin vaatii jonkin verran sopeutumista.\\n\\n## Kuinka Siirt\xe4\xe4 Git LFS -Repositorio CodeCommitiin\\n\\nGit LFS -repositorioiden siirt\xe4minen CodeCommitiin sis\xe4lt\xe4\xe4 useita vaiheita. Ensin varmista, ett\xe4 kaikki suuret tiedostot ovat oikein seurattuja Git LFS -repositoriossasi. Seuraavaksi kloonaa repositorio ja poista Git LFS -seuranta-asetukset. T\xe4m\xe4n j\xe4lkeen luo uusi repositorio AWS CodeCommitissa ja ty\xf6nn\xe4 paikallinen repositoriosi siihen. Yksityiskohtaiset dokumentaatiot ja skriptit ovat saatavilla t\xe4m\xe4n prosessin sujuvoittamiseksi, varmistaen saumattoman siirtym\xe4n ilman datan menetyst\xe4 tai h\xe4iri\xf6it\xe4.\\n\\n## Parempi Ratkaisu\\n\\nJoukkueille ja projekteille, jotka ovat vahvasti riippuvaisia Git LFS:st\xe4, AWS CodeCommitin tutkiminen vaihtoehtona voi tarjota merkitt\xe4vi\xe4 etuja. CodeCommitin saumaton integrointi AWS-ekosysteemiin, yhdistettyn\xe4 sen kustannustehokkuuteen ja skaalautuvuuteen, tekee siit\xe4 houkuttelevan vaihtoehdon suurten tiedostojen hallintaan Git-repositorioissa. V\xe4hent\xe4m\xe4ll\xe4 Git LFS:\xe4\xe4n liittyvi\xe4 haasteita, CodeCommit antaa kehitystiimeille mahdollisuuden keskitty\xe4 koodaukseen ja yhteisty\xf6h\xf6n, edist\xe4en tuottavuutta ja innovointia.\\n\\nLopuksi, AWS CodeCommit tarjoaa elinkelpoisen, kustannustehokkaan ja tehokkaan vaihtoehdon GitHubin Large File Storage -palvelulle. Hy\xf6dynt\xe4m\xe4ll\xe4 AWS:n vankkaa infrastruktuuria, kehitt\xe4j\xe4t voivat hallita suuria tiedostoja Git-repositorioissa vaivattomasti, optimoiden ty\xf6nkulkujaan ja v\xe4hent\xe4en yleiskustannuksia.\\n"},{"lang":"fi","group":"blog","slug":"blog/check-voltage-current-on-macos-for-power-adapter","frontmatter":{"title":"Tarkista J\xe4nnite ja Virta MacOS：lla Virtal\xe4hteelle","meta_title":"Tarkista J\xe4nnite ja Virta MacOS:lla Virtal\xe4hteelle","date":"2022-02-14T00:00:00.000Z","author":"Tan Shuai","tags":["MacOS","Virtal\xe4hde","J\xe4nnite","Virta"],"categories":["MacOS"],"draft":false},"content":"\\nKun k\xe4yt\xe4t MacBookia, saatat haluta tarkistaa virtal\xe4hteen j\xe4nnitteen ja virran. T\xe4ss\xe4 on yksinkertainen tapa tarkistaa virtal\xe4hteen j\xe4nnite ja virta macOS:ssa.\\n\\nAvaa Terminal.app ja kirjoita komento:\\n\\n`ioreg -l -n AppleSmartBattery -r |grep AppleRawAdapterDetails`\\n\\nSaat seuraavat tiedot, jotka sis\xe4lt\xe4v\xe4t virran ja j\xe4nnitteen:\\n\\n```json\\n\\"AppleRawAdapterDetails\\" = ({\\"IsWireless\\"=No,\\"AdapterID\\"=0,\\"FamilyCode\\"=18446744073172697098,\\"Watts\\"=89,**\\"Current\\"=4450**,\\"PMUConfiguration\\"=4448,**\\"Voltage\\"=20000**})\\n"},{"lang":"fi","group":"blog","slug":"blog/convert-markdown-academic-paper-pdf-macos","frontmatter":{"title":"Muunna nopeasti Markdown akateemiseen tyyliin PDF-muotoon macOS：ssa","meta_title":"Muunna Markdown akateemiseen tyyliin PDF-muotoon macOS:ssa Pandocilla","description":"Opi, kuinka muuntaa Markdown-dokumentit akateemiseen tyyliin PDF-tiedostoiksi macOS:ssa k\xe4ytt\xe4m\xe4ll\xe4 Pandocia ja BasicTeXi\xe4. T\xe4m\xe4 nopea ja yksinkertainen menetelm\xe4 on t\xe4ydellinen ammattilaistason PDF-tiedostojen luomiseen akateemisia papereita varten.","date":"2022-03-03T00:00:00.000Z","categories":["Ohjelmistokehitys"],"author":"Tan Shuai","tags":["Pandoc","LaTeX","PDF","Paperi","Markdown","macOS"],"draft":false},"content":"\\nT\xe4ss\xe4 oppaassa kerron, kuinka muunnan Markdown-asiakirjat akateemisen tyylisiksi PDF-tiedostoiksi macOS:ss\xe4 k\xe4ytt\xe4en Pandocia ja BasicTeXi\xe4. T\xe4m\xe4 menetelm\xe4 on nopea ja yksinkertainen, t\xe4ydellinen silloin, kun sinun t\xe4ytyy luoda ammattimaisen n\xe4k\xf6isi\xe4 PDF-tiedostoja akateemisia papereitasi varten.\\n\\n### Vaihe 1: Asenna Pandoc ja BasicTeX\\n\\nEnsiksi sinun t\xe4ytyy asentaa Pandoc ja BasicTeX macOS-j\xe4rjestelm\xe4\xe4si. N\xe4in tein sen:\\n\\n1. **Asenna Pandoc**: Avaa Terminal ja kirjoita seuraava komento asentaaksesi Pandocin:\\n\\n   ```bash\\n   brew install pandoc\\n   ```\\n\\n2. **Asenna BasicTeX**: Koska MacTeX on melko suuri, valitsin pienemm\xe4n BasicTeX-paketin tilan s\xe4\xe4st\xe4miseksi. Suorita t\xe4m\xe4 komento:\\n\\n   ```bash\\n   brew install --cask basictex\\n   ```\\n\\n3. **Asenna yleiset LaTeX-paketit**: Varmistaaksesi, ett\xe4 sinulla on tarvittavat paketit PDF-tiedostojen luomiseen, suorita n\xe4m\xe4 komennot:\\n   ```bash\\n   sudo tlmgr update --self\\n   sudo tlmgr install collection-basic collection-latex collection-latexrecommended collection-fontsrecommended\\n   ```\\n\\n### Vaihe 2: Valmistele Markdown-tiedostosi\\n\\nSeuraavaksi luo Markdown-tiedostosi (esim. `paper.md`). N\xe4in asetin tiedostoni, mukaan lukien otsikko, tekij\xe4, p\xe4iv\xe4m\xe4\xe4r\xe4 ja yhteystiedot:\\n\\n```markdown\\n---\\ntitle: \\"Your Paper Title\\"\\nsubtitle: \\"Optional Subtitle\\"\\ndate: \\\\today\\n\\nauthor: |\\n  | Your Name\\n  | your-email@tanshuai.com\\n  | www.tanshuai.com\\n---\\n\\n# Abstract\\n\\nYour abstract here.\\n\\n# Introduction\\n\\nYour introduction here.\\n\\n# Methodology\\n\\nYour methodology here.\\n\\n# Results\\n\\nYour results here.\\n\\n# Conclusion\\n\\nYour conclusion here. \\n```\\n\\n### Vaihe 3: Muunna Markdown PDF:ksi Pandocin avulla\\n\\nNyt voit muuntaa Markdown-tiedostosi PDF:ksi. K\xe4ytin seuraavaa komentoa Terminalissa:\\n\\n```bash\\npandoc paper.md -o paper.pdf --pdf-engine=xelatex\\n```\\n\\nT\xe4m\xe4 komento k\xe4ytt\xe4\xe4 Pandocin oletus LaTeX-mallia muuntaakseen Markdown-tiedoston akateemisen tyyliseksi PDF-tiedostoksi, mukaan lukien tekij\xe4n yhteystiedot heid\xe4n nimens\xe4 alla.\\n\\n### Lis\xe4vinkit\\n\\n- **Mukautettu LaTeX-malli**: Jos tarvitset edistyneemp\xe4\xe4 muotoilua tai erityisi\xe4 tyylej\xe4, voit luoda tai ladata mukautetun LaTeX-mallin ja k\xe4ytt\xe4\xe4 sit\xe4 Pandocin kanssa:\\n\\n  ```bash\\n  pandoc paper.md -o paper.pdf --pdf-engine=xelatex --template=your-template.tex\\n  ```\\n\\n- **Enemm\xe4n metatietoja**: Voit lis\xe4t\xe4 ylim\xe4\xe4r\xe4ist\xe4 tietoa YAML-metatietojen otsikkoon, kuten abstraktin tai avainsanoja, ja k\xe4ytt\xe4\xe4 n\xe4it\xe4 mukautetuissa malleissa.\\n\\n### Yhteenveto\\n\\nN\xe4it\xe4 vaiheita seuraamalla voit helposti muuntaa Markdown-asiakirjat akateemisen tyylisiksi PDF-tiedostoiksi macOS:ss\xe4. Pandocin ja BasicTeXin k\xe4ytt\xe4minen tekee t\xe4st\xe4 prosessista nopean ja tehokkaan, t\xe4ydellinen silloin, kun sinun t\xe4ytyy luoda ammattimaisia PDF-dokumentteja. Olitpa sitten valmistelemassa akateemisia papereita, teknisi\xe4 raportteja tai muita muodollisia asiakirjoja, t\xe4m\xe4 menetelm\xe4 toimii erinomaisesti. Yhteystietojen sis\xe4llytt\xe4minen metatietojen otsikkoon lis\xe4\xe4 ammattimaisen kosketuksen asiakirjoihisi.\\n\\nToivottavasti t\xe4m\xe4 opas on hy\xf6dyllinen! Jos sinulla on kysytt\xe4v\xe4\xe4 tai kohtaat ongelmia, ota rohkeasti yhteytt\xe4. Hyvi\xe4 kirjoitushetki\xe4!\\n"},{"lang":"fi","group":"blog","slug":"blog/electron-build-tools-error-error-failed-to-run-choco-install-pywin32-yes","frontmatter":{"title":"Electron Build Tools `ERROR Error： Failed to run \\"choco install pywin32\\n  --yes\\"`","date":"2021-09-08T00:00:00.000Z","draft":false,"author":"Tan Shuai","tags":["Elektroni","Rakennusty\xf6kalut","PyWin32","Chocolatey","Win32"],"categories":["Ohjelmistokehitys"]},"content":"\\nKun ty\xf6skentelet Electron Build Toolsin kanssa, saatat kohdata virheen, joka liittyy pywin32:n asentamiseen Chocolateyn kautta. T\xe4m\xe4 voi olla turhauttavaa, varsinkin kun se on v\xe4ltt\xe4m\xe4t\xf6n riippuvuus projektillesi. Alla on yksityiskohtainen selitys ongelmasta ja mahdolliset toimenpiteet sen ratkaisemiseksi.\\n\\n### Virhe\\n\\nKun alustat Electron-projektia Electron Build Toolsin avulla, saatat n\xe4hd\xe4 seuraavan virheilmoituksen:\\n\\n```bash\\nE:\\\\\\\\>e init main-testing -i testing --root=e:/src/electron\\nWARN Korjattavissa oleva virhe on tapahtunut\\n--> Pakollista riippuvuutta \\"pywin32\\" ei l\xf6ytynyt, se on todenn\xe4k\xf6isesti asennettava.\\nHaluatko, ett\xe4 build-tools yritt\xe4\xe4 korjata t\xe4m\xe4n puolestasi? [y/n]: y\\n\\nSuoritetaan \\"choco install pywin32 --yes\\"\\nERROR Error: Failed to run \\"choco install pywin32 --yes\\"\\n    at spawnSyncWithLog (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:11:11)\\n    at fix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:39:9)\\n    at maybeAutoFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\maybe-auto-fix.js:13:3)\\n    at whichAndFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\which.js:10:5)\\n    at checkPlatformDependencies (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:61:7)\\n    at Object.<anonymous> (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\e-init.js:165:3)\\n    at Module._compile (internal/modules/cjs/loader.js:1072:14)\\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1101:10)\\n    at Module.load (internal/modules/cjs/loader.js:937:32)\\n    at Function.Module._load (internal/modules/cjs/loader.js:778:12)\\n```\\n\\nT\xe4m\xe4 virhe tapahtuu yleens\xe4, koska pywin32-paketin asennusskripti ei l\xf6yd\xe4 tarvittavia tiedostoja et\xe4palvelimelta. T\xe4m\xe4 johtaa 404-virheeseen, mik\xe4 tarkoittaa, ett\xe4 tiedostoa ei ole saatavilla annetussa URL-osoitteessa.\\n\\n### Virheen ymm\xe4rt\xe4minen\\n\\nVirheilmoituksen keskeinen osa on:\\n\\n```bash\\nERROR: The remote file either doesn\'t exist, is unauthorized, or is forbidden for url \'http://sourceforge.net/projects/pywin32/files/pywin32/Build%20219/pywin32-219.win-amd64-py3.9.exe/download\'. Exception calling \\"GetResponse\\" with \\"0\\" argument(s): \\"The remote server returned an error: (404) Not Found.\\"\\n```\\n\\nT\xe4m\xe4 osoittaa, ett\xe4 pywin32:n lataus-URL ei ole en\xe4\xe4 voimassa, mik\xe4 tarkoittaa, ett\xe4 Chocolatey ei pysty hakemaan tarvittavia asennustiedostoja.\\n\\n### Vianetsint\xe4vaiheet\\n\\nT\xe4ss\xe4 on muutamia vaiheita, joita voit kokeilla ratkaistaksesi t\xe4m\xe4n ongelman:\\n\\n#### 1. Tarkista Chocolateyn asennus\\n\\nVarmista, ett\xe4 Chocolatey on asennettu oikein ja p\xe4ivitetty uusimpaan versioon. Voit tarkistaa Chocolateyn version komennolla:\\n\\n```bash\\nchoco --version\\n```\\n\\nP\xe4ivitt\xe4\xe4ksesi Chocolateyn, k\xe4yt\xe4:\\n\\n```bash\\nchoco upgrade chocolatey\\n```\\n\\n#### 2. Asenna pywin32 manuaalisesti\\n\\nKoska automaattinen asennus ep\xe4onnistuu, kokeile asentaa pywin32 manuaalisesti. Voit ladata sopivan version viralliselta [pywin32 GitHub-julkaisusivulta](https://github.com/mhammond/pywin32/releases) ja asentaa sen manuaalisesti.\\n\\n#### 3. Muokkaa asennusskripti\xe4\\n\\nJos sinulla on p\xe4\xe4sy Electron Build Toolsin skriptiin, voit muokata sit\xe4 osoittamaan voimassa olevaan URL-osoitteeseen pywin32:lle tai k\xe4sittelem\xe4\xe4n manuaalista asennusprosessia.\\n\\n#### 4. K\xe4yt\xe4 vaihtoehtoista pakettienhallintaohjelmaa\\n\\nJos Chocolatey jatkaa ep\xe4onnistumista, harkitse vaihtoehtoisen pakettienhallintaohjelman, kuten pip Python-paketeille, k\xe4ytt\xe4mist\xe4:\\n\\n```bash\\npip install pywin32\\n```\\n\\n### Esimerkki pywin32:n manuaalisesta asennuksesta\\n\\n1. Lataa sopiva pywin32-asennusohjelma [virallisista GitHub-julkaisuista](https://github.com/mhammond/pywin32/releases).\\n2. Suorita asennusohjelma ja seuraa asennusohjeita.\\n3. Varmista asennus suorittamalla yksinkertainen Python-skripti, joka tuo pywin32:n:\\n\\n```python\\nimport win32api\\nprint(win32api.GetVersionEx())\\n```\\n\\n\\"Failed to run `choco install pywin32 --yes`\\" -virheen kohtaaminen voi olla este kehitysprosessissasi. Ymm\xe4rt\xe4m\xe4ll\xe4 syy ja seuraamalla yll\xe4 mainittuja vaiheita, voit voittaa t\xe4m\xe4n ongelman ja jatkaa Electron-projektisi asennusta.\\n"},{"lang":"fi","group":"blog","slug":"blog/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining","frontmatter":{"title":"T\xe4ysin mukautetun ASIC-suunnittelun salaisuudet Bitcoin- ja kryptovaluuttakaivostoimintaan","date":"2022-05-30T00:00:00.000Z","update":"2024-08-02T00:00:00.000Z","categories":["Puolijohteet","Bitcoin","Kryptovaluutta","Lohkoketju"],"author":"Tan Shuai","tags":["ASIC","Bitcoin","Kaivostoiminta","BTC"],"draft":false,"contact":"Tan Shuai | tanshuai@btc.com | tanshuai.com"},"content":"\\nTan Shuai  \\n[tanshuai@btc.com](mailto:tanshuai@btc.com)  \\n[tanshuai.com](https://tanshuai.com)\\n\\n---\\n\\n## Tiivistelm\xe4\\n\\nKilpailullisessa kryptovaluutan louhinnan maailmassa energiatehokkuus, hashrate-suorituskyky ja luotettavuus ovat ensiarvoisen t\xe4rkeit\xe4. T\xe4m\xe4 artikkeli perehtyy huippuluokan t\xe4ysin r\xe4\xe4t\xe4l\xf6idyn ASIC (sovelluskohtainen integroitu piiri) -suunnitteluun, paljastaen alan salaisuudet ja asiantuntijoiden menetelm\xe4t, jotka edist\xe4v\xe4t korkean suorituskyvyn Bitcoin- ja kryptovaluutan louhintaa. Yhden johtavan ASIC-louhintayhti\xf6n teknologi-asiantuntijan kirjoittama artikkeli hy\xf6dynt\xe4\xe4 edistyneit\xe4 suunnittelutekniikoita, tarkkaa fyysist\xe4 asettelua ja kattavia verifiointiprosesseja, esittelem\xe4ll\xe4 t\xe4ysin r\xe4\xe4t\xe4l\xf6ityjen ASIC-piirien poikkeuksellisia kykyj\xe4 maksimoida louhintatehokkuus ja kannattavuus.\\n\\n## Johdanto\\n\\nKryptovaluutan louhinnan, erityisesti Bitcoin-louhinnan, kehitys on siirtynyt yleisk\xe4ytt\xf6isist\xe4 suorittimista (CPU), FPGA:ista ja grafiikkasuorittimista (GPU) erikoistuneisiin ASIC-piireihin. N\xe4m\xe4 ASIC-piirit tarjoavat vertaansa vailla olevan suorituskyvyn ja energiatehokkuuden. T\xe4ysin r\xe4\xe4t\xe4l\xf6ity ASIC-suunnittelu edustaa t\xe4m\xe4n kehityksen huippua, mahdollistaen r\xe4\xe4t\xe4l\xf6idyt ratkaisut, jotka vastaavat louhintatoimintojen erityisvaatimuksia.\\n\\nSuurin osa olemassa olevasta kirjallisuudesta kryptovaluutan louhintaan tarkoitetusta ASIC-suunnittelusta on per\xe4isin akateemisista tai ei-louhintayrityksist\xe4, joilla ei usein ole k\xe4yt\xe4nn\xf6n sovellettavuutta. T\xe4h\xe4n menness\xe4 vain muutama yritys, p\xe4\xe4asiassa kiinalaiset (esim. MicroBT, Bitmain), ovat onnistuneet kehitt\xe4m\xe4\xe4n markkinoitavia Bitcoin-louhinnan ASIC-piirej\xe4. T\xe4m\xe4 artikkeli pyrkii t\xe4ytt\xe4m\xe4\xe4n t\xe4m\xe4n aukon tarjoamalla n\xe4kemyksi\xe4, jotka perustuvat todelliseen teollisuuden k\xe4yt\xe4nt\xf6\xf6n, tarjoten n\xe4k\xf6kulman, joka on juurtunut louhintasektorin todellisuuteen.\\n\\nTeknologi-teollisuudessa yli kymmenen vuoden kokemuksen omaavana ammattilaisena t\xe4m\xe4n artikkelin kirjoittaja on kehitt\xe4nyt maailman huippuluokan Bitcoin ASIC Miner (WhatsMiner), LTC/DOGE- ja ETH-louhijat, ja h\xe4n on ollut avainasemassa yrityksiss\xe4 kuten MicroBT, BTC.COM ja muissa julkisissa fabless-yrityksiss\xe4. H\xe4n on toiminut keskeisiss\xe4 teht\xe4viss\xe4 NASDAQ-, HKSE- ja NYSE-listatuissa yrityksiss\xe4. Laaja kokemus kumppanuuksien solmimisessa TSMC:n, Texas Instrumentsin, ARM:n ja Intelin kanssa tuo runsaasti tietoa ja k\xe4yt\xe4nn\xf6n asiantuntemusta Bitcoinin ja kryptovaluutan louhintaan tarkoitettujen r\xe4\xe4t\xe4l\xf6ityjen ASIC-piirien suunnitteluun.\\n\\n## Metodologia ja Suunnitteluprosessi\\n\\n### Suunnittelu Filosofia\\n\\nL\xe4hestymistapamme t\xe4ysin r\xe4\xe4t\xe4l\xf6ityyn ASIC-suunnitteluun perustuu PPA:n (Power, Performance, and Area) maksimoimiseen, erityisesti matalaj\xe4nnitteisiss\xe4 k\xe4ytt\xf6olosuhteissa. T\xe4m\xe4 osio kuvaa suunnittelufilosofiamme ja -menetelm\xe4mme:\\n\\n1. **Pipelinerakenne**: Hy\xf6dynt\xe4m\xe4ll\xe4 pipelinerakenteiden luontaisia etuja louhinta-algoritmeissa, joita luonnehtivat rekisterit ja kombinaatiologian vaiheet. Pipelinerakenteen avulla voimme tehokkaasti k\xe4sitell\xe4 kryptovaluutan louhinnan vaatimukset.\\n2. **Manuaalinen Netlist ja Sijoittelu**: Yksityiskohtainen skriptaus netlistin luomiseksi ja solujen manuaalinen sijoittelu kriittisten polkujen optimoimiseksi. T\xe4m\xe4 mahdollistaa tarkan ajoituksen hallinnan ja v\xe4hent\xe4\xe4 oheisvaikutuksia.\\n3. **R\xe4\xe4t\xe4l\xf6idyt Solukirjastot**: Kehitet\xe4\xe4n erikoistuneita soluja, joilla on optimoitu transistorim\xe4\xe4r\xe4 ja dynaamiset virrans\xe4\xe4st\xf6ominaisuudet. R\xe4\xe4t\xe4l\xf6idyt solut on suunniteltu toimimaan mahdollisimman alhaisilla j\xe4nnitteill\xe4, varmistaen minimaalisen virrankulutuksen.\\n\\n### Saavuttaa PPA-hy\xf6tyj\xe4\\n\\nYksityiskohtaiset strategiat PPA-hy\xf6tyjen saavuttamiseksi r\xe4\xe4t\xe4l\xf6idyn suunnittelun avulla:\\n\\n1. **Mukautettu rekisterisuunnittelu**: Monibittisten rekisterien ja l\xe4pp\xe4pohjaisten suunnitelmien hy\xf6dynt\xe4minen kellotehon v\xe4hent\xe4miseksi ja ajoituksen lainaamisen parantamiseksi. Monibittiset rekisterit minimoivat kellopuun tehonkulutuksen ja pienent\xe4v\xe4t kokonaispinta-alaa.\\n2. **Manuaalinen sijoittelu**: Johtimien pituuden v\xe4hent\xe4minen ja asetusaikojen ja pitelyaikojen tasapainottaminen suorituskyvyn parantamiseksi. Manuaalinen sijoittelu mahdollistaa paremman hallinnan liit\xe4nt\xe4viiveiden ja h\xe4iri\xf6iden suhteen, parantaen signaalin eheytt\xe4 ja v\xe4hent\xe4en tehonkulutusta.\\n3. **Optimoitu solusuunnittelu**: Mukautetut solut on suunniteltu toimimaan alhaisemmilla j\xe4nnitteill\xe4, mik\xe4 minimoi dynaamisen tehonkulutuksen ja maksimoi tehokkuuden. Mukauttamalla solujen suunnittelua kaivosalgoritmien erityistarpeisiin voidaan saavuttaa merkitt\xe4vi\xe4 parannuksia suorituskyvyss\xe4.\\n\\n### Luotettavuus alhaisilla j\xe4nnitteill\xe4\\n\\nR\xe4\xe4t\xe4l\xf6idyn ajoituslogiikan luotettavuuden varmistaminen alhaisilla j\xe4nnitteill\xe4 sis\xe4lt\xe4\xe4:\\n\\n1. **Tarkka simulointi**: Piiritason simulaatiot mukautettujen solujen k\xe4ytt\xe4ytymisen vahvistamiseksi tietyiss\xe4 olosuhteissa. Ty\xf6kaluja, kuten SPICE, k\xe4ytet\xe4\xe4n yksityiskohtaisiin s\xe4hk\xf6isiin simulaatioihin, jotta solut toimivat oikein kaikissa PVT (Prosessi, J\xe4nnite, L\xe4mp\xf6tila) kulmissa.\\n2. **Johdonmukaisuus sijoittelussa**: Manuaalinen sijoittelu yhten\xe4isyyden ja vaihtelun v\xe4hent\xe4miseksi. Hallitsemalla fyysist\xe4 asettelua voimme minimoida prosessivaihtelujen vaikutuksen ja varmistaa johdonmukaisen suorituskyvyn.\\n3. **Tarkka PVT-kalibrointi**: Vahvistus prosessin, j\xe4nnitteen ja l\xe4mp\xf6tilan vaihteluita vastaan. Laajat testit ja kalibroinnit suoritetaan suunnittelun luotettavuuden varmistamiseksi eri k\xe4ytt\xf6olosuhteissa.\\n\\n## Tapaustutkimukset ja tulokset\\n\\nEsittelemme reaalimaailman dataa ja tapaustutkimuksia t\xe4ysmaskin valmistuksista:\\n\\n| Projekti | Prosessisolmu | J\xe4nnite/Tehokkuus | Algoritmi |\\n| -------- | ------------- | ----------------- | --------- |\\n| SC       | TSMC 28nm     | 0.45V, 257J/T     | Blake2b   |\\n| DCR      | TSMC 28nm     | 0.45V, 150J/T     | Blake256  |\\n| DASH     | TSMC 16nm     | 0.38V, 6.2J/G     | X11       |\\n| BTC      | TSMC 16nm     | 0.38V, 65J/T      | SHA-256d  |\\n| BTC      | TSMC 7nm      | 0.30V, 37J/T      | SHA-256d  |\\n| BTC      | Samsung 8nm   | 0.31V, 45J/T      | SHA-256d  |\\n| BTC      | SMIC N+1      | 0.30V, 35J/T      | SHA-256d  |\\n\\nN\xe4m\xe4 tulokset osoittavat merkitt\xe4v\xe4t parannukset tehokkuudessa ja suorituskyvyss\xe4, jotka ovat saavutettavissa r\xe4\xe4t\xe4l\xf6idyn suunnittelumme avulla.\\n\\n## Integraatio ja verifiointi\\n\\n### Sekasolujen hyv\xe4ksynt\xe4\\n\\n- **Mukautettujen solujen integrointi**: Mukautetut solut integroidaan standardisolujen kanssa TSMC:lt\xe4 ja muilta valimoilta, varmistaen yhteensopivuuden ja suorituskyvyn. Mukautetut solut karakterisoidaan ja validoidaan vastaamaan standardisolukirjastojen vaatimuksia, mahdollistamalla saumattoman integroinnin.\\n- **Hyv\xe4ksynt\xe4strategiat**: Strategiat saumattoman yhteensopivuuden ja suorituskyvyn varmistamiseksi sis\xe4lt\xe4v\xe4t yksityiskohtaiset DRC (Design Rule Check) ja LVS (Layout Versus Schematic) tarkistukset sek\xe4 ajoitus- ja tehonalyysit teollisuuden standardien EDA (Electronic Design Automation) ty\xf6kalujen avulla.\\n\\n### Digitaalinen ja analoginen yhteissuunnittelu\\n\\n- **Integrointitekniikat**: Digitaalisten ja analogisten komponenttien integrointi optimoimaan koko sirun suorituskyky\xe4. Integroinnin ja toiminnallisuuden varmistamiseen k\xe4ytet\xe4\xe4n tekniikoita, kuten sekasignaalivarmennusta ja yhteissimulaatiota.\\n- **Varmennusmetodologiat**: Metodologiat, joilla varmistetaan kest\xe4vyys eri k\xe4ytt\xf6olosuhteissa, sis\xe4lt\xe4v\xe4t nurkka-analyysin, Monte Carlo -simulaatiot ja luotettavuusvarmennuksen ik\xe4\xe4ntymisen ja elektromigraation huomioimiseksi.\\n\\n## Johtop\xe4\xe4t\xf6s\\n\\nT\xe4ysin mukautettu ASIC-suunnittelu tarjoaa merkitt\xe4vi\xe4 etuja Bitcoinin ja kryptovaluuttojen louhintaan, tarjoten vertaansa vailla olevaa suorituskyky\xe4, energiatehokkuutta ja luotettavuutta. Paljastamalla huippuluokan mukautetun ASIC-suunnittelun salaisuudet, t\xe4m\xe4 artikkeli korostaa metodologioita ja innovaatioita, jotka erottavat alan johtajat. Kryptovaluuttojen louhinnan kehittyess\xe4 mukautetut ASICit tulevat olemaan ratkaisevassa asemassa seuraavan sukupolven korkean tehokkuuden ja suorituskyvyn louhintalaitteiston ajureina.\\n\\n[Artikkelin PDF-versio](/docs/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining.pdf)\\n"},{"lang":"fi","group":"blog","slug":"blog/get-current-commit-id-of-git-and-update-to-package-json","frontmatter":{"title":"Hanki Gitin nykyinen sitoumustunnus ja p\xe4ivit\xe4 package.json-tiedostoon","date":"2021-08-21T09:19:58.875Z","draft":false,"author":"Tan Shuai","tags":["Git","Package.json","Node.js"],"categories":["Ohjelmistokehitys"]},"content":"\\nKun kehit\xe4t Node.js-projektia, saatat haluta seurata Git-repositoriosi nykyist\xe4 commit-tunnusta. T\xe4m\xe4 tieto voi olla hy\xf6dyllinen virheenkorjauksessa, versioinnissa tai k\xe4ytt\xf6\xf6notossa. Yksi tapa saavuttaa t\xe4m\xe4 on p\xe4ivitt\xe4\xe4 `package.json` -tiedosto nykyisell\xe4 commit-tunnuksella rakennusprosessin aikana. T\xe4m\xe4 artikkeli opastaa sinua vaiheiden l\xe4pi saadaksesi Gitin nykyisen commit-tunnuksen ja p\xe4ivitt\xe4\xe4ksesi sen `package.json` -tiedostoon k\xe4ytt\xe4m\xe4ll\xe4 Node.js:\xe4\xe4.\\n\\n```bash\\n\\"predev\\": \\"node ./node_modules/json/lib/json.js -I -f package.json -e \\\\\\\\\\\\\\"this.commit=\'$(git rev-parse --short HEAD)\'\\\\\\\\\\\\\\"\\",\\n"},{"lang":"fi","group":"blog","slug":"blog/migrate-a-github-lfs-git-large-file-storage-repository-to-aws-codecommit","frontmatter":{"title":"Siirr\xe4 GitHub LFS (Git Large File Storage) -varasto AWS CodeCommitiin","date":"2022-02-09T09:36:57.481Z","draft":false,"author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["Ohjelmistokehitys"]},"content":"\\n\xc4skett\xe4in siirsin yhden GitHub-repositorioistani, joka k\xe4ytt\xe4\xe4 Git Large File Storagea (LFS), AWS CodeCommitiin. Ajattelin jakaa prosessin kanssasi, jos aiot tehd\xe4 jotain vastaavaa. T\xe4ss\xe4 on vaiheittainen opas kokemukseni perusteella.\\n\\n## Esivaatimukset\\n\\nEnnen kuin aloitamme, varmista, ett\xe4 sinulla on n\xe4m\xe4 ty\xf6kalut asennettuna:\\n\\n- Git\\n- Git LFS\\n- AWS CLI\\n\\n## Vaiheittainen opas\\n\\n### 1. Kloonaa repositorio\\n\\nEnsin, kloonaa GitHub-repositoriosi k\xe4ytt\xe4m\xe4ll\xe4 `--mirror`-valintaa. T\xe4m\xe4 luo paljaan kloonin repositoriosta, mukaan lukien kaikki haarat ja tunnisteet.\\n\\n```zsh\\ngit clone --mirror https://github.com/tanshuai/designs.git designs\\n```\\n\\n### 2. Varmista LFS-tiedostot\\n\\nSeuraavaksi luettele kaikki Git LFS:n hallitsemat tiedostot varmistaaksesi, ett\xe4 kaikki on paikallaan.\\n\\n```zsh\\ngit lfs ls-files\\n```\\n\\nSinun pit\xe4isi n\xe4hd\xe4 jotain t\xe4llaista:\\n\\n```\\ncadfa0bc9e * Brochure-Trifold-Draft.ai\\naf9b8b8a1c * Brochure-Trifold-English.ai\\n27bb5f4e61 * Brochure-Trifold.ai\\n```\\n\\n### 3. Siirr\xe4 LFS-tiedostot\\n\\nNyt vie LFS-tiedostot. T\xe4m\xe4 vaihe varmistaa, ett\xe4 ne ovat osa repositoriosi historiaa.\\n\\n```zsh\\ngit lfs migrate export --include=\\"*.ai\\" --everything\\n```\\n\\nN\xe4et joitain edistymisviestej\xe4, kuten n\xe4m\xe4:\\n\\n```\\nmigrate: Sorting commits: ..., done.\\nmigrate: Rewriting commits: 100% (20/20), done.\\nmaster    98a3c48d85... -> 82f8873b41...\\nmigrate: Updating refs: ..., done.\\nmigrate: checkout: ..., done.\\nprune: 3 local object(s), 0 retained, done.\\ncadfa0bc9e... (133 MB)\\n27bb5f4e61... (131 MB)\\naf9b8b8a1c... (130 MB), done.\\nprune: Deleting objects: 100% (3/3), done.\\n```\\n\\n### 4. Puhdista LFS\\n\\nPoista Git LFS:n seurantatiedot ja asenna Git LFS uudelleen.\\n\\n```zsh\\ngit lfs ls-files\\ngit rm .gitattributes -f\\ngit lfs uninstall\\n```\\n\\n### 5. Ty\xf6nn\xe4 AWS CodeCommitiin\\n\\nLopuksi, ty\xf6nn\xe4 repositoriosi AWS CodeCommitiin.\\n\\n```zsh\\ngit push https://git-codecommit.us-east-2.amazonaws.com/v1/repos/designs --all\\n```\\n\\nSiin\xe4 kaikki! N\xe4it\xe4 ohjeita seuraamalla siirsin onnistuneesti GitHub LFS -repositoriosi AWS CodeCommitiin. Suuret tiedostot ja repositorion historia s\xe4ilyiv\xe4t t\xe4ydellisesti.\\n\\n## Yhteenveto\\n\\nGitHub-repositorion, joka k\xe4ytt\xe4\xe4 Git LFS:\xe4\xe4, siirt\xe4minen AWS CodeCommitiin on melko suoraviivaista, jos seuraat oikeita vaiheita. Jos sinulla on kysytt\xe4v\xe4\xe4 tai kohtaat ongelmia, [AWS CodeCommit -dokumentaatio](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) ja [Git LFS -dokumentaatio](https://git-lfs.github.com/) ovat hyvi\xe4 resursseja.\\n\\nToivottavasti t\xe4m\xe4 opas on sinulle hy\xf6dyllinen. Iloista koodausta!\\n"},{"lang":"fi","group":"blog","slug":"blog/reset-restore-all-subdirectories-of-git","frontmatter":{"title":"Palauta kaikki Gitin alihakemistot","date":"2021-09-22T08:33:49.201Z","draft":false,"author":"Tan Shuai","tags":["Git","Versionohjaus"],"categories":["Ohjelmistokehitys"]},"content":"\\n\\\\nGit-repositorion tehokas hallinta vaatii usein alihakemistojen nollaamista tai palauttamista puhtaan ja toimivan koodikannan yll\xe4pit\xe4miseksi. T\xe4m\xe4 opas tarjoaa tiiviin, vaiheittaisen l\xe4hestymistavan kaikkien alihakemistojen nollaamiseen tai palauttamiseen Git-repositoriossa.\\n\\n## Alihakemistojen nollaaminen\\n\\nSeuraava Git-komento poistaa kaikki seurannasta poistetut tiedostot ja hakemistot repositoriosta. T\xe4m\xe4 on hy\xf6dyllist\xe4 tarpeettomien tiedostojen siivoamiseen ennen nollausta tai palautusta.\\n\\n```bash\\ngit clean -xfdf -- .\\n```\\n\\n### Komennon erittely:\\n\\n- `-x`: Poistaa kaikki seurannasta poistetut tiedostot, mukaan lukien `.gitignore`-tiedoston ohittamat tiedostot.\\n- `-f`: Pakottaa tiedostojen poistamisen.\\n- `-d`: Poistaa seurannasta poistetut hakemistot.\\n- `-- .`: Soveltaa komentoa nykyiseen hakemistoon ja kaikkiin alihakemistoihin.\\n\\n## Alihakemistojen palauttaminen\\n\\nPalauttaaksesi kaikki tiedostot repositoriossa niiden viimeiseen commit-tilaan, k\xe4yt\xe4 seuraavaa komentoa:\\n\\n```bash\\ngit checkout {HEAD TAI HAARA} -- .\\n```\\n\\n### Komennon erittely:\\n\\n- `{HEAD TAI HAARA}`: Korvaa `HEAD` viimeiseen commit-tilaan palauttamiseksi tai m\xe4\xe4rit\xe4 haara palauttamiseksi tiettyyn haaraan.\\n- `-- .`: Soveltaa komentoa nykyiseen hakemistoon ja kaikkiin alihakemistoihin.\\n\\nN\xe4it\xe4 komentoja k\xe4ytt\xe4m\xe4ll\xe4 voit varmistaa, ett\xe4 repositoriosi on vapaa ei-toivotuista tiedostoista ja ett\xe4 kaikki tiedostot palautetaan niiden commit-tilaan. T\xe4m\xe4 prosessi auttaa pit\xe4m\xe4\xe4n koodikannan puhtaana ja j\xe4rjestettyn\xe4, mik\xe4 helpottaa yhteisty\xf6t\xe4 ja kehityst\xe4.\\n\\nMukauta t\xe4t\xe4 opasta vapaasti omien tarpeidesi ja mieltymystesi mukaan. Lis\xe4tietoja edistyneist\xe4 Git-operaatioista l\xf6ytyy [virallisesta Git-dokumentaatiosta](https://git-scm.com/doc).\\n"},{"lang":"fi","group":"blog","slug":"blog/ultra-low-cost-ddr3-ddr4-lpddr3-lpddr4-memory-test-system","frontmatter":{"title":"Eritt\xe4in edullinen DDR3-, DDR4-, LP-DDR3- ja LP-DDR4-muistitestausj\xe4rjestelm\xe4","description":"Tutustu eritt\xe4in edulliseen muistitestausj\xe4rjestelm\xe4\xe4n, joka tukee DDR3-, DDR4-, LP-DDR3- ja LP-DDR4-teknologioita. Noin 200 000 USD hintaan se tarjoaa nopean testauksen, monipuolisuuden, edistyneet ominaisuudet ja alhaisen virrankulutuksen. T\xe4ydellinen yrityksille, jotka etsiv\xe4t kustannustehokkaita ja luotettavia muistitestausratkaisuja.","date":"2024-06-01T00:00:00.000Z","categories":["Puolijohteet"],"author":"Tan Shuai","tags":["DDR3","DDR4","LP-DDR3","LP-DDR4","Muistitestausj\xe4rjestelm\xe4"],"draft":false},"content":"\\nJos olet kuin min\xe4 ja etsit aina kustannustehokkaita ratkaisuja laadusta tinkim\xe4tt\xe4, tulet rakastamaan sit\xe4, mit\xe4 minulla on t\xe4n\xe4\xe4n jaettavana. Nopeatempoisessa teknologiamaailmassamme on olennaista varmistaa, ett\xe4 laitteidemme muisti on ajan tasalla. Huippuluokan vaihtoehdot, kuten T5503/T5503HS2, ovat loistavia, mutta niill\xe4 on korkea hintalappu. Onneksi Zeeis on kehitt\xe4nyt eritt\xe4in edullisen muistitestij\xe4rjestelm\xe4n, joka ei tingi suorituskyvyst\xe4.\\n\\n## Miksi t\xe4m\xe4 on t\xe4rke\xe4\xe4\\n\\nKun kuulin ensimm\xe4isen kerran Zeeisin muistitestij\xe4rjestelm\xe4st\xe4, olin kiinnostunut. T\xe4m\xe4 j\xe4rjestelm\xe4 on suunniteltu k\xe4sittelem\xe4\xe4n DDR3-, DDR4-, LP-DDR3- ja LP-DDR4-muistitekniikoita. Ty\xf6skentelitp\xe4 sitten vanhempien j\xe4rjestelmien tai uusimman teknologian parissa, t\xe4m\xe4 j\xe4rjestelm\xe4 kattaa tarpeesi.\\n\\n### Korkeanopeuksinen testaus\\n\\nYksi j\xe4rjestelm\xe4n erottuvista ominaisuuksista on sen kyky tukea datansiirtonopeuksia 800:sta 3200 MT/s:iin sek\xe4 DDR3:lle ett\xe4 DDR4:lle. Se voi arvioida muistimoduuleja kellotaajuuksilla jopa 1600 MHz. T\xe4m\xe4 tarkoittaa perusteellista ja luotettavaa testausta, joka varmistaa laitteidesi parhaan suorituskyvyn.\\n\\n### Monipuolisuus\\n\\nT\xe4m\xe4n j\xe4rjestelm\xe4n monipuolisuus on mullistava. Se tukee useita muististandardeja, mik\xe4 tekee siit\xe4 sopivan laajaan sovellusvalikoimaan – kulutuselektroniikasta huippuluokan tietojenk\xe4sittelyyn. Lis\xe4ksi se on tulevaisuudenkest\xe4v\xe4. Kun uusia muistitekniikoita ilmestyy, j\xe4rjestelm\xe4 voidaan helposti p\xe4ivitt\xe4\xe4 tukemaan niit\xe4.\\n\\n### Kustannustehokkuus\\n\\nPuhutaanpa nyt hinnasta. Noin 200 000 dollarilla t\xe4m\xe4 j\xe4rjestelm\xe4 tarjoaa erinomaisen tuoton sijoitukselle. Se on riitt\xe4v\xe4n edullinen pienille ja keskisuurille yrityksille, mik\xe4 takaa huippuluokan testausominaisuudet ilman pankin rikkomista.\\n\\n### Edistyneet ominaisuudet\\n\\nJ\xe4rjestelm\xe4 sis\xe4lt\xe4\xe4 edistyneit\xe4 testausalgoritmeja, mukaan lukien integroitu algoritminen kuvion generointilaite (ALPG). T\xe4m\xe4 varmistaa tarkan ja luotettavan muistin arvioinnin, joten jokainen moduuli t\xe4ytt\xe4\xe4 tiukat suorituskykystandardit.\\n\\n### Alhainen virrankulutus\\n\\nVaikuttavaa on my\xf6s sen alhainen virrankulutus. Se noudattaa LP-DDR3- ja LP-DDR4-muistitekniikoissa n\xe4htyj\xe4 trendej\xe4. Toimimalla matalammilla j\xe4nnitteill\xe4 se ei ainoastaan v\xe4henn\xe4 energiakustannuksia, vaan my\xf6s minimoi l\xe4mm\xf6ntuoton, tehden siit\xe4 ymp\xe4rist\xf6yst\xe4v\xe4llisen valinnan.\\n\\n## Miksi valita Zeeis?\\n\\n### Skaalautuvuus\\n\\nZeeisin j\xe4rjestelm\xe4 on suunniteltu skaalautuvuutta ajatellen. Kun uusia muistitekniikoita ilmestyy, j\xe4rjestelm\xe4 voidaan helposti p\xe4ivitt\xe4\xe4, mik\xe4 varmistaa pitk\xe4aikaisen k\xe4ytett\xe4vyyden ja v\xe4hent\xe4\xe4 tarvetta tiheille korvauksille.\\n\\n### Tuki ja dokumentaatio\\n\\nToinen suuri plussa on Zeeisin laaja tuki ja dokumentaatio. Olitpa kokenut ammattilainen tai uusi muistitestauksen parissa, heid\xe4n yksityiskohtaiset oppaansa ja reagoiva asiakaspalvelunsa varmistavat sujuvan kokemuksen.\\n\\n### Markkinoiden tarpeiden t\xe4ytt\xe4minen\\n\\nKasvavan nopean muistin kysynn\xe4n my\xf6t\xe4 kaikessa \xe4lypuhelimista datakeskuksiin, luotettavan ja kustannustehokkaan muistitestiratkaisun omistaminen on olennaista. Zeeisin j\xe4rjestelm\xe4 t\xe4ytt\xe4\xe4 n\xe4m\xe4 vaatimukset varmistaen, ett\xe4 tuotteesi ovat markkinavalmiita ja toimivat moitteettomasti todellisissa sovelluksissa.\\n\\n## Yhteenveto\\n\\nYhteenvetona voidaan todeta, ett\xe4 Zeeisin Ultra Low Cost DDR3, DDR4, LP-DDR3 & LP-DDR4 Memory Test System on loistava vaihtoehto niille, jotka tarvitsevat luotettavia, monipuolisia ja edullisia muistitestiratkaisuja. Se tarjoaa huippusuorituskyky\xe4 murto-osalla muiden huippuluokan j\xe4rjestelmien kustannuksista, mahdollistaen yrityksille korkeiden standardien yll\xe4pit\xe4misen ilman suuria kustannuksia.\\n\\nJos olet kiinnostunut parantamaan testausominaisuuksiasi j\xe4rjestelm\xe4ll\xe4, joka on suunniteltu muistitekniikan tulevaisuutta varten, ota rohkeasti yhteytt\xe4 saadaksesi lis\xe4tietoja osoitteeseen [i@tanshuai.com](mailto:i@tanshuai.com).\\n\\nOnnea testaukseen!\\n"},{"lang":"fi","group":"blog","slug":"blog/usr-bin-sudo-must-be-owned-by-uid-0-and-have-the-setuid-bit-set-on-ubuntu-20-04","frontmatter":{"title":"/usr/bin/sudo on oltava uid 0：n omistama ja setuid-bitti asetettu Ubuntu 20.04：ss\xe4","date":"2021-10-08T13:07:25.406Z","draft":false,"author":"Tan Shuai","tags":["Ubuntu","Linux","Sudo"],"categories":["Linux"]},"content":"\\nJos kohtaat virheilmoituksen \\"/usr/bin/sudo must be owned by uid 0 and have the setuid bit set\\" Ubuntu 20.04 -j\xe4rjestelm\xe4ss\xe4, noudata n\xe4it\xe4 ohjeita ongelman ratkaisemiseksi.\\n\\n1. K\xe4ynnistysprosessin aikana paina \'ESC\' -n\xe4pp\xe4int\xe4 p\xe4\xe4st\xe4ksesi GRUB-valikkoon.\\n\\n![GRUB-n\xe4ytt\xf6](/images/content/wx20211008-210752.png \\"GRUB-n\xe4ytt\xf6\\")\\n\\n2. Valitse ensimm\xe4inen vaihtoehto, \\"Ubuntu\\", ja paina \'e\' -n\xe4pp\xe4int\xe4 muokataksesi k\xe4ynnistysparametreja.\\n\\n![Muokkaa k\xe4ynnistysparametreja](/images/content/wx20211008-210841.png \\"Muokkaa k\xe4ynnistysparametreja\\")\\n\\n3. Lis\xe4\xe4 seuraava merkkijono rivin loppuun, joka alkaa \'linux\', k\xe4ynnist\xe4\xe4ksesi pelastustilaan:\\n\\n```bash\\nsystemd.unit=rescue.target\\n```\\n\\n4. Pelastustilassa suorita seuraava komento palauttaaksesi oikeat k\xe4ytt\xf6oikeudet ja omistajuuden tiedostolle `/usr/bin/sudo`:\\n\\n```bash\\npkexec chmod a=rx,u+ws /usr/bin/sudo\\n```\\n\\nT\xe4m\xe4 komento asettaa tarvittavat k\xe4ytt\xf6oikeudet ja varmistaa, ett\xe4 `sudo` on juurik\xe4ytt\xe4j\xe4n omistuksessa ja setuid-bitti on asetettu.\\n\\nNoudattamalla n\xe4it\xe4 ohjeita, sinun pit\xe4isi pysty\xe4 ratkaisemaan ongelma ja palauttamaan `sudo`-komennon asianmukainen toiminnallisuus Ubuntu-j\xe4rjestelm\xe4ss\xe4si.\\n"},{"lang":"tr","group":"blog","slug":"blog/aws-codecommit-the-githubs-large-file-storage-git-lfs-free-alternative","frontmatter":{"title":"AWS CodeCommit： GitHub Large File Storage (Git LFS) \xdccretsiz Alternatifi","description":"AWS CodeCommit\'in GitHub\'ın Large File Storage (Git LFS) i\xe7in uygun maliyetli ve verimli bir alternatif olarak nasıl hizmet ettiğini keşfedin. Bu makale, Git LFS\'nin sınırlamalarını, b\xfcy\xfck dosya depolama i\xe7in AWS CodeCommit kullanmanın avantajlarını kapsar ve Git LFS\'den CodeCommit\'e ge\xe7iş i\xe7in adım adım bir rehber sağlar. AWS\'nin \xf6l\xe7eklenebilir ve g\xfcvenli altyapısıyla geliştirme iş akışınızı geliştirin.","date":"2022-02-09T00:00:00.000Z","author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["Yazılım Geliştirme"],"draft":false},"content":"\\nAWS CodeCommit, GitHub\'un B\xfcy\xfck Dosya Depolama (Git LFS) hizmetine sağlam bir alternatif sunarak Git depolarınızdaki b\xfcy\xfck dosyaları y\xf6netmek i\xe7in verimli bir \xe7\xf6z\xfcm sağlar.\\n\\n## Git LFS Kullanımını Yeniden D\xfcş\xfcnmeniz İ\xe7in Nedenler\\n\\nGit LFS, Git depolarındaki b\xfcy\xfck dosyaları y\xf6netmek i\xe7in pop\xfcler bir tercih olsa da, sınırlamaları ve zorlukları vardır. Git LFS, ek kurulum ve y\xf6netim gerektirir, bu da geliştirme s\xfcrecini karmaşıklaştırabilir. Ayrıca, Git LFS ile ilişkili depolama ve bant genişliği maliyetleri hızla artabilir, \xf6zellikle bir\xe7ok b\xfcy\xfck dosya veya geniş \xe7aplı iş birliği gerektiren projeler i\xe7in.\\n\\n## GitHub\'un B\xfcy\xfck Dosya Depolama Hizmetinin Kusursuz Olmama Nedenleri\\n\\nGitHub\'un B\xfcy\xfck Dosya Depolama hizmeti, kullanışlı olmasına rağmen, i\xe7sel dezavantajlara sahiptir. İlk endişe, daha b\xfcy\xfck projeler i\xe7in maliyetlerin yasaklayıcı hale gelebileceği depolama ve bant genişliği ile ilgili maliyetlerdir. Ayrıca, Git LFS\'nin y\xf6netimi zahmetli olabilir; geliştiricilerin LFS istemcisini kurup yapılandırması, belirli dosyaları izlemeleri ve b\xfcy\xfck dosyaların geri kalan depo ile ayrı olarak işlenmesinden kaynaklanan olası birleştirme \xe7atışmaları ile uğraşmaları gerekir.\\n\\n## B\xfcy\xfck Dosyaları Git\'te Depolamak İ\xe7in AWS CodeCommit Kullanma Nedenleri\\n\\nAWS CodeCommit, Git depolarında b\xfcy\xfck dosyaları depolamak i\xe7in Git LFS\'ye gerek olmadan etkileyici bir alternatif sunar. CodeCommit, diğer AWS hizmetleriyle sorunsuz bir şekilde entegre olan, tamamen y\xf6netilen bir kaynak kontrol hizmetidir ve sağlam \xf6l\xe7eklenebilirlik, g\xfcvenlik ve maliyet verimliliği sunar. CodeCommit\'i kullanarak, geliştiriciler Git LFS\'yi y\xf6netmenin ek y\xfck\xfcnden ka\xe7ınırken, AWS\'nin sağlam altyapısı ve kullandık\xe7a \xf6de fiyatlandırma modelinden faydalanabilirler.\\n\\n## AWS CodeCommit\'in GitHub ile Karşılaştırıldığında Sınırlamaları Nelerdir?\\n\\nAvantajlarına rağmen, AWS CodeCommit\'in GitHub ile karşılaştırıldığında bazı sınırlamaları vardır. GitHub\'un geniş topluluk desteği, zengin entegrasyon ekosistemi ve GitHub Actions ve GitHub Pages gibi gelişmiş \xf6zellikleri CodeCommit\'te tam olarak yer almayabilir. Ayrıca, GitHub\'un kullanıcı aray\xfcz\xfc ve iş birliği ara\xe7larına alışkın olan geliştiriciler, CodeCommit\'e ge\xe7işte bazı ayarlamalar yapmaları gerektiğini g\xf6rebilirler.\\n\\n## Bir Git LFS Deposunu CodeCommit\'e Taşıma\\n\\nBir Git LFS deposunu CodeCommit\'e taşımak birka\xe7 adım i\xe7erir. \xd6ncelikle, t\xfcm b\xfcy\xfck dosyaların Git LFS deponuzda doğru şekilde izlendiğinden emin olun. Ardından, depoyu klonlayın ve Git LFS izleme yapılandırmasını kaldırın. Bundan sonra, AWS CodeCommit\'te yeni bir depo oluşturun ve yerel deponuzu buraya itin. Bu s\xfcreci kolaylaştırmak i\xe7in ayrıntılı belgeler ve betikler mevcuttur ve veri kaybı veya kesinti olmadan sorunsuz bir ge\xe7iş sağlar.\\n\\n## Daha İyi Bir \xc7\xf6z\xfcm\\n\\nGit LFS\'ye yoğun bir şekilde bağımlı olan ekipler ve projeler i\xe7in, AWS CodeCommit\'i bir alternatif olarak incelemek \xf6nemli faydalar sağlayabilir. CodeCommit\'in AWS ekosistemi ile sorunsuz entegrasyonu, uygun maliyetli ve \xf6l\xe7eklenebilir yapısıyla birleştiğinde, Git depolarında b\xfcy\xfck dosyaları y\xf6netmek i\xe7in \xe7ekici bir se\xe7enek haline gelir. Git LFS ile ilgili zorlukları azaltarak, CodeCommit geliştirme ekiplerinin kodlamaya ve iş birliğine odaklanmasını sağlayarak verimlilik ve yenilik\xe7iliği artırır.\\n\\nSonu\xe7 olarak, AWS CodeCommit, GitHub\'un B\xfcy\xfck Dosya Depolama hizmetine uygun, maliyet etkin ve verimli bir alternatif sunar. AWS\'nin g\xfc\xe7l\xfc altyapısından yararlanarak, geliştiriciler b\xfcy\xfck dosyaları Git depolarında kolaylıkla y\xf6netebilir, iş akışlarını optimize edebilir ve ek y\xfck\xfc azaltabilir.\\n"},{"lang":"tr","group":"blog","slug":"blog/check-voltage-current-on-macos-for-power-adapter","frontmatter":{"title":"MacOS\'ta G\xfc\xe7 Adapt\xf6r\xfc i\xe7in Voltaj ve Akımı Kontrol Etme","meta_title":"MacOS\'ta G\xfc\xe7 Adapt\xf6r\xfc i\xe7in Voltaj ve Akımı Kontrol Etme","date":"2022-02-14T00:00:00.000Z","author":"Tan Shuai","tags":["MacOS","G\xfc\xe7 Adapt\xf6r\xfc","Voltaj","Akım"],"categories":["MacOS"],"draft":false},"content":"\\nMacBook kullanıyorsanız, g\xfc\xe7 adapt\xf6r\xfcn\xfcn voltajını ve akımını kontrol etmek isteyebilirsiniz. MacOS\'ta g\xfc\xe7 adapt\xf6r\xfcn\xfcn voltajını ve akımını kontrol etmenin basit bir yolu aşağıda verilmiştir.\\n\\nTerminal.app\'i a\xe7ın ve şu komutu yazın:\\n\\n`ioreg -l -n AppleSmartBattery -r |grep AppleRawAdapterDetails`\\n\\nAşağıdaki bilgileri, akım ve voltaj dahil olmak \xfczere alacaksınız:\\n\\n```json\\n\\"AppleRawAdapterDetails\\" = ({\\"IsWireless\\"=No,\\"AdapterID\\"=0,\\"FamilyCode\\"=18446744073172697098,\\"Watts\\"=89,**\\"Current\\"=4450**,\\"PMUConfiguration\\"=4448,**\\"Voltage\\"=20000**})\\n"},{"lang":"tr","group":"blog","slug":"blog/convert-markdown-academic-paper-pdf-macos","frontmatter":{"title":"Markdown\'ı Hızlıca Akademik Tarzda PDF\'ye D\xf6n\xfcşt\xfcrme macOS\'ta","meta_title":"Markdown\'ı Akademik Tarzda PDF\'ye D\xf6n\xfcşt\xfcrme macOS\'ta Pandoc ile","description":"Markdown belgelerini macOS\'ta Pandoc ve BasicTeX kullanarak akademik tarzda PDF\'lere nasıl d\xf6n\xfcşt\xfcreceğinizi \xf6ğrenin. Bu hızlı ve basit y\xf6ntem, akademik makaleler i\xe7in profesyonel PDF dosyaları oluşturmak i\xe7in m\xfckemmeldir.","date":"2022-03-03T00:00:00.000Z","categories":["Yazılım Geliştirme"],"author":"Tan Shuai","tags":["Pandoc","LaTeX","PDF","Makale","Markdown","macOS"],"draft":false},"content":"\\nBu rehberde, Markdown belgelerini macOS\'ta Pandoc ve BasicTeX kullanarak akademik tarzda PDF belgelere nasıl d\xf6n\xfcşt\xfcrd\xfcğ\xfcm\xfc anlatacağım. Bu y\xf6ntem hızlı ve basittir, akademik makaleleriniz i\xe7in profesyonel g\xf6r\xfcn\xfcml\xfc PDF dosyaları oluşturmanız gerektiğinde m\xfckemmeldir.\\n\\n### Adım 1: Pandoc ve BasicTeX\'i Y\xfckleyin\\n\\n\xd6ncelikle, macOS sisteminize Pandoc ve BasicTeX\'i y\xfcklemeniz gerekecek. İşte nasıl yaptığım:\\n\\n1. **Pandoc\'u Y\xfckleyin**: Terminali a\xe7ın ve Pandoc\'u y\xfcklemek i\xe7in şu komutu girin:\\n\\n   ```bash\\n   brew install pandoc\\n   ```\\n\\n2. **BasicTeX\'i Y\xfckleyin**: MacTeX olduk\xe7a b\xfcy\xfck olduğu i\xe7in, yerden tasarruf etmek amacıyla daha k\xfc\xe7\xfck olan BasicTeX paketini tercih ettim. Bu komutu \xe7alıştırın:\\n\\n   ```bash\\n   brew install --cask basictex\\n   ```\\n\\n3. **Yaygın LaTeX Paketlerini Y\xfckleyin**: PDF oluşturmak i\xe7in gerekli paketlere sahip olduğunuzdan emin olmak i\xe7in şu komutları \xe7alıştırın:\\n   ```bash\\n   sudo tlmgr update --self\\n   sudo tlmgr install collection-basic collection-latex collection-latexrecommended collection-fontsrecommended\\n   ```\\n\\n### Adım 2: Markdown Dosyanızı Hazırlayın\\n\\nArdından, Markdown dosyanızı oluşturun (\xf6rneğin, `paper.md`). İşte başlık, yazar, tarih ve iletişim bilgilerini i\xe7erecek şekilde dosyamı nasıl ayarladım:\\n\\n```markdown\\n---\\ntitle: \\"Your Paper Title\\"\\nsubtitle: \\"Optional Subtitle\\"\\ndate: \\\\today\\n\\nauthor: |\\n  | Your Name\\n  | your-email@tanshuai.com\\n  | www.tanshuai.com\\n---\\n\\n# Abstract\\n\\nYour abstract here.\\n\\n# Introduction\\n\\nYour introduction here.\\n\\n# Methodology\\n\\nYour methodology here.\\n\\n# Results\\n\\nYour results here.\\n\\n# Conclusion\\n\\nYour conclusion here.\\n```\\n\\n### Adım 3: Markdown\'ı Pandoc ile PDF\'ye D\xf6n\xfcşt\xfcr\xfcn\\n\\nŞimdi, Markdown dosyanızı PDF\'ye d\xf6n\xfcşt\xfcrebilirsiniz. Terminalde şu komutu kullandım:\\n\\n```bash\\npandoc paper.md -o paper.pdf --pdf-engine=xelatex\\n```\\n\\nBu komut, Pandoc\'un varsayılan LaTeX şablonunu kullanarak Markdown dosyasını akademik tarzda bir PDF belgesine d\xf6n\xfcşt\xfcr\xfcr ve yazarın iletişim bilgilerini adının altına ekler.\\n\\n### Ek İpu\xe7ları\\n\\n- **\xd6zel LaTeX Şablonu**: Daha gelişmiş bi\xe7imlendirme veya belirli stiller gerekiyorsa, \xf6zel bir LaTeX şablonu oluşturabilir veya indirebilir ve Pandoc ile kullanabilirsiniz:\\n\\n  ```bash\\n  pandoc paper.md -o paper.pdf --pdf-engine=xelatex --template=your-template.tex\\n  ```\\n\\n- **Daha Fazla Metadata**: \xd6zge\xe7miş veya anahtar kelimeler gibi ekstra bilgileri YAML metadata başlığına ekleyebilir ve bunları \xf6zel şablonlarda kullanabilirsiniz.\\n\\n### Sonu\xe7\\n\\nBu adımları izleyerek Markdown belgelerinizi macOS\'ta akademik tarzda PDF belgelere kolayca d\xf6n\xfcşt\xfcrebilirsiniz. Pandoc ve BasicTeX kullanmak bu s\xfcreci hızlı ve verimli hale getirir, profesyonel PDF belgeleri oluşturmanız gerektiğinde m\xfckemmeldir. Akademik makaleler, teknik raporlar veya diğer resmi belgeler hazırlarken bu y\xf6ntem harika \xe7alışır. Metadata başlığına iletişim bilgilerini eklemek belgelerinize profesyonel bir dokunuş katar.\\n\\nUmarım bu rehberi faydalı bulursunuz! Herhangi bir sorunuz varsa veya sorunla karşılaşırsanız, \xe7ekinmeden ulaşın. İyi yazmalar!\\n"},{"lang":"tr","group":"blog","slug":"blog/electron-build-tools-error-error-failed-to-run-choco-install-pywin32-yes","frontmatter":{"title":"Electron Derleme Ara\xe7ları `HATA Hatası： \\"choco install pywin32 --yes\\" \xe7alıştırılamadı`","date":"2021-09-08T00:00:00.000Z","draft":false,"author":"Tan Shuai","tags":["Electron","Derleme Ara\xe7ları","PyWin32","Chocolatey","Win32"],"categories":["Yazılım Geliştirme"]},"content":"\\nElectron Build Tools ile \xe7alışırken, Chocolatey \xfczerinden pywin32 kurulumuyla ilgili bir hata ile karşılaşabilirsiniz. Bu \xf6zellikle projeniz i\xe7in gerekli bir bağımlılık olduğunda can sıkıcı olabilir. Aşağıda, sorunun ayrıntılı bir a\xe7ıklaması ve \xe7\xf6z\xfcm yolları bulunmaktadır.\\n\\n### Hata\\n\\nElectron Build Tools kullanarak bir Electron projesi başlatırken aşağıdaki hata mesajını g\xf6rebilirsiniz:\\n\\n```bash\\nE:\\\\\\\\>e init main-testing -i testing --root=e:/src/electron\\nWARN D\xfczeltilebilir bir hata oluştu\\n--> Gerekli bir bağımlılık \\"pywin32\\" bulunamadı, muhtemelen kurulması gerekiyor.\\nBuild-tools\'un bunu d\xfczeltmeye \xe7alışmasını ister misiniz? [y/n]: y\\n\\n\\"choco install pywin32 --yes\\" \xe7alıştırılıyor\\nERROR Hata: \\"choco install pywin32 --yes\\" \xe7alıştırılamadı\\n    at spawnSyncWithLog (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:11:11)\\n    at fix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:39:9)\\n    at maybeAutoFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\maybe-auto-fix.js:13:3)\\n    at whichAndFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\which.js:10:5)\\n    at checkPlatformDependencies (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:61:7)\\n    at Object.<anonymous> (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\e-init.js:165:3)\\n    at Module._compile (internal/modules/cjs/loader.js:1072:14)\\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1101:10)\\n    at Module.load (internal/modules/cjs/loader.js:937:32)\\n    at Function.Module._load (internal/modules/cjs/loader.js:778:12)\\n```\\n\\nBu hata genellikle, pywin32 paket kurulum betiğinin uzaktaki sunucuda gerekli dosyaları bulamaması nedeniyle oluşur. Bu, dosyanın belirtilen URL\'de bulunmadığını belirten bir 404 hatası ile sonu\xe7lanır.\\n\\n### Hatanın Anlaşılması\\n\\nHata mesajının \xf6nemli kısmı:\\n\\n```bash\\nERROR: Uzak dosya ya mevcut değil, ya yetkisiz, ya da URL \'http://sourceforge.net/projects/pywin32/files/pywin32/Build%20219/pywin32-219.win-amd64-py3.9.exe/download\' i\xe7in yasaklanmış. \\"GetResponse\\" ile \\"0\\" arg\xfcman \xe7ağrısı yapılırken istisna: \\"Uzak sunucu bir hata d\xf6nd\xfcrd\xfc: (404) Bulunamadı.\\"\\n```\\n\\nBu, pywin32\'nin indirme URL\'sinin artık ge\xe7erli olmadığını ve bu nedenle Chocolatey\'nin gerekli kurulum dosyalarını alamadığını g\xf6sterir.\\n\\n### Sorun Giderme Adımları\\n\\nBu sorunu \xe7\xf6zmek i\xe7in atabileceğiniz birka\xe7 adım:\\n\\n#### 1. Chocolatey Kurulumunu Doğrulayın\\n\\nChocolatey\'nin doğru kurulduğundan ve en g\xfcncel s\xfcr\xfcme sahip olduğundan emin olun. Chocolatey s\xfcr\xfcm\xfcn\xfcz\xfc şu komutla kontrol edebilirsiniz:\\n\\n```bash\\nchoco --version\\n```\\n\\nChocolatey\'yi g\xfcncellemek i\xe7in:\\n\\n```bash\\nchoco upgrade chocolatey\\n```\\n\\n#### 2. pywin32\'yi Manuel Kurun\\n\\nOtomatik kurulum başarısız olduğu i\xe7in, pywin32\'yi manuel olarak kurmayı deneyin. Uygun s\xfcr\xfcm\xfc [pywin32 GitHub s\xfcr\xfcmleri sayfasından](https://github.com/mhammond/pywin32/releases) indirip manuel olarak kurabilirsiniz.\\n\\n#### 3. Kurulum Betiğini Değiştirin\\n\\nElectron Build Tools betiği \xfczerinde kontrol\xfcn\xfcz varsa, pywin32 i\xe7in ge\xe7erli bir URL\'ye işaret edecek veya manuel kurulum s\xfcrecini y\xf6netecek şekilde değiştirebilirsiniz.\\n\\n#### 4. Alternatif Bir Paket Y\xf6neticisi Kullanın\\n\\nChocolatey başarısız olmaya devam ederse, Python paketleri i\xe7in pip gibi alternatif bir paket y\xf6neticisi kullanmayı d\xfcş\xfcn\xfcn:\\n\\n```bash\\npip install pywin32\\n```\\n\\n### pywin32\'nin Manuel Olarak Y\xfcklenmesi \xd6rneği\\n\\n1. [Resmi GitHub s\xfcr\xfcmlerinden](https://github.com/mhammond/pywin32/releases) uygun pywin32 y\xfckleyicisini indirin.\\n2. Y\xfckleyiciyi \xe7alıştırın ve kurulum talimatlarını izleyin.\\n3. pywin32\'yi i\xe7e aktaran basit bir Python betiği \xe7alıştırarak kurulumu doğrulayın:\\n\\n```python\\nimport win32api\\nprint(win32api.GetVersionEx())\\n```\\n\\n\\"choco install pywin32 --yes\\" hatasıyla karşılaşmak geliştirme s\xfcrecinizde bir engel olabilir. Ancak, sorunun k\xf6kenini anlayarak ve yukarıda belirtilen adımları izleyerek bu sorunu aşabilir ve Electron proje kurulumunuza devam edebilirsiniz.\\n"},{"lang":"tr","group":"blog","slug":"blog/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining","frontmatter":{"title":"Bitcoin ve Kriptopara Madenciliği i\xe7in Tam \xd6zel ASIC Tasarım Sırları","date":"2022-05-30T00:00:00.000Z","update":"2024-08-02T00:00:00.000Z","categories":["Yarı İletkenler","Bitcoin","Kriptopara","Blokzinciri"],"author":"Tan Shuai","tags":["ASIC","Bitcoin","Madencilik","BTC"],"draft":false,"contact":"Tan Shuai | tanshuai@btc.com | tanshuai.com"},"content":"\\nTan Shuai  \\n[tanshuai@btc.com](mailto:tanshuai@btc.com)  \\n[tanshuai.com](https://tanshuai.com)\\n\\n---\\n\\n## \xd6zet\\n\\nKripto para madenciliğinin rekabet\xe7i d\xfcnyasında g\xfc\xe7 verimliliği, hash oranı performansı ve g\xfcvenilirlik \xe7ok \xf6nemlidir. Bu makale, y\xfcksek performanslı Bitcoin ve kripto para madenciliğini y\xf6nlendiren sekt\xf6r sırlarını ve uzman metodolojilerini ortaya \xe7ıkararak, \xfcst d\xfczey tam \xf6zel ASIC (Uygulamaya \xd6zg\xfc Entegre Devre) tasarımını inceliyor. En iyi ASIC madenci şirketlerinden birinden bir teknoloji uzmanı tarafından yazılan bu makale, madencilik verimliliğini ve karlılığını en \xfcst d\xfczeye \xe7ıkarmada tam \xf6zel ASIC\'lerin olağan\xfcst\xfc yeteneklerini sergilemek i\xe7in ileri tasarım tekniklerini, titiz fiziksel yerleşimi ve kapsamlı doğrulama s\xfcre\xe7lerini kullanıyor.\\n\\n## Giriş\\n\\nKripto para madenciliğinin evrimi, \xf6zellikle Bitcoin madenciliği, genel ama\xe7lı CPU\'lar, FPGA\'lar ve GPU\'lardan \xf6zel ASIC\'lere ge\xe7işi g\xf6rd\xfc. Bu ASIC\'ler benzersiz performans ve enerji verimliliği sunar. Tam \xf6zel ASIC tasarımı, bu evrimin zirvesini temsil eder ve madencilik operasyonlarının \xf6zel gereksinimlerini karşılayan \xf6zel \xe7\xf6z\xfcmler sağlar.\\n\\nKripto para madenciliği i\xe7in ASIC tasarımı hakkındaki mevcut literat\xfcr\xfcn \xe7oğu akademiden veya madencilik dışı işletmelerden gelmekte olup, genellikle ger\xe7ek d\xfcnya uygulanabilirliğinden yoksundur. Bug\xfcne kadar, esas olarak \xc7inli birka\xe7 şirket (\xf6rn. MicroBT, Bitmain) pazarlanabilir Bitcoin madencilik ASIC\'lerini başarıyla geliştirmiştir. Bu makale, madencilik sekt\xf6r\xfcn\xfcn ger\xe7eklerine dayanan bir bakış a\xe7ısı sunarak, end\xfcstri pratiğinden \xe7ıkarılan bilgilerle bu boşluğu doldurmayı ama\xe7lamaktadır.\\n\\nTeknoloji end\xfcstrisinde on yılı aşkın deneyime sahip bir profesyonel olarak, bu makalenin yazarı d\xfcnyanın en iyi Bitcoin ASIC Madencisi (WhatsMiner), LTC/DOGE ve ETH Madencilerini geliştirmiş ve MicroBT, BTC.COM ve diğer halka a\xe7ık fabless şirketlerde kilit roller oynamıştır. NASDAQ, HKSE ve NYSE\'de listelenen şirketlerde \xf6nemli pozisyonlarda bulunmuştur. TSMC, Texas Instruments, ARM ve Intel ile ortaklıklar kurma konusunda geniş deneyime sahip olan yazar, Bitcoin ve kripto para madenciliği i\xe7in \xf6zel ASIC tasarımı alanına geniş bir bilgi ve pratik uzmanlık getiriyor.\\n\\n## Metodoloji ve Tasarım Akışı\\n\\n### Tasarım Felsefesi\\n\\nTam \xf6zel ASIC tasarımına yaklaşımımız, \xf6zellikle d\xfcş\xfck voltajlı \xe7alışma koşullarında PPA\'yı (G\xfc\xe7, Performans ve Alan) maksimize etmeye odaklanır. Bu b\xf6l\xfcmde tasarım felsefemizi ve metodolojimizi a\xe7ıklayacağız:\\n\\n1. **Pipeline Mimarisi**: Kayıtlar ve kombinasyonel mantık aşamaları ile karakterize edilen madencilik algoritmaları i\xe7in pipeline yapıların doğuştan gelen faydalarından yararlanma. Pipeline mimarisi kullanarak, kripto para madenciliği i\xe7in gerekli olan y\xfcksek frekanslı işlemleri verimli bir şekilde y\xf6netebiliriz.\\n2. **Manuel Netlist ve Yerleştirme**: Kritik yolları optimize etmek i\xe7in netlist oluşturma ve manuel h\xfccre yerleştirme i\xe7in ayrıntılı komut dosyaları. Bu, zamanlamayı kesin olarak kontrol etmeyi ve parazitik etkileri azaltmayı sağlar.\\n3. **\xd6zel H\xfccre K\xfct\xfcphaneleri**: Optimize edilmiş transistor sayıları ve dinamik g\xfc\xe7 tasarrufu \xf6zelliklerine sahip \xf6zel h\xfccreler geliştirme. \xd6zel h\xfccreler, m\xfcmk\xfcn olan en d\xfcş\xfck voltajlarda \xe7alışacak şekilde tasarlanmıştır ve minimum g\xfc\xe7 t\xfcketimini sağlar.\\n\\n### PPA Faydalarını Elde Etme\\n\\n\xd6zel tasarım yoluyla PPA faydalarını elde etmek i\xe7in detaylı stratejiler:\\n\\n1. **\xd6zel Register Tasarımı**: Saat g\xfcc\xfcn\xfc azaltmak ve zamanlama \xf6d\xfcn\xe7 almayı iyileştirmek i\xe7in \xe7ok bitli registerler ve mandallı tasarımlar kullanmak. \xc7ok bitli registerler saat ağacının g\xfc\xe7 t\xfcketimini en aza indirir ve toplam alanı azaltır.\\n2. **Manuel Yerleştirme**: Tel uzunluğunu azaltmak ve kurulum ile bekleme s\xfcrelerini dengelemek i\xe7in genel performansı artırmak. Manuel yerleştirme, bağlantı gecikmeleri ve \xe7apraz konuşmayı daha iyi kontrol etmeye olanak tanır, sinyal b\xfct\xfcnl\xfcğ\xfcn\xfc iyileştirir ve g\xfc\xe7 t\xfcketimini azaltır.\\n3. **Optimize Edilmiş H\xfccre Tasarımı**: \xd6zel h\xfccreler, dinamik g\xfc\xe7 t\xfcketimini en aza indirmek ve verimliliği en \xfcst d\xfczeye \xe7ıkarmak i\xe7in daha d\xfcş\xfck voltajlarda \xe7alışacak şekilde tasarlanır. H\xfccre tasarımlarını madencilik algoritmalarının \xf6zel ihtiya\xe7larına g\xf6re uyarlayarak performansta \xf6nemli iyileştirmeler elde edebiliriz.\\n\\n### D\xfcş\xfck Voltajda G\xfcvenilirlik\\n\\nD\xfcş\xfck voltajda \xf6zel tasarlanmış zamanlama mantığının g\xfcvenilirliğini sağlamak:\\n\\n1. **Doğru Sim\xfclasyon**: \xd6zel h\xfccre davranışını belirli koşullar altında doğrulamak i\xe7in devre d\xfczeyinde sim\xfclasyonlar. SPICE gibi ara\xe7lar, h\xfccrelerin t\xfcm PVT (İşlem, Voltaj, Sıcaklık) k\xf6şelerinde doğru \xe7alıştığından emin olmak i\xe7in detaylı elektrik sim\xfclasyonları i\xe7in kullanılır.\\n2. **Yerleşimde Tutarlılık**: Değişkenliği azaltmak ve tutarlılığı sağlamak i\xe7in manuel yerleştirme. Fiziksel d\xfczeni kontrol ederek işlem varyasyonlarının etkisini en aza indirebilir ve tutarlı performans sağlayabiliriz.\\n3. **Kesin PVT Kalibrasyonu**: İşlem, voltaj ve sıcaklık varyasyonlarına karşı doğrulama. Tasarımın farklı \xe7alışma koşulları boyunca sağlamlığını sağlamak i\xe7in kapsamlı testler ve kalibrasyon yapılır.\\n\\n## Vaka \xc7alışmaları ve Sonu\xe7lar\\n\\nTam maske yerleşimlerinden elde edilen ger\xe7ek d\xfcnya verileri ve vaka \xe7alışmaları:\\n\\n| Proje  | S\xfcre\xe7 D\xfcğ\xfcm\xfc | Voltaj/G\xfc\xe7 Verimliliği | Algoritma |\\n| ------ | ------------ | ---------------------- | --------- |\\n| SC     | TSMC 28nm    | 0.45V, 257J/T          | Blake2b   |\\n| DCR    | TSMC 28nm    | 0.45V, 150J/T          | Blake256  |\\n| DASH   | TSMC 16nm    | 0.38V, 6.2J/G          | X11       |\\n| BTC    | TSMC 16nm    | 0.38V, 65J/T           | SHA-256d  |\\n| BTC    | TSMC 7nm     | 0.30V, 37J/T           | SHA-256d  |\\n| BTC    | Samsung 8nm  | 0.31V, 45J/T           | SHA-256d  |\\n| BTC    | SMIC N+1     | 0.30V, 35J/T           | SHA-256d  |\\n\\nBu sonu\xe7lar, \xf6zel tasarım yaklaşımımızla elde edilen verimlilik ve performanstaki \xf6nemli kazanımları g\xf6stermektedir.\\n\\n## Entegrasyon ve Doğrulama\\n\\n### Karışık H\xfccre Onayı\\n\\n- **\xd6zel H\xfccrelerin Entegrasyonu**: \xd6zel h\xfccreler TSMC ve diğer d\xf6k\xfcmhanelerden standart h\xfccrelerle entegre edilerek uyumluluk ve performans sağlanır. \xd6zel h\xfccreler, standart h\xfccre k\xfct\xfcphanesi gereksinimlerini karşılayacak şekilde karakterize edilir ve doğrulanır, b\xf6ylece sorunsuz entegrasyon sağlanır.\\n- **Onay Stratejileri**: Uyumluluk ve performansı sağlamak i\xe7in stratejiler, ayrıntılı DRC (Tasarım Kuralı Kontrol\xfc) ve LVS (Yerleşim ve Şema Karşılaştırması) kontrolleri ile zamanlama ve g\xfc\xe7 analizi gibi end\xfcstri standardı EDA (Elektronik Tasarım Otomasyonu) ara\xe7ları kullanarak yapılır.\\n\\n### Dijital ve Analog Ortak Tasarımı\\n\\n- **Entegrasyon Teknikleri**: Dijital ve analog bileşenleri entegre ederek genel \xe7ip performansını optimize etme. Uygun entegrasyon ve işlevselliği sağlamak i\xe7in karma sinyal doğrulama ve ortak sim\xfclasyon gibi teknikler kullanılır.\\n- **Doğrulama Metodolojileri**: Farklı \xe7alışma koşullarında sağlamlığı sağlamak i\xe7in kullanılan metodolojiler arasında k\xf6şe analizi, Monte Carlo sim\xfclasyonları ve yaşlanma ve elektromigrasyonu ele almak i\xe7in g\xfcvenilirlik doğrulaması bulunur.\\n\\n## Sonu\xe7\\n\\nTam \xf6zel ASIC tasarımı, Bitcoin ve kripto para madenciliği i\xe7in \xf6nemli avantajlar sunar ve benzersiz performans, g\xfc\xe7 verimliliği ve g\xfcvenilirlik sağlar. Bu makale, \xfcst d\xfczey \xf6zel ASIC tasarımının sırlarını ortaya \xe7ıkararak, sekt\xf6r liderlerini \xf6ne \xe7ıkaran metodolojileri ve yenilikleri vurgulamaktadır. Kripto para madenciliği gelişmeye devam ederken, \xf6zel ASIC\'ler, y\xfcksek verimlilik ve y\xfcksek performanslı madencilik donanımının bir sonraki neslini y\xf6nlendirmede kritik bir rol oynayacaktır.\\n\\n[Makalenin PDF Versiyonu](/docs/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining.pdf)\\n"},{"lang":"tr","group":"blog","slug":"blog/get-current-commit-id-of-git-and-update-to-package-json","frontmatter":{"title":"Mevcut Git commit kimliğini alın ve package.json\'a g\xfcncelleyin","date":"2021-08-21T09:19:58.875Z","draft":false,"author":"Tan Shuai","tags":["Git","Package.json","Node.js"],"categories":["Yazılım Geliştirme"]},"content":"\\nNode.js projesi geliştirirken, Git deposunun mevcut commit kimliğini takip etmek isteyebilirsiniz. Bu bilgi, hata ayıklama, s\xfcr\xfcm oluşturma veya dağıtım ama\xe7ları i\xe7in yararlı olabilir. Bunu başarmanın bir yolu, build s\xfcreci sırasında `package.json` dosyasını mevcut commit kimliği ile g\xfcncellemektir. Bu makale, Git\'in mevcut commit kimliğini almanın ve Node.js kullanarak `package.json` dosyasına g\xfcncellemenin adımlarında size rehberlik edecektir.\\n\\n```bash\\n\\"predev\\": \\"node ./node_modules/json/lib/json.js -I -f package.json -e \\\\\\"this.commit=\'$(git rev-parse --short HEAD)\'\\\\\\"\\",\\n"},{"lang":"tr","group":"blog","slug":"blog/migrate-a-github-lfs-git-large-file-storage-repository-to-aws-codecommit","frontmatter":{"title":"GitHub LFS (Git B\xfcy\xfck Dosya Depolama) deposunu AWS CodeCommit\'e Taşıma","date":"2022-02-09T09:36:57.481Z","draft":false,"author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["Yazılım Geliştirme"]},"content":"\\nGe\xe7enlerde, Git Large File Storage (LFS) kullanan GitHub depolarımdan birini AWS CodeCommit\'e taşıdım. Benzer bir şey yapmak istiyorsanız, s\xfcreci sizinle paylaşmak istedim. İşte deneyimlerime dayanan adım adım bir rehber.\\n\\n## \xd6nkoşullar\\n\\nBaşlamadan \xf6nce, bu ara\xe7ların y\xfckl\xfc olduğundan emin olun:\\n\\n- Git\\n- Git LFS\\n- AWS CLI\\n\\n## Adım Adım Rehber\\n\\n### 1. Depoyu Klonlama\\n\\n\xd6ncelikle, `--mirror` se\xe7eneğini kullanarak GitHub deponuzu klonlayın. Bu, t\xfcm dallar ve etiketler dahil olmak \xfczere deponun bir aynasını oluşturur.\\n\\n```zsh\\ngit clone --mirror https://github.com/tanshuai/designs.git designs\\n```\\n\\n### 2. LFS Dosyalarını Doğrulama\\n\\nSonrasında, her şeyin yerinde olduğundan emin olmak i\xe7in Git LFS tarafından y\xf6netilen t\xfcm dosyaları listeleyin.\\n\\n```zsh\\ngit lfs ls-files\\n```\\n\\nŞuna benzer bir şey g\xf6rmelisiniz:\\n\\n```\\ncadfa0bc9e * Brochure-Trifold-Draft.ai\\naf9b8b8a1c * Brochure-Trifold-English.ai\\n27bb5f4e61 * Brochure-Trifold.ai\\n```\\n\\n### 3. LFS Dosyalarını Taşıma\\n\\nŞimdi, LFS dosyalarını dışa aktarın. Bu adım, bunların depo ge\xe7mişinizin bir par\xe7ası olmasını sağlar.\\n\\n```zsh\\ngit lfs migrate export --include=\\"*.ai\\" --everything\\n```\\n\\nŞu gibi ilerleme mesajları g\xf6receksiniz:\\n\\n```\\nmigrate: Sorting commits: ..., done.\\nmigrate: Rewriting commits: 100% (20/20), done.\\nmaster  98a3c48d85... -> 82f8873b41...\\nmigrate: Updating refs: ..., done.\\nmigrate: checkout: ..., done.\\nprune: 3 local object(s), 0 retained, done.\\ncadfa0bc9e... (133 MB)\\n27bb5f4e61... (131 MB)\\naf9b8b8a1c... (130 MB), done.\\nprune: Deleting objects: 100% (3/3), done.\\n```\\n\\n### 4. LFS\'yi Temizleme\\n\\nGit LFS izleme bilgilerini kaldırın ve Git LFS\'yi kaldırın.\\n\\n```zsh\\ngit lfs ls-files\\ngit rm .gitattributes -f\\ngit lfs uninstall\\n```\\n\\n### 5. AWS CodeCommit\'e G\xf6nderme\\n\\nSon olarak, deponuzu AWS CodeCommit\'e g\xf6nderin.\\n\\n```zsh\\ngit push https://git-codecommit.us-east-2.amazonaws.com/v1/repos/designs --all\\n```\\n\\nHepsi bu kadar! Bu adımları izleyerek GitHub LFS deponuzu AWS CodeCommit\'e başarıyla taşıdım. B\xfcy\xfck dosyalar ve depo ge\xe7mişi m\xfckemmel bir şekilde korundu.\\n\\n## Sonu\xe7\\n\\nGit LFS kullanan bir GitHub deposunu AWS CodeCommit\'e taşımak, doğru adımları izlerseniz olduk\xe7a basittir. Sorularınız varsa veya sorunlarla karşılaşırsanız, [AWS CodeCommit belgeleri](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) ve [Git LFS belgeleri](https://git-lfs.github.com/) harika kaynaklardır.\\n\\nUmarım bu rehberi faydalı bulursunuz. İyi kodlamalar!\\n"},{"lang":"tr","group":"blog","slug":"blog/reset-restore-all-subdirectories-of-git","frontmatter":{"title":"T\xfcm Git Alt Dizinlerini Sıfırla/Geri Y\xfckle","date":"2021-09-22T08:33:49.201Z","draft":false,"author":"Tan Shuai","tags":["Git","S\xfcr\xfcm Kontrol\xfc"],"categories":["Yazılım Geliştirme"]},"content":"\\nGit deposunu etkili bir şekilde y\xf6netmek, temiz ve işlevsel bir kod tabanı korumak i\xe7in genellikle alt dizinleri sıfırlama veya geri y\xfcklemeyi gerektirir. Bu kılavuz, bir Git deposundaki t\xfcm alt dizinleri sıfırlamak veya geri y\xfcklemek i\xe7in kısa ve \xf6z bir yaklaşım sunar.\\n\\n## Alt Dizinleri Sıfırlama\\n\\nAşağıdaki Git komutu, depodan izlenmeyen t\xfcm dosya ve dizinleri kaldırır. Bu, sıfırlama veya geri y\xfckleme işlemi yapmadan \xf6nce gereksiz dosyaları temizlemek i\xe7in yararlıdır.\\n\\n```bash\\ngit clean -xfdf -- .\\n```\\n\\n### Komutun A\xe7ıklaması:\\n\\n- `-x`: `.gitignore` tarafından g\xf6z ardı edilenler de dahil olmak \xfczere t\xfcm izlenmeyen dosyaları kaldırır.\\n- `-f`: Dosyaların kaldırılmasını zorlar.\\n- `-d`: İzlenmeyen dizinleri kaldırır.\\n- `-- .`: Komutu ge\xe7erli dizin ve t\xfcm alt dizinlere uygular.\\n\\n## Alt Dizinleri Geri Y\xfckleme\\n\\nDepodaki t\xfcm dosyaları en son taahh\xfct edilen duruma geri y\xfcklemek i\xe7in aşağıdaki komutu kullanın:\\n\\n```bash\\ngit checkout {HEAD OR BRANCH} -- .\\n```\\n\\n### Komutun A\xe7ıklaması:\\n\\n- `{HEAD OR BRANCH}`: En son taahh\xfcde sıfırlamak i\xe7in `HEAD` ile değiştirin veya belirli bir dal adına sıfırlamak i\xe7in bir dal adı belirtin.\\n- `-- .`: Komutu ge\xe7erli dizin ve t\xfcm alt dizinlere uygular.\\n\\nBu komutları kullanarak, deponuzun gereksiz dosyalardan arındırılmış olduğundan ve t\xfcm dosyaların taahh\xfct edilen durumlarına geri y\xfcklendiğinden emin olabilirsiniz. Bu s\xfcre\xe7, temiz ve d\xfczenli bir kod tabanı korumaya yardımcı olur, daha kolay işbirliği ve geliştirme sağlar.\\n\\nBu kılavuzu, \xf6zel ihtiya\xe7 ve tercihlerinize g\xf6re \xf6zelleştirebilirsiniz. Daha gelişmiş Git işlemleri i\xe7in [resmi Git belgelerine](https://git-scm.com/doc) başvurun.\\n"},{"lang":"tr","group":"blog","slug":"blog/ultra-low-cost-ddr3-ddr4-lpddr3-lpddr4-memory-test-system","frontmatter":{"title":"Ultra D\xfcş\xfck Maliyetli DDR3, DDR4, LP-DDR3 ve LP-DDR4 Bellek Test Sistemi","description":"DDR3, DDR4, LP-DDR3 ve LP-DDR4 teknolojileri i\xe7in ultra d\xfcş\xfck maliyetli bellek test sistemini keşfedin. Yaklaşık 200.000 USD fiyatıyla y\xfcksek hızlı test, \xe7ok y\xf6nl\xfcl\xfck, gelişmiş \xf6zellikler ve d\xfcş\xfck g\xfc\xe7 t\xfcketimi sunar. Maliyet etkin, g\xfcvenilir bellek test \xe7\xf6z\xfcmleri arayan işletmeler i\xe7in m\xfckemmeldir.","date":"2024-06-01T00:00:00.000Z","categories":["Yarı İletkenler"],"author":"Tan Shuai","tags":["DDR3","DDR4","LP-DDR3","LP-DDR4","Bellek Test Sistemi"],"draft":false},"content":"\\nEğer benim gibiyseniz, kaliteden \xf6d\xfcn vermeden maliyet etkin \xe7\xf6z\xfcmler arayışındaysanız, bug\xfcn paylaşacaklarımı \xe7ok seveceksiniz. Hızlı tempolu teknoloji d\xfcnyamızda, cihazlarımızın hafızasının yeterli seviyede olduğundan emin olmak \xe7ok \xf6nemlidir. T5503/T5503HS2 gibi \xfcst d\xfczey se\xe7enekler harikadır, ancak y\xfcksek bir fiyat etiketiyle gelirler. Neyse ki, Zeeis performanstan \xf6d\xfcn vermeyen ultra d\xfcş\xfck maliyetli bir hafıza test sistemi ile karşımıza \xe7ıkıyor.\\n\\n## Neden \xd6nemli?\\n\\nZeeis\'in hafıza test sistemi hakkında ilk bilgi edindiğimde \xe7ok ilgimi \xe7ekti. Bu sistem, DDR3, DDR4, LP-DDR3 ve LP-DDR4 hafıza teknolojilerini ele almak \xfczere tasarlanmıştır. Eski sistemlerle mi yoksa en yeni teknolojiyle mi \xe7alışıyorsunuz fark etmez, bu sistem ihtiyacınızı karşılıyor.\\n\\n### Y\xfcksek Hızda Test\\n\\n\xd6ne \xe7ıkan \xf6zelliklerinden biri, DDR3 ve DDR4 i\xe7in 800 ila 3200 MT/s veri transfer hızlarını destekleyebilmesidir. Bellek mod\xfcllerini 1600 MHz\'e kadar saat hızlarında değerlendirebilir. Bu, cihazlarınızın en iyi şekilde performans g\xf6stermesini sağlamak i\xe7in kapsamlı ve g\xfcvenilir bir test anlamına gelir.\\n\\n### \xc7ok Y\xf6nl\xfcl\xfck\\n\\nBu sistemin \xe7ok y\xf6nl\xfcl\xfcğ\xfc tam anlamıyla bir d\xf6n\xfcm noktasıdır. Bir\xe7ok hafıza standardını destekleyerek t\xfcketici elektroniğinden y\xfcksek performanslı bilişime kadar geniş bir uygulama yelpazesi i\xe7in uygundur. Ayrıca, geleceğe d\xf6n\xfck. Yeni hafıza teknolojileri ortaya \xe7ıktık\xe7a, bu sistem kolayca g\xfcncellenebilir.\\n\\n### Maliyet Verimliliği\\n\\nŞimdi, fiyattan bahsedelim. Yaklaşık 200.000 USD civarında olan bu sistem, m\xfckemmel bir yatırım getirisi sunar. K\xfc\xe7\xfck ve orta \xf6l\xe7ekli işletmeler i\xe7in yeterince uygun fiyatlı olup, en \xfcst d\xfczey test yeteneklerini bankayı sarsmadan sunar.\\n\\n### İleri \xd6zellikler\\n\\nSistem, entegre bir algoritmik desen jenerat\xf6r\xfc (ALPG) dahil olmak \xfczere gelişmiş test algoritmaları ile birlikte gelir. Bu, her mod\xfcl\xfcn katı performans standartlarına uymasını sağlayarak doğru ve g\xfcvenilir hafıza değerlendirmesi sağlar.\\n\\n### D\xfcş\xfck G\xfc\xe7 T\xfcketimi\\n\\nEtkileyici bir diğer \xf6zellik ise d\xfcş\xfck g\xfc\xe7 t\xfcketimidir. LP-DDR3 ve LP-DDR4 hafıza teknolojilerinde g\xf6r\xfclen trendlere uyum sağlar. Daha d\xfcş\xfck voltajlarda \xe7alışarak sadece enerji maliyetlerini azaltmakla kalmaz, aynı zamanda ısıl \xe7ıktıyı da en aza indirir ve \xe7evre dostu bir se\xe7im haline gelir.\\n\\n## Neden Zeeis\'i Se\xe7melisiniz?\\n\\n### \xd6l\xe7eklenebilirlik\\n\\nZeeis’in sistemi \xf6l\xe7eklenebilirlik d\xfcş\xfcn\xfclerek tasarlanmıştır. Yeni hafıza teknolojileri ortaya \xe7ıktık\xe7a, sistem kolayca y\xfckseltilebilir ve uzun vadeli kullanılabilirliği sağlar, sık sık değişim ihtiyacını azaltır.\\n\\n### Destek ve Dok\xfcmantasyon\\n\\nBir diğer b\xfcy\xfck artı Zeeis\'in kapsamlı destek ve dok\xfcmantasyonudur. İster deneyimli bir profesyonel olun ister hafıza testinde yeni olun, detaylı kılavuzları ve duyarlı m\xfcşteri hizmetleri sorunsuz bir deneyim sağlar.\\n\\n### Pazar Taleplerini Karşılama\\n\\nAkıllı telefonlardan veri merkezlerine kadar her şeyde y\xfcksek hızlı hafıza talebinin arttığı bu d\xf6nemde, g\xfcvenilir ve maliyet etkin bir hafıza test \xe7\xf6z\xfcm\xfcne sahip olmak \xe7ok \xf6nemlidir. Zeeis’in sistemi bu talepleri karşılayarak \xfcr\xfcnlerinizin piyasaya hazır olmasını ve ger\xe7ek d\xfcnya uygulamalarında kusursuz performans g\xf6stermesini sağlar.\\n\\n## Sonu\xe7\\n\\nKısacası, Zeeis’in Ultra D\xfcş\xfck Maliyetli DDR3, DDR4, LP-DDR3 ve LP-DDR4 Bellek Test Sistemi, g\xfcvenilir, \xe7ok y\xf6nl\xfc ve uygun fiyatlı hafıza test \xe7\xf6z\xfcmlerine ihtiya\xe7 duyan bizler i\xe7in harika bir se\xe7enek. Diğer \xfcst d\xfczey sistemlerin maliyetinin \xe7ok daha altında y\xfcksek performans sunarak, şirketlerin y\xfcksek standartları korumasına olanak tanır.\\n\\nGeleceğin bellek teknolojisi i\xe7in tasarlanmış bir sistemle test yeteneklerinizi geliştirmekle ilgileniyorsanız, daha fazla bilgi i\xe7in l\xfctfen bana [i@tanshuai.com](mailto:i@tanshuai.com) adresinden ulaşın.\\n\\nİyi testler!\\n"},{"lang":"tr","group":"blog","slug":"blog/usr-bin-sudo-must-be-owned-by-uid-0-and-have-the-setuid-bit-set-on-ubuntu-20-04","frontmatter":{"title":"/usr/bin/sudo uid 0 tarafından sahiplenilmeli ve Ubuntu 20.04\'te setuid biti ayarlanmalıdır","date":"2021-10-08T13:07:25.406Z","draft":false,"author":"Tan Shuai","tags":["Ubuntu","Linux","Sudo"],"categories":["Linux"]},"content":"\\nUbuntu 20.04\'te \\"/usr/bin/sudo, uid 0 tarafından sahiplenilmeli ve setuid biti ayarlanmış olmalı\\" hata mesajıyla karşılaşırsanız, sorunu \xe7\xf6zmek i\xe7in şu adımları izleyin.\\n\\n1. \xd6ny\xfckleme işlemi sırasında, GRUB men\xfcs\xfcne erişmek i\xe7in \'ESC\' tuşuna basın.\\n\\n![GRUB Ekranı](/images/content/wx20211008-210752.png \\"GRUB Ekranı\\")\\n\\n2. İlk se\xe7eneği, “Ubuntu,” se\xe7in ve \xf6ny\xfckleme parametrelerini d\xfczenlemek i\xe7in \'e\' tuşuna basın.\\n\\n![\xd6ny\xfckleme Parametrelerini D\xfczenle](/images/content/wx20211008-210841.png \\"\xd6ny\xfckleme Parametrelerini D\xfczenle\\")\\n\\n3. Kurtarma modunda \xf6ny\xfckleme yapmak i\xe7in \'linux\' ile başlayan satıra şu stringi ekleyin:\\n\\n```bash\\nsystemd.unit=rescue.target\\n```\\n\\n4. Kurtarma modunda, `/usr/bin/sudo` i\xe7in doğru izinleri ve sahipliği geri y\xfcklemek i\xe7in şu komutu \xe7alıştırın:\\n\\n```bash\\npkexec chmod a=rx,u+ws /usr/bin/sudo\\n```\\n\\nBu komut gerekli izinleri ayarlar ve `sudo`\'nun root kullanıcı tarafından sahiplenildiğinden ve setuid bitinin ayarlanmış olduğundan emin olur.\\n\\nBu adımları izleyerek, sorunu \xe7\xf6zebilir ve Ubuntu sisteminizde `sudo` komutunun doğru şekilde \xe7alışmasını sağlayabilirsiniz.\\n\\n---\\n"},{"lang":"he","group":"blog","slug":"blog/aws-codecommit-the-githubs-large-file-storage-git-lfs-free-alternative","frontmatter":{"title":"AWS CodeCommit： האלטרנטיבה החינמית לאחסון קבצים גדולים של GitHub (Git LFS)","description":"גלו כיצד AWS CodeCommit משמש כאלטרנטיבה יעילה וחסכונית לאחסון קבצים גדולים של GitHub (Git LFS). מאמר זה מכסה את המגבלות של Git LFS, את היתרונות בשימוש ב-AWS CodeCommit לאחסון קבצים גדולים, ומספק מדריך צעד-אחר-צעד למעבר מ-Git LFS ל-CodeCommit. שפרו את תהליך הפיתוח שלכם עם התשתית המדרגית והמאובטחת של AWS.","date":"2022-02-09T00:00:00.000Z","author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["פיתוח תוכנה"],"draft":false},"content":"\\nAWS CodeCommit מציע חלופה חזקה לשירות Large File Storage (Git LFS) של GitHub, המספקת פתרון יעיל לניהול קבצים גדולים במאגרי Git שלך.\\n\\n## למה כדאי לשקול מחדש את השימוש ב-Git LFS\\n\\nבעוד Git LFS הוא בחירה פופולרית לטיפול בקבצים גדולים במאגרי Git, יש לו מגבלות ואתגרים. Git LFS דורש התקנה וניהול נוספים, מה שיכול לסבך את תהליך הפיתוח. בנוסף, העלויות של אחסון ורוחב פס הקשורות ל-Git LFS יכולות לעלות במהירות, במיוחד עבור פרויקטים עם מספר רב של קבצים גדולים או שיתוף פעולה נרחב.\\n\\n## למה שירות האחסון לקבצים גדולים של GitHub אינו מושלם\\n\\nשירות האחסון לקבצים גדולים של GitHub, אף שהוא שימושי, יש לו חסרונות מובנים. הדאגה העיקרית היא העלות הקשורה לאחסון ורוחב פס, שיכולה להיות אוסרת עבור פרויקטים גדולים יותר. בנוסף, ניהול Git LFS יכול להיות מסורבל, ודורש מהמתכנתים להתקין ולהגדיר את לקוח ה-LFS, לעקוב אחרי קבצים ספציפיים, ולהתמודד עם קונפליקטים אפשריים במיזוג הנוצרים עקב הטיפול בקבצים גדולים בנפרד משאר המאגר.\\n\\n## למה להשתמש ב-AWS CodeCommit לאחסון קבצים גדולים ב-Git\\n\\nAWS CodeCommit מספק חלופה משכנעת לאחסון קבצים גדולים במאגרי Git ללא הצורך ב-Git LFS. CodeCommit הוא שירות ניהול קוד מקור מלא המשתלב בצורה חלקה עם שירותי AWS אחרים, ומציע סקאלביליות חזקה, אבטחה ויעילות כלכלית. על ידי ניצול CodeCommit, מתכנתים יכולים להימנע מהעומס הנוסף של ניהול Git LFS תוך כדי ניצול התשתית החזקה של AWS ומודל התשלום לפי שימוש.\\n\\n## מה המגבלות של AWS CodeCommit בהשוואה ל-GitHub\\n\\nלמרות יתרונותיו, ל-AWS CodeCommit יש כמה מגבלות בהשוואה ל-GitHub. התמיכה הרחבה של קהילת GitHub, האקוסיסטם העשיר של אינטגרציות ותכונות מתקדמות כמו GitHub Actions ו-GitHub Pages לא תמיד משוכפלות במלואן ב-CodeCommit. בנוסף, מתכנתים שמורגלים בממשק המשתמש וכלי שיתוף הפעולה של GitHub עשויים למצוא שהמעבר ל-CodeCommit דורש קצת הסתגלות.\\n\\n## איך להעביר מאגר Git LFS ל-CodeCommit\\n\\nהעברת מאגר Git LFS ל-CodeCommit כרוכה במספר שלבים. ראשית, ודא שכל הקבצים הגדולים נמצאים במעקב נכון במאגר Git LFS שלך. לאחר מכן, שיבוט את המאגר והסר את תצורת המעקב של Git LFS. לאחר מכן, צור מאגר חדש ב-AWS CodeCommit ודחוף אליו את המאגר המקומי שלך. תיעוד מפורט ותסריטים זמינים להקל על התהליך, כדי להבטיח מעבר חלק ללא אובדן נתונים או הפרעות.\\n\\n## פתרון טוב יותר\\n\\nעבור צוותים ופרויקטים שתלויים בכבדות ב-Git LFS, חקר AWS CodeCommit כחלופה יכול להציע יתרונות משמעותיים. האינטגרציה החלקה של CodeCommit עם אקוסיסטם AWS, יחד עם האופי היעיל והסקאלבילי שלו, הופכים אותו לאופציה אטרקטיבית לניהול קבצים גדולים במאגרי Git. על ידי הפחתת האתגרים הקשורים ל-Git LFS, CodeCommit מאפשר לצוותי הפיתוח להתמקד בקידוד ובשיתוף פעולה, מה שמגביר את הפרודוקטיביות והחדשנות.\\n\\nלסיכום, AWS CodeCommit מספק חלופה ישימה, חסכונית ויעילה לשירות אחסון הקבצים הגדולים של GitHub. על ידי ניצול התשתית החזקה של AWS, מפתחים יכולים לנהל קבצים גדולים במאגרי Git בקלות, לייעל את זרימת העבודה שלהם ולהפחית עלויות.\\n"},{"lang":"he","group":"blog","slug":"blog/check-voltage-current-on-macos-for-power-adapter","frontmatter":{"title":"בדיקת מתח וזרם ב-MacOS עבור מתאם חשמל","meta_title":"בדיקת מתח וזרם ב-MacOS עבור מתאם חשמל","date":"2022-02-14T00:00:00.000Z","author":"Tan Shuai","tags":["MacOS","מתאם חשמל","מתח","זרם"],"categories":["MacOS"],"draft":false},"content":"\\nכשאתה משתמש ב-MacBook, ייתכן שתרצה לבדוק את המתח והזרם של מתאם החשמל. הנה דרך פשוטה לבדוק את המתח והזרם של מתאם החשמל ב-MacOS.\\n\\nפתח את Terminal.app והקלד את הפקודה:\\n\\n`ioreg -l -n AppleSmartBattery -r |grep AppleRawAdapterDetails`\\n\\nתקבל את המידע הבא הכולל זרם ומתח:\\n\\n```json\\n\\"AppleRawAdapterDetails\\" = ({\\"IsWireless\\"=No,\\"AdapterID\\"=0,\\"FamilyCode\\"=18446744073172697098,\\"Watts\\"=89,**\\"Current\\"=4450**,\\"PMUConfiguration\\"=4448,**\\"Voltage\\"=20000**})\\n"},{"lang":"he","group":"blog","slug":"blog/convert-markdown-academic-paper-pdf-macos","frontmatter":{"title":"המרת Markdown לפורמט PDF בסגנון אקדמי במהירות ב-macOS","meta_title":"המרת Markdown לפורמט PDF בסגנון אקדמי ב-macOS עם Pandoc","description":"למד כיצד להמיר מסמכי Markdown לפורמט PDF בסגנון אקדמי ב-macOS באמצעות Pandoc ו-BasicTeX. שיטה מהירה ופשוטה זו מושלמת ליצירת קבצי PDF מקצועיים למאמרים אקדמיים.","date":"2022-03-03T00:00:00.000Z","categories":["פיתוח תוכנה"],"author":"Tan Shuai","tags":["Pandoc","LaTeX","PDF","מאמר","Markdown","macOS"],"draft":false},"content":"\\nבמדריך זה, אלווה אותך בתהליך ההמרה של מסמכי Markdown ל-PDF בסגנון אקדמי על macOS באמצעות Pandoc ו-BasicTeX. השיטה הזו מהירה ופשוטה, מושלמת כאשר יש צורך ביצירת קבצי PDF הנראים מקצועיים עבור המאמרים האקדמיים שלך.\\n\\n### שלב 1: התקנת Pandoc ו-BasicTeX\\n\\nתחילה, יש להתקין את Pandoc ו-BasicTeX על מערכת macOS שלך. כך עשיתי זאת:\\n\\n1. **התקנת Pandoc**: פתח את הטרמינל והזן את הפקודה הבאה להתקנת Pandoc:\\n\\n   ```bash\\n   brew install pandoc\\n   ```\\n\\n2. **התקנת BasicTeX**: מאחר ו-MacTeX הוא די גדול, בחרתי בחבילה הקטנה יותר BasicTeX כדי לחסוך מקום. הרץ את הפקודה הזו:\\n\\n   ```bash\\n   brew install --cask basictex\\n   ```\\n\\n3. **התקנת חבילות LaTeX נפוצות**: כדי לוודא שיש לך את החבילות הנחוצות להפקת קבצי PDF, הרץ את הפקודות הבאות:\\n   ```bash\\n   sudo tlmgr update --self\\n   sudo tlmgr install collection-basic collection-latex collection-latexrecommended collection-fontsrecommended\\n   ```\\n\\n### שלב 2: הכנת קובץ Markdown שלך\\n\\nהבא, צור את קובץ ה-Markdown שלך (למשל, `paper.md`). כך הגדרתי את הקובץ שלי, כולל הכותרת, המחבר, התאריך ומידע ליצירת קשר:\\n\\n```markdown\\n---\\ntitle: \\"Your Paper Title\\"\\nsubtitle: \\"Optional Subtitle\\"\\ndate: \\\\today\\n\\nauthor: |\\n  | Your Name\\n  | your-email@tanshuai.com\\n  | www.tanshuai.com\\n---\\n\\n# Abstract\\n\\nYour abstract here.\\n\\n# Introduction\\n\\nYour introduction here.\\n\\n# Methodology\\n\\nYour methodology here.\\n\\n# Results\\n\\nYour results here.\\n\\n# Conclusion\\n\\nYour conclusion here.\\n```\\n\\n### שלב 3: המרת Markdown ל-PDF עם Pandoc\\n\\nכעת, תוכל להמיר את קובץ ה-Markdown שלך ל-PDF. השתמשתי בפקודה הבאה בטרמינל:\\n\\n```bash\\npandoc paper.md -o paper.pdf --pdf-engine=xelatex\\n```\\n\\nפקודה זו משתמשת בתבנית LaTeX ברירת המחדל של Pandoc כדי להמיר את קובץ ה-Markdown ל-PDF בסגנון אקדמי, כולל מידע ליצירת קשר של המחבר מתחת לשם שלו.\\n\\n### טיפים נוספים\\n\\n- **תבנית LaTeX מותאמת אישית**: אם אתה זקוק לעיצוב מתקדם יותר או לסגנונות ספציפיים, תוכל ליצור או להוריד תבנית LaTeX מותאמת אישית ולהשתמש בה עם Pandoc:\\n\\n  ```bash\\n  pandoc paper.md -o paper.pdf --pdf-engine=xelatex --template=your-template.tex\\n  ```\\n\\n- **מטא נתונים נוספים**: תוכל להוסיף מידע נוסף בכותרת מטא נתונים של YAML, כמו תקציר או מילות מפתח, ולהשתמש בהם בתבניות מותאמות אישית.\\n\\n### סיכום\\n\\nעל ידי ביצוע שלבים אלו, תוכל להמיר בקלות מסמכי Markdown ל-PDF בסגנון אקדמי על macOS. השימוש ב-Pandoc ו-BasicTeX הופך את התהליך הזה למהיר ויעיל, מושלם כאשר יש צורך ביצירת קבצי PDF מקצועיים. בין אם אתה מכין מאמרים אקדמיים, דוחות טכניים או מסמכים פורמליים אחרים, שיטה זו עובדת נהדר. הוספת מידע ליצירת קשר בכותרת המטא נתונים מוסיפה נופך מקצועי למסמכים שלך.\\n\\nאני מקווה שתמצא את המדריך הזה מועיל! אם יש לך שאלות או נתקלת בבעיות, אל תהסס לפנות. כתיבה מהנה!\\n"},{"lang":"he","group":"blog","slug":"blog/electron-build-tools-error-error-failed-to-run-choco-install-pywin32-yes","frontmatter":{"title":"כלי בניית אלקטרון `שגיאה שגיאה： נכשל להריץ \\"choco install pywin32 --yes\\"`","date":"2021-09-08T00:00:00.000Z","draft":false,"author":"Tan Shuai","tags":["אלקטרון","כלי בנייה","PyWin32","Chocolatey","Win32"],"categories":["פיתוח תוכנה"]},"content":"\\nבעת עבודה עם Electron Build Tools, ייתכן שתתקלו בשגיאה הקשורה להתקנת pywin32 דרך Chocolatey. זה יכול להיות מתסכל, במיוחד כאשר מדובר בתלות הכרחית לפרויקט שלכם. להלן הסבר מפורט על הבעיה ושלבים אפשריים לפתרונה.\\n\\n### השגיאה\\n\\nבעת אתחול פרויקט Electron באמצעות Electron Build Tools, ייתכן שתראו את הודעת השגיאה הבאה:\\n\\n```bash\\nE:\\\\\\\\>e init main-testing -i testing --root=e:/src/electron\\nWARN A fixable error has occurred\\n--> A required dependency \\"pywin32\\" could not be located, it probably has to be installed.\\nDo you want build-tools to try fix this for you? [y/n]: y\\n\\nRunning \\"choco install pywin32 --yes\\"\\nERROR Error: Failed to run \\"choco install pywin32 --yes\\"\\n    at spawnSyncWithLog (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:11:11)\\n    at fix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:39:9)\\n    at maybeAutoFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\maybe-auto-fix.js:13:3)\\n    at whichAndFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\which.js:10:5)\\n    at checkPlatformDependencies (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:61:7)\\n    at Object.<anonymous> (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\e-init.js:165:3)\\n    at Module._compile (internal/modules/cjs/loader.js:1072:14)\\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1101:10)\\n    at Module.load (internal/modules/cjs/loader.js:937:32)\\n    at Function.Module._load (internal/modules/cjs/loader.js:778:12)\\n```\\n\\nשגיאה זו מתרחשת בדרך כלל מכיוון שסקריפט התקנת החבילה pywin32 לא מצליח למצוא את הקבצים הדרושים בשרת המרוחק. זה גורם לשגיאת 404, שמצביעה על כך שהקובץ אינו זמין בכתובת ה-URL שצוינה.\\n\\n### הבנת השגיאה\\n\\nהחלק המרכזי בהודעת השגיאה הוא:\\n\\n```bash\\nERROR: The remote file either doesn\'t exist, is unauthorized, or is forbidden for url \'http://sourceforge.net/projects/pywin32/files/pywin32/Build%20219/pywin32-219.win-amd64-py3.9.exe/download\'. Exception calling \\"GetResponse\\" with \\"0\\" argument(s): \\"The remote server returned an error: (404) Not Found.\\"\\n```\\n\\nזה מצביע על כך שכתובת ההורדה של pywin32 כבר אינה תקפה, מה שאומר ש-Chocolatey לא יכול לאחזר את קבצי ההתקנה הנדרשים.\\n\\n### שלבי פתרון בעיות\\n\\nלהלן מספר שלבים שתוכלו לנקוט כדי לפתור בעיה זו:\\n\\n#### 1. ודאו את התקנת Chocolatey\\n\\nודאו ש-Chocolatey מותקן כראוי ומעודכן לגרסה האחרונה. ניתן לבדוק את גרסת Chocolatey שלכם עם:\\n\\n```bash\\nchoco --version\\n```\\n\\nכדי לעדכן את Chocolatey, השתמשו בפקודה:\\n\\n```bash\\nchoco upgrade chocolatey\\n```\\n\\n#### 2. התקנת pywin32 באופן ידני\\n\\nמכיוון שההתקנה האוטומטית נכשלת, נסו להתקין את pywin32 באופן ידני. ניתן להוריד את הגרסה המתאימה מדף [שחרורי pywin32 ב-GitHub](https://github.com/mhammond/pywin32/releases) ולהתקין אותה באופן ידני.\\n\\n#### 3. שינוי סקריפט ההתקנה\\n\\nאם יש לכם שליטה על סקריפט Electron Build Tools, תוכלו לשנות אותו כך שיצביע על כתובת URL תקפה עבור pywin32 או לטפל בתהליך ההתקנה הידני.\\n\\n#### 4. השתמשו במנהל חבילות חלופי\\n\\nאם Chocolatey ממשיך להיכשל, שקלו להשתמש במנהל חבילות חלופי כמו pip עבור חבילות פייתון:\\n\\n```bash\\npip install pywin32\\n```\\n\\n### דוגמה להתקנה ידנית של pywin32\\n\\n1. הורידו את מתקין pywin32 המתאים מ[הגרסאות הרשמיות ב-GitHub](https://github.com/mhammond/pywin32/releases).\\n2. הפעילו את המתקין ועקבו אחר הוראות ההתקנה.\\n3. וודאו את ההתקנה על ידי הרצת סקריפט פייתון פשוט המייבא את pywin32:\\n\\n```python\\nimport win32api\\nprint(win32api.GetVersionEx())\\n```\\n\\nהיתקלות בשגיאת \\"Failed to run `choco install pywin32 --yes`\\" יכולה להיות מכשול בתהליך הפיתוח שלכם. עם זאת, על ידי הבנת שורש הבעיה וביצוע הצעדים המפורטים לעיל, תוכלו להתגבר על הבעיה ולהמשיך בהגדרת פרויקט ה-Electron שלכם.\\n"},{"lang":"he","group":"blog","slug":"blog/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining","frontmatter":{"title":"סודות עיצוב ASIC מותאם אישית מלא לכריית ביטקוין ומטבעות קריפטו","date":"2022-05-30T00:00:00.000Z","update":"2024-08-02T00:00:00.000Z","categories":["מוליכים למחצה","ביטקוין","מטבע קריפטו","בלוקצ\'יין"],"author":"Tan Shuai","tags":["ASIC","ביטקוין","כרייה","BTC"],"draft":false,"contact":"Tan Shuai | tanshuai@btc.com | tanshuai.com"},"content":"\\n\\\\nTan Shuai  \\n[tanshuai@btc.com](mailto:tanshuai@btc.com)  \\n[tanshuai.com](https://tanshuai.com)\\n\\n---\\n\\n## תקציר\\n\\nבעולם התחרותי של כריית מטבעות קריפטוגרפיים, יעילות צריכת החשמל, ביצועי hashrate ואמינות הם חשובים ביותר. מאמר זה מתעמק בתכנון ASIC (מעגלים משולבים ייעודיים) מותאם אישית מהשורה הראשונה, וחושף סודות תעשייה ומתודולוגיות מומחים המניעים כריית ביטקוין ומטבעות קריפטוגרפיים בעלי ביצועים גבוהים. נכתב על ידי מומחה טכנולוגי מאחת מחברות הכרייה ASIC המובילות, מאמר זה משתמש בטכניקות תכנון מתקדמות, פריסה פיזית מדוקדקת ותהליכי אימות מקיפים כדי להציג את היכולות המיוחדות של ASIC מותאם אישית במקסום יעילות הכרייה והרווחיות.\\n\\n## מבוא\\n\\nההתפתחות של כריית מטבעות קריפטוגרפיים, במיוחד כריית ביטקוין, חוותה מעבר משימוש במעבדים כלליים (CPUs), FPGA ו-GPU ל-ASIC ייעודיים. ASIC אלה מציעים ביצועים ויעילות אנרגטית ללא תחרות. תכנון ASIC מותאם אישית מייצג את השיא של התפתחות זו, ומאפשר פתרונות מותאמים אישית שעומדים בדרישות הספציפיות של פעולות הכרייה.\\n\\nרוב הספרות הקיימת על תכנון ASIC לכריית מטבעות קריפטוגרפיים מגיעה מאקדמיה או ממפעלים שאינם כרייה, ולעיתים קרובות חסרים לה יישומים בעולם האמיתי. עד כה, רק כמה חברות, בעיקר סיניות (כגון MicroBT, Bitmain), פיתחו בהצלחה ASIC לכריית ביטקוין ברי שיווק. מאמר זה מבקש למלא את הפער הזה על ידי מתן תובנות שנלקחו מהפרקטיקה התעשייתית האמיתית, ומציע נקודת מבט מבוססת על מציאות מגזר הכרייה.\\n\\nכמומחה עם למעלה מעשר שנות ניסיון בתעשיית הטכנולוגיה, מחבר מאמר זה פיתח את הכורה ASIC ביטקוין המוביל בעולם (WhatsMiner), כורים LTC/DOGE ו-ETH, ושיחק תפקיד מפתח בחברות כמו MicroBT, BTC.COM ואחרות. הוא החזיק בתפקידים מרכזיים בחברות הנסחרות בנאסד\\"ק, הבורסה של הונג קונג (HKSE) והבורסה של ניו יורק (NYSE). עם ניסיון נרחב בהקמת שותפויות עם TSMC, Texas Instruments, ARM ו-Intel, הוא מביא עושר של ידע ומומחיות מעשית לתחום תכנון ASIC מותאם אישית לכריית ביטקוין ומטבעות קריפטוגרפיים.\\n\\n## מתודולוגיה ותהליך התכנון\\n\\n### פילוסופיית התכנון\\n\\nהגישה שלנו לתכנון ASIC מותאם אישית מונעת על ידי מיקוד במקסום PPA (צריכת חשמל, ביצועים ושטח), במיוחד בתנאי הפעלה במתח נמוך. סעיף זה יתאר את פילוסופיית התכנון והמתודולוגיה שלנו:\\n\\n1. **ארכיטקטורת צינור**: ניצול היתרונות המובנים של מבני צינור לאלגוריתמי כרייה, המאפיינים רשומות ושלבי לוגיקה קומבינטורית. באמצעות שימוש בארכיטקטורת צינור, אנו יכולים להתמודד ביעילות עם פעולות בתדירות גבוהה הנדרשות לכריית מטבעות קריפטוגרפיים.\\n2. **רשימת רשת והצבה ידנית**: כתיבת סקריפטים מפורטים ליצירת רשימת רשת והצבה ידנית של תאים על מנת לייעל מסלולים קריטיים. זה מאפשר שליטה מדויקת על התזמון ומפחית את ההשפעות הטפיליות.\\n3. **ספריות תאים מותאמות אישית**: פיתוח תאים מיוחדים עם מספר טרנזיסטורים אופטימלי ותכונות חסכון באנרגיה דינאמיות. תאים מותאמים אישית מתוכננים לפעול במתחים הנמוכים ביותר האפשריים, על מנת להבטיח צריכת חשמל מינימלית.\\n\\n### השגת יתרונות PPA\\n\\nאסטרטגיות מפורטות להשגת יתרונות PPA דרך עיצוב מותאם אישית:\\n\\n1. **עיצוב רישום מותאם אישית**: שימוש ברישומים מרובי ביטים ובעיצובים מבוססי latch כדי להפחית את צריכת הכוח של השעון ולשפר את זמן השאילה. רישומים מרובי ביטים מפחיתים את צריכת הכוח של עץ השעון ומקטינים את השטח הכולל.\\n2. **מיקום ידני**: הפחתת אורך החוט ואיזון זמני ההתקנה והאחיזה לשיפור הביצועים הכוללים. מיקום ידני מאפשר שליטה טובה יותר על עיכובי החיבור והפרעות הדדיות, ומשפר את שלמות האות ומפחית את צריכת הכוח.\\n3. **עיצוב תא מותאם**: תאים מותאמים אישית מעוצבים לפעול במתח נמוך יותר, להפחית את צריכת הכוח הדינמית ולהגדיל את היעילות. באמצעות התאמת עיצובי התאים לצרכים הספציפיים של אלגוריתמי הכרייה, ניתן להשיג שיפורים משמעותיים בביצועים.\\n\\n### אמינות במתח נמוך\\n\\nהבטחת האמינות של לוגיקת התזמון המותאמת אישית במתחים נמוכים כוללת:\\n\\n1. **סימולציה מדויקת**: סימולציות ברמת המעגל לאימות התנהגות התאים המותאמים אישית בתנאים ספציפיים. כלים כגון SPICE משמשים לסימולציות חשמליות מפורטות כדי להבטיח שהתאים פועלים כראוי בכל פינות PVT (תהליך, מתח, טמפרטורה).\\n2. **עקביות במיקום**: מיקום ידני להבטחת אחידות ולהפחתת השונות. על ידי שליטה בפריסה הפיזית, ניתן למזער את השפעת השונות בתהליך ולהבטיח ביצועים עקביים.\\n3. **כיול PVT מדויק**: אימות כנגד שונות בתהליך, במתח ובטמפרטורה. מבוצעים בדיקות וכיולים נרחבים להבטחת עמידות העיצוב בתנאי פעולה שונים.\\n\\n## מחקרי מקרה ותוצאות\\n\\nהצגת נתונים אמיתיים ומחקרי מקרה מהפקות מסכה מלאות:\\n\\n| פרויקט | צומת תהליך | יעילות מתח/כוח | אלגוריתם |\\n| ------- | ------------ | ------------------------ | --------- |\\n| SC      | TSMC 28nm    | 0.45V, 257J/T            | Blake2b   |\\n| DCR     | TSMC 28nm    | 0.45V, 150J/T            | Blake256  |\\n| DASH    | TSMC 16nm    | 0.38V, 6.2J/G            | X11       |\\n| BTC     | TSMC 16nm    | 0.38V, 65J/T             | SHA-256d  |\\n| BTC     | TSMC 7nm     | 0.30V, 37J/T             | SHA-256d  |\\n| BTC     | Samsung 8nm  | 0.31V, 45J/T             | SHA-256d  |\\n| BTC     | SMIC N+1     | 0.30V, 35J/T             | SHA-256d  |\\n\\nתוצאות אלו מדגימות את השיפורים המשמעותיים ביעילות ובביצועים שניתן להשיג דרך הגישה לעיצוב מותאם אישית שלנו.\\n\\n## אינטגרציה ואימות\\n\\n### סגירת תאים מעורבים\\n\\n- **אינטגרציה של תאים מותאמים אישית**: תאים מותאמים אישית משולבים עם תאים סטנדרטיים מ-TSMC וממפעלים אחרים, להבטחת תאימות וביצועים. תאים מותאמים אישית מאופיינים ומאומתים כדי להתאים לדרישות הספרייה של תאים סטנדרטיים, מה שמאפשר אינטגרציה חלקה.\\n- **אסטרטגיות סגירה**: אסטרטגיות להבטחת תאימות וביצועים חלקים כוללות בדיקות DRC (בדיקת כללי עיצוב) ו-LVS (פריסה מול סכמטיות) מפורטות, כמו גם ניתוח תזמון וכוח באמצעות כלים תעשייתיים סטנדרטיים EDA (אוטומציה לעיצוב אלקטרוני).\\n\\n\\\\n### תכנון משולב דיגיטלי ואנלוגי\\\\n\\\\n- **טכניקות לשילוב**: שילוב רכיבים דיגיטליים ואנלוגיים כדי לייעל את ביצועי השבב הכוללים. טכניקות כמו אימות אותות מעורבים וקו-סימולציה משמשות כדי להבטיח שילוב ותפקוד נכון.\\\\n- **שיטות אימות**: שיטות להבטחת עמידות בתנאי עבודה שונים כוללות ניתוח פינות, סימולציות מונטה קרלו ואימות אמינות לטיפול בהזדקנות ואלקטרומיגרציה.\\\\n\\\\n## מסקנה\\\\n\\\\nעיצוב ASIC בהתאמה אישית מלאה מציע יתרונות משמעותיים לכריית ביטקוין ומטבעות קריפטוגרפיים, ומספק ביצועים שאין דומה להם, יעילות צריכת חשמל ואמינות. על ידי חשיפת הסודות של עיצוב ASIC בהתאמה אישית ברמה הגבוהה ביותר, נייר זה מדגיש את השיטות והחידושים שמבדילים את מובילי התעשייה. ככל שכריית מטבעות קריפטוגרפיים ממשיכה להתפתח, ASIC בהתאמה אישית ישחקו תפקיד מכריע בהנעת הדור הבא של חומרת כרייה יעילה ובעלת ביצועים גבוהים.\\\\n\\\\n[גרסת PDF של הנייר](/docs/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining.pdf)\\\\n\\n"},{"lang":"he","group":"blog","slug":"blog/get-current-commit-id-of-git-and-update-to-package-json","frontmatter":{"title":"קבל את מזהה הקומיט הנוכחי של Git ועדכן ב-package.json","date":"2021-08-21T09:19:58.875Z","draft":false,"author":"Tan Shuai","tags":["Git","Package.json","Node.js"],"categories":["פיתוח תוכנה"]},"content":"\\nבפיתוח פרויקט Node.js, ייתכן שתרצה לעקוב אחר מזהה ה-commit הנוכחי של מאגר ה-Git שלך. מידע זה יכול להיות שימושי לצורכי ניפוי שגיאות, גרסאות או פריסות. דרך אחת להשיג זאת היא על ידי עדכון קובץ ה-`package.json` עם מזהה ה-commit הנוכחי במהלך תהליך הבנייה. מאמר זה ידריך אותך דרך הצעדים להשגת מזהה ה-commit הנוכחי של Git ולעדכונו לקובץ ה-`package.json` באמצעות Node.js.\\n\\n```bash\\n\\"predev\\": \\"node ./node_modules/json/lib/json.js -I -f package.json -e \\\\\\"this.commit=\'$(git rev-parse --short HEAD)\'\\\\\\"\\",\\n"},{"lang":"he","group":"blog","slug":"blog/migrate-a-github-lfs-git-large-file-storage-repository-to-aws-codecommit","frontmatter":{"title":"העברת מאגר GitHub LFS (Git Large File Storage) ל-AWS CodeCommit","date":"2022-02-09T09:36:57.481Z","draft":false,"author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["פיתוח תוכנה"]},"content":"\\n\\\\nלאחרונה העברתי אחד ממאגרי ה-GitHub שלי, המשתמש ב-Git Large File Storage (LFS), ל-AWS CodeCommit. חשבתי לשתף אתכם בתהליך למקרה שתרצו לעשות משהו דומה. הנה מדריך שלב-אחר-שלב מבוסס על ניסיוני.\\n\\n## דרישות מוקדמות\\n\\nלפני שנתחיל, ודאו שיש לכם את הכלים הבאים מותקנים:\\n\\n- Git\\n- Git LFS\\n- AWS CLI\\n\\n## מדריך שלב-אחר-שלב\\n\\n### 1. שיבוט המאגר\\n\\nראשית, שיבטו את מאגר ה-GitHub שלכם באמצעות האפשרות `--mirror`. פעולה זו יוצרת שיבוט ריק של המאגר, כולל כל הענפים והתגיות.\\n\\n```zsh\\ngit clone --mirror https://github.com/tanshuai/designs.git designs\\n```\\n\\n### 2. אימות קבצי LFS\\n\\nלאחר מכן, רשמו את כל הקבצים המנוהלים על ידי Git LFS כדי לוודא שהכל במקום.\\n\\n```zsh\\ngit lfs ls-files\\n```\\n\\nעליכם לראות משהו כזה:\\n\\n```\\ncadfa0bc9e * Brochure-Trifold-Draft.ai\\naf9b8b8a1c * Brochure-Trifold-English.ai\\n27bb5f4e61 * Brochure-Trifold.ai\\n```\\n\\n### 3. העברת קבצי LFS\\n\\nכעת, ייצאו את קבצי ה-LFS. שלב זה מבטיח שהם חלק מההיסטוריה של המאגר שלכם.\\n\\n```zsh\\ngit lfs migrate export --include=\\"*.ai\\" --everything\\n```\\n\\nתראו הודעות התקדמות כמו אלו:\\n\\n```\\nmigrate: Sorting commits: ..., done.\\nmigrate: Rewriting commits: 100% (20/20), done.\\nmaster\\t98a3c48d85... -> 82f8873b41...\\nmigrate: Updating refs: ..., done.\\nmigrate: checkout: ..., done.\\nprune: 3 local object(s), 0 retained, done.\\ncadfa0bc9e... (133 MB)\\n27bb5f4e61... (131 MB)\\naf9b8b8a1c... (130 MB), done.\\nprune: Deleting objects: 100% (3/3), done.\\n```\\n\\n### 4. ניקוי LFS\\n\\nהסירו את מידע המעקב של Git LFS והסירו את התקנת Git LFS.\\n\\n```zsh\\ngit lfs ls-files\\ngit rm .gitattributes -f\\ngit lfs uninstall\\n```\\n\\n### 5. דחיפה ל-AWS CodeCommit\\n\\nלבסוף, דחפו את המאגר שלכם ל-AWS CodeCommit.\\n\\n```zsh\\ngit push https://git-codecommit.us-east-2.amazonaws.com/v1/repos/designs --all\\n```\\n\\nזהו זה! על ידי ביצוע שלבים אלו, הצלחתי להעביר את מאגר ה-GitHub שלי שמשתמש ב-LFS ל-AWS CodeCommit. הקבצים הגדולים וההיסטוריה של המאגר נשמרו בצורה מושלמת.\\n\\n## סיכום\\n\\nהעברת מאגר GitHub המשתמש ב-Git LFS ל-AWS CodeCommit היא די פשוטה אם עוקבים אחר השלבים הנכונים. אם יש לכם שאלות או שנתקלתם בבעיות, התיעוד של [AWS CodeCommit](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) ו-[Git LFS](https://git-lfs.github.com/) הם משאבים נהדרים.\\n\\nאני מקווה שתמצאו את המדריך הזה מועיל. תכנות נעים!\\n"},{"lang":"he","group":"blog","slug":"blog/reset-restore-all-subdirectories-of-git","frontmatter":{"title":"איפוס/שחזור כל הספריות המשנה ב-Git","date":"2021-09-22T08:33:49.201Z","draft":false,"author":"Tan Shuai","tags":["Git","בקרת גרסאות"],"categories":["פיתוח תוכנה"]},"content":"\\nניהול מאגר Git באופן יעיל דורש לעיתים קרובות איפוס או שחזור של תתי-ספריות כדי לשמור על בסיס קוד נקי ומתפקד. מדריך זה מספק גישה תמציתית בשלבים לאיפוס או שחזור כל תתי-הספריות במאגר Git.\\n\\n## איפוס תתי-ספריות\\n\\nהפקודה הבאה של Git מסירה את כל הקבצים והתיקיות הלא מעוקבים מהמאגר. זה שימושי לניקוי קבצים מיותרים לפני ביצוע איפוס או שחזור.\\n\\n```bash\\ngit clean -xfdf -- .\\n```\\n\\n### פירוק הפקודה:\\n\\n- `-x`: מסיר את כל הקבצים הלא מעוקבים, כולל אלו שהתעלמו מהם ב- `.gitignore`.\\n- `-f`: מכריח את הסרת הקבצים.\\n- `-d`: מסיר תיקיות לא מעוקבות.\\n- `-- .`: מיישם את הפקודה על התיקייה הנוכחית וכל תתי-הספריות.\\n\\n## שחזור תתי-ספריות\\n\\nכדי לשחזר את כל הקבצים במאגר למצבם האחרון שנשמר, השתמש בפקודה הבאה:\\n\\n```bash\\ngit checkout {HEAD OR BRANCH} -- .\\n```\\n\\n### פירוק הפקודה:\\n\\n- `{HEAD OR BRANCH}`: החלף ב- `HEAD` לאיפוס למחויבות האחרונה או ציין שם ענף כדי לאפס לענף מסוים.\\n- `-- .`: מיישם את הפקודה על התיקייה הנוכחית וכל תתי-הספריות.\\n\\nעל ידי שימוש בפקודות אלה, אתה יכול להבטיח שמאגרך נקי מקבצים לא רצויים ושכל הקבצים שוחזרו למצבם השמור. תהליך זה עוזר בשמירה על בסיס קוד נקי ומאורגן, ומקל על שיתוף פעולה ופיתוח.\\n\\nאל תהסס להתאים מדריך זה לצרכים ולהעדפות הספציפיות שלך. למידע נוסף על פעולות Git מתקדמות, עיין ב-[תיעוד הרשמי של Git](https://git-scm.com/doc).\\n"},{"lang":"he","group":"blog","slug":"blog/ultra-low-cost-ddr3-ddr4-lpddr3-lpddr4-memory-test-system","frontmatter":{"title":"מערכת בדיקת זיכרון DDR3, DDR4, LP-DDR3 ו-LP-DDR4 בעלות נמוכה במיוחד","description":"גלה מערכת בדיקת זיכרון בעלות נמוכה במיוחד עבור טכנולוגיות DDR3, DDR4, LP-DDR3 ו-LP-DDR4. במחיר של כ-200,000 דולר אמריקאי, היא מציעה בדיקות במהירות גבוהה, רב-גוניות, תכונות מתקדמות וצריכת חשמל נמוכה. מושלמת לעסקים המחפשים פתרונות בדיקת זיכרון אמינים וחסכוניים.","date":"2024-06-01T00:00:00.000Z","categories":["מוליכים למחצה"],"author":"Tan Shuai","tags":["DDR3","DDR4","LP-DDR3","LP-DDR4","מערכת בדיקת זיכרון"],"draft":false},"content":"\\nאם אתה כמוני, תמיד מחפש פתרונות חסכוניים מבלי להתפשר על איכות, תאהב את מה שיש לי לשתף היום. בעולם הטכנולוגי המהיר שלנו, לוודא שהזיכרון של המכשירים שלנו עומד בסטנדרטים הוא קריטי. אפשרויות יוקרתיות כמו ה-T5503/T5503HS2 הן פנטסטיות, אך הן מגיעות עם תג מחיר כבד. למרבה המזל, Zeeis יצאו עם מערכת בדיקת זיכרון זולה במיוחד שאינה מתפשרת על הביצועים.\\n\\n## למה זה חשוב\\n\\nכששמעתי לראשונה על מערכת בדיקת הזיכרון של Zeeis, התעניינתי. המערכת הזו מיועדת לטפל בטכנולוגיות זיכרון DDR3, DDR4, LP-DDR3 ו-LP-DDR4. בין אם אתה עובד עם מערכות ישנות או הטכנולוגיה הכי עדכנית, המערכת הזו מכסה אותך.\\n\\n### בדיקות במהירות גבוהה\\n\\nאחד המאפיינים הבולטים הוא היכולת לתמוך בקצבי העברת נתונים הנעים בין 800 ל-3200 MT/s עבור DDR3 ו-DDR4. היא יכולה להעריך מודולי זיכרון במהירויות שעון של עד 1600 MHz. זה אומר בדיקות יסודיות ואמינות, המבטיחות שהמכשירים שלך יפעלו במיטבם.\\n\\n### רב-שימושיות\\n\\nהרב-שימושיות של המערכת הזו היא מחוללת שינוי. היא תומכת במספר תקני זיכרון, מה שהופך אותה למתאימה למגוון רחב של יישומים - מאלקטרוניקה צרכנית ועד למחשוב ביצועים גבוהים. בנוסף, היא עמידה לעתיד. כשיתפתחו טכנולוגיות זיכרון חדשות, ניתן יהיה לשדרג את המערכת בקלות לתמוך בהן.\\n\\n### יעילות כלכלית\\n\\nעכשיו, נדבר על המחיר. בכ-200,000 דולר אמריקאי, המערכת הזו מציעה החזר השקעה מצוין. היא מספיק משתלמת לעסקים קטנים ובינוניים, ומבטיחה יכולות בדיקה מעולות מבלי לשבור את הכיס.\\n\\n### מאפיינים מתקדמים\\n\\nהמערכת מגיעה עם אלגוריתמים מתקדמים לבדיקות, כולל גנרטור תבניות אלגוריתמיות משולב (ALPG). זה מבטיח הערכת זיכרון מדויקת ואמינה, כך שכל מודול עומד בסטנדרטים מחמירים של ביצועים.\\n\\n### צריכת אנרגיה נמוכה\\n\\nמה שעוד מרשים הוא צריכת האנרגיה הנמוכה שלה. היא מתאימה למגמות הנראות בטכנולוגיות זיכרון LP-DDR3 ו-LP-DDR4. על ידי פעולה במתח נמוך, היא לא רק מפחיתה את עלויות האנרגיה אלא גם ממזערת את הפליטה התרמית, מה שהופך אותה לבחירה ידידותית לסביבה.\\n\\n## למה לבחור ב-Zeeis?\\n\\n### יכולת הרחבה\\n\\nהמערכת של Zeeis מתוכננת עם מחשבה על יכולת הרחבה. כשיתפתחו טכנולוגיות זיכרון חדשות, ניתן יהיה לשדרג את המערכת בקלות, מה שמבטיח שימוש ארוך טווח ומפחית את הצורך בהחלפות תכופות.\\n\\n### תמיכה ותיעוד\\n\\nיתרון נוסף הוא התמיכה והתיעוד הנרחבים של Zeeis. בין אם אתה מקצוען מנוסה או חדש בבדיקות זיכרון, המדריכים המפורטים ושירות הלקוחות המהיר שלהם מבטיחים חוויה חלקה.\\n\\n### עמידה בדרישות השוק\\n\\nעם הביקוש הגובר לזיכרון במהירות גבוהה בכל דבר מהסמארטפונים ועד למרכזי נתונים, יש צורך בפתרון בדיקת זיכרון אמין וחסכוני. המערכת של Zeeis עונה על הדרישות האלה, ומבטיחה שהמוצרים שלך מוכנים לשוק ופועלים בצורה מושלמת ביישומים בעולם האמיתי.\\n\\n## מסקנה\\n\\nבקיצור, מערכת הבדיקות הזולה במיוחד של Zeeis עבור זיכרונות DDR3, DDR4, LP-DDR3 ו-LP-DDR4 היא אפשרות פנטסטית עבור אלו מאיתנו שזקוקים לפתרונות בדיקת זיכרון אמינים, רב-שימושיים ומשתלמים. היא מציעה ביצועים גבוהים בחלק מהעלות של מערכות יוקרתיות אחרות, ומאפשרת לחברות לשמור על סטנדרטים גבוהים מבלי לשבור את הכיס.\\n\\nאם אתם מעוניינים לשפר את יכולות הבדיקה שלכם עם מערכת המיועדת לעתיד של טכנולוגיית הזיכרון, אנא אל תהססו לפנות אליי למידע נוסף בכתובת [i@tanshuai.com](mailto:i@tanshuai.com).\\n\\nבדיקות מהנות!\\n"},{"lang":"he","group":"blog","slug":"blog/usr-bin-sudo-must-be-owned-by-uid-0-and-have-the-setuid-bit-set-on-ubuntu-20-04","frontmatter":{"title":"/usr/bin/sudo חייב להיות בבעלות uid 0 ולהגדיר את סיבית setuid ב-Ubuntu 20.04","date":"2021-10-08T13:07:25.406Z","draft":false,"author":"Tan Shuai","tags":["אובונטו","לינוקס","סודו"],"categories":["לינוקס"]},"content":"\\nאם אתה נתקל בהודעת השגיאה \\"/usr/bin/sudo must be owned by uid 0 and have the setuid bit set\\" באובונטו 20.04, בצע את הצעדים הבאים כדי לפתור את הבעיה.\\n\\n1. במהלך תהליך האתחול, לחץ על מקש ה-‘ESC’ כדי לגשת לתפריט ה-GRUB.\\n\\n![מסך GRUB](/images/content/wx20211008-210752.png \\"מסך GRUB\\")\\n\\n2. בחר באפשרות הראשונה, \\"אובונטו\\", ולחץ על מקש ה-‘e’ כדי לערוך את פרמטרי האתחול.\\n\\n![עריכת פרמטרי האתחול](/images/content/wx20211008-210841.png \\"עריכת פרמטרי האתחול\\")\\n\\n3. הוסף את המחרוזת הבאה לשורה שמתחילה ב-‘linux’ כדי לאתחל למצב חילוץ:\\n\\n```bash\\nsystemd.unit=rescue.target\\n```\\n\\n4. ברגע שאתה במצב חילוץ, בצע את הפקודה הבאה כדי לשחזר את ההרשאות והבעלות הנכונות עבור `/usr/bin/sudo`:\\n\\n```bash\\npkexec chmod a=rx,u+ws /usr/bin/sudo\\n```\\n\\nפקודה זו מגדירה את ההרשאות הנחוצות ומבטיחה ש-`sudo` יהיה בבעלות משתמש השורש עם סיבית ה-setuid מוגדרת.\\n\\nעל ידי ביצוע שלבים אלו, אמורה הבעיה להיפתר ולהחזיר את הפונקציונליות התקינה לפקודת `sudo` במערכת האובונטו שלך.\\n"}]'),o=t(2265),r=t(4410),s=t(803),l=e=>{let{searchResult:n,searchString:t,lang:a}=e,o=n.reduce((e,n)=>{let t=e.findIndex(e=>e.group===n.group);return -1===t?e.push({group:n.group,groupItems:[{frontmatter:{...n.frontmatter},slug:n.slug,content:n.content}]}):e[t].groupItems.push({frontmatter:{...n.frontmatter},slug:n.slug,content:n.content}),e},[]),l=(e,n)=>e.split(RegExp("(".concat(n,")"),"gi")).map((e,t)=>e.toLowerCase()===n.toLowerCase()?(0,i.jsx)("mark",{children:e},t):e),d=(e,n)=>{let t=null==e?void 0:e.split(RegExp("(".concat(n,")"),"gi"));return null==t?void 0:t.map((e,t)=>e.toLowerCase()===n.toLowerCase()?(0,i.jsx)("span",{className:"underline",children:e},t):e)},u=(e,n)=>{let t=(0,s.ab)(e),a=t.toLowerCase().indexOf(n.toLowerCase()),o=a;for(;o>0&&" "!==t[o-1];)o--;let r=t.substring(o,n.length+a),d=t.substring(n.length+a,n.length+a+80);return(0,i.jsxs)(i.Fragment,{children:[l(r,n),d]})};return(0,i.jsx)("div",{className:"search-wrapper-body",children:t?(0,i.jsx)("div",{className:"search-result",children:o.length>0?o.map(e=>(0,i.jsxs)("div",{className:"search-result-group",children:[(0,i.jsx)("p",{className:"search-result-group-title",children:(0,s.nR)(e.group)}),e.groupItems.map(e=>(0,i.jsxs)("div",{id:"searchItem",className:"search-result-item",children:[e.frontmatter.image&&(0,i.jsx)("div",{className:"search-result-item-image",children:(0,i.jsx)("img",{src:e.frontmatter.image,alt:e.frontmatter.title,width:100,height:100})}),(0,i.jsxs)("div",{className:"search-result-item-body",children:[(0,i.jsx)("a",{href:"".concat((0,r.b)(a,e.slug)),className:"search-result-item-title search-result-item-link",children:d(e.frontmatter.title,t)}),e.frontmatter.description&&(0,i.jsx)("p",{className:"search-result-item-description",children:d(e.frontmatter.description,t)}),e.content&&(0,i.jsx)("p",{className:"search-result-item-content",children:u(e.content,t)}),(0,i.jsxs)("div",{className:"search-result-item-taxonomies",children:[e.frontmatter.categories&&(0,i.jsxs)("div",{className:"mr-2",children:[(0,i.jsx)("svg",{width:"14",height:"14",fill:"currentColor",viewBox:"0 0 16 16",children:(0,i.jsx)("path",{d:"M11 0H3a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2 2 2 0 0 0 2-2V4a2 2 0 0 0-2-2 2 2 0 0 0-2-2zm2 3a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1V3zM2 2a1 1 0 0 1 1-1h8a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V2z"})}),e.frontmatter.categories.map((n,a)=>(0,i.jsxs)("span",{children:[d(n,t),e.frontmatter.categories&&a!==e.frontmatter.categories.length-1&&(0,i.jsx)(i.Fragment,{children:", "})]},n))]}),e.frontmatter.tags&&(0,i.jsxs)("div",{className:"mr-2",children:[(0,i.jsxs)("svg",{width:"14",height:"14",fill:"currentColor",viewBox:"0 0 16 16",children:[(0,i.jsx)("path",{d:"M3 2v4.586l7 7L14.586 9l-7-7H3zM2 2a1 1 0 0 1 1-1h4.586a1 1 0 0 1 .707.293l7 7a1 1 0 0 1 0 1.414l-4.586 4.586a1 1 0 0 1-1.414 0l-7-7A1 1 0 0 1 2 6.586V2z"}),(0,i.jsx)("path",{d:"M5.5 5a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1zm0 1a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3zM1 7.086a1 1 0 0 0 .293.707L8.75 15.25l-.043.043a1 1 0 0 1-1.414 0l-7-7A1 1 0 0 1 0 7.586V3a1 1 0 0 1 1-1v5.086z"})]}),e.frontmatter.tags.map((n,a)=>(0,i.jsxs)("span",{children:[d(n,t),e.frontmatter.tags&&a!==e.frontmatter.tags.length-1&&(0,i.jsx)(i.Fragment,{children:", "})]},n))]})]})]})]},e.slug))]},e.group)):(0,i.jsxs)("div",{className:"search-result-empty",children:[(0,i.jsxs)("svg",{className:"mx-auto",width:"42",height:"42",viewBox:"0 0 47 47",fill:"none",children:[(0,i.jsx)("path",{fillRule:"evenodd",clipRule:"evenodd",d:"M7.10368 33.9625C9.90104 36.2184 13.2988 37.6547 16.9158 38.0692C21.6958 38.617 26.5063 37.3401 30.3853 34.4939C30.4731 34.6109 30.5668 34.7221 30.6721 34.8304L41.9815 46.1397C42.5323 46.6909 43.2795 47.0007 44.0587 47.001C44.838 47.0013 45.5854 46.692 46.1366 46.1412C46.6878 45.5904 46.9976 44.8432 46.9979 44.064C46.9981 43.2847 46.6888 42.5373 46.138 41.9861L34.8287 30.6767C34.7236 30.5704 34.6107 30.4752 34.4909 30.3859C37.3352 26.5046 38.6092 21.6924 38.0579 16.912C37.6355 13.2498 36.1657 9.81322 33.8586 6.9977L31.7805 9.09214C34.0157 11.9274 35.2487 15.4472 35.2487 19.0942C35.2487 21.2158 34.8308 23.3167 34.0189 25.2769C33.207 27.2371 32.0169 29.0181 30.5167 30.5184C29.0164 32.0186 27.2354 33.2087 25.2752 34.0206C23.315 34.8325 21.2141 35.2504 19.0925 35.2504C16.9708 35.2504 14.8699 34.8325 12.9098 34.0206C11.5762 33.4682 10.3256 32.7409 9.18992 31.8599L7.10368 33.9625ZM28.9344 6.28152C26.1272 4.12516 22.671 2.93792 19.0925 2.93792C14.8076 2.93792 10.6982 4.64009 7.66829 7.66997C4.6384 10.6999 2.93623 14.8093 2.93623 19.0942C2.93623 21.2158 3.35413 23.3167 4.16605 25.2769C4.72475 26.6257 5.4625 27.8897 6.35716 29.0358L4.2702 31.1391C1.35261 27.548 -0.165546 23.0135 0.00974294 18.3781C0.19158 13.5695 2.18233 9.00695 5.58371 5.60313C8.98509 2.19932 13.5463 0.205307 18.3547 0.0200301C22.9447 -0.156832 27.4369 1.32691 31.0132 4.18636L28.9344 6.28152Z",fill:"currentColor"}),(0,i.jsx)("path",{d:"M3.13672 39.1367L38.3537 3.64355",stroke:"black",strokeWidth:"3",strokeLinecap:"round"})]}),(0,i.jsxs)("p",{className:"mt-4",children:['No results for "',(0,i.jsx)("strong",{children:t}),'"']})]})}):(0,i.jsx)("div",{className:"py-8 text-center",children:"Type something to search..."})})},d=e=>{let{lang:n}=e,[t,r]=(0,o.useState)(""),s=a.filter(e=>e.lang===n),d=performance.now(),u=(e=>{let n=RegExp("".concat(t),"gi");return""===t?[]:e.filter(e=>{var t,i,a;let o=e.frontmatter.title.toLowerCase().match(n),r=null===(t=e.frontmatter.description)||void 0===t?void 0:t.toLowerCase().match(n),s=null===(i=e.frontmatter.categories)||void 0===i?void 0:i.join(" ").toLowerCase().match(n),l=null===(a=e.frontmatter.tags)||void 0===a?void 0:a.join(" ").toLowerCase().match(n),d=e.content.toLowerCase().match(n);if(o||d||r||s||l)return e})})(s),c=((performance.now()-d)/1e3).toFixed(3);return(0,o.useEffect)(()=>{let e=document.getElementById("searchModal"),n=document.getElementById("searchInput"),t=document.getElementById("searchModalOverlay"),i=document.querySelectorAll("#searchItem");document.querySelectorAll("[data-search-trigger]").forEach(e=>{e.addEventListener("click",function(){document.getElementById("searchModal").classList.add("show"),n.focus()})}),t.addEventListener("click",function(){e.classList.remove("show")});let a=-1,o=()=>{var e;i.forEach((e,n)=>{n===a?e.classList.add("search-result-item-active"):e.classList.remove("search-result-item-active")}),null===(e=i[a])||void 0===e||e.scrollIntoView({behavior:"smooth",block:"nearest"})};document.addEventListener("keydown",function(t){if((t.metaKey||t.ctrlKey)&&"k"===t.key&&(e.classList.add("show"),n.focus(),o()),("ArrowUp"===t.key||"ArrowDown"===t.key)&&t.preventDefault(),"Escape"===t.key&&e.classList.remove("show"),"ArrowUp"===t.key&&a>0)a--;else if("ArrowDown"===t.key&&a<i.length-1)a++;else if("Enter"===t.key){let n=document.querySelector(".search-result-item-active a");n&&(null==n||n.click(),e.classList.remove("show"))}o()})},[t]),(0,i.jsxs)("div",{id:"searchModal",className:"search-modal",children:[(0,i.jsx)("div",{id:"searchModalOverlay",className:"search-modal-overlay"}),(0,i.jsxs)("div",{className:"search-wrapper",children:[(0,i.jsxs)("div",{className:"search-wrapper-header",children:[(0,i.jsxs)("label",{htmlFor:"searchInput",className:"absolute left-7 top-[calc(50%-7px)]",children:[(0,i.jsx)("span",{className:"sr-only",children:"search icon"}),t?(0,i.jsx)("svg",{onClick:()=>r(""),viewBox:"0 0 512 512",height:"18",width:"18",className:"hover:text-red-500 cursor-pointer -mt-0.5",children:(0,i.jsx)("path",{fill:"currentcolor",d:"M256 512A256 256 0 10256 0a256 256 0 100 512zM175 175c9.4-9.4 24.6-9.4 33.9.0l47 47 47-47c9.4-9.4 24.6-9.4 33.9.0s9.4 24.6.0 33.9l-47 47 47 47c9.4 9.4 9.4 24.6.0 33.9s-24.6 9.4-33.9.0l-47-47-47 47c-9.4 9.4-24.6 9.4-33.9.0s-9.4-24.6.0-33.9l47-47-47-47c-9.4-9.4-9.4-24.6.0-33.9z"})}):(0,i.jsx)("svg",{viewBox:"0 0 512 512",height:"18",width:"18",className:"-mt-0.5",children:(0,i.jsx)("path",{fill:"currentcolor",d:"M416 208c0 45.9-14.9 88.3-40 122.7L502.6 457.4c12.5 12.5 12.5 32.8.0 45.3s-32.8 12.5-45.3.0L330.7 376c-34.4 25.2-76.8 40-122.7 40C93.1 416 0 322.9.0 208S93.1.0 208 0 416 93.1 416 208zM208 352a144 144 0 100-288 144 144 0 100 288z"})})]}),(0,i.jsx)("input",{id:"searchInput",placeholder:"Search...",className:"search-wrapper-header-input",type:"input",name:"search",value:t,onChange:e=>{r(e.currentTarget.value.replace("\\","").toLowerCase())},autoFocus:!0,autoComplete:"off"})]}),(0,i.jsx)(l,{searchResult:u,searchString:t,lang:n}),(0,i.jsxs)("div",{className:"search-wrapper-footer",children:[(0,i.jsxs)("span",{className:"flex items-center",children:[(0,i.jsx)("kbd",{children:(0,i.jsx)("svg",{width:"14",height:"14",fill:"currentcolor",viewBox:"0 0 16 16",children:(0,i.jsx)("path",{d:"M3.204 11h9.592L8 5.519 3.204 11zm-.753-.659 4.796-5.48a1 1 0 011.506.0l4.796 5.48c.566.647.106 1.659-.753 1.659H3.204a1 1 0 01-.753-1.659z"})})}),(0,i.jsx)("kbd",{children:(0,i.jsx)("svg",{width:"14",height:"14",fill:"currentcolor",viewBox:"0 0 16 16",children:(0,i.jsx)("path",{d:"M3.204 5h9.592L8 10.481 3.204 5zm-.753.659 4.796 5.48a1 1 0 001.506.0l4.796-5.48c.566-.647.106-1.659-.753-1.659H3.204a1 1 0 00-.753 1.659z"})})}),"to navigate"]}),(0,i.jsxs)("span",{className:"flex items-center",children:[(0,i.jsx)("kbd",{children:(0,i.jsx)("svg",{width:"12",height:"12",fill:"currentcolor",viewBox:"0 0 16 16",children:(0,i.jsx)("path",{fillRule:"evenodd",d:"M14.5 1.5a.5.5.0 01.5.5v4.8a2.5 2.5.0 01-2.5 2.5H2.707l3.347 3.346a.5.5.0 01-.708.708l-4.2-4.2a.5.5.0 010-.708l4-4a.5.5.0 11.708.708L2.707 8.3H12.5A1.5 1.5.0 0014 6.8V2a.5.5.0 01.5-.5z"})})}),"to select"]}),t&&(0,i.jsxs)("span",{children:[(0,i.jsxs)("strong",{children:[u.length," "]})," results - in"," ",(0,i.jsxs)("strong",{children:[c," "]})," seconds"]}),(0,i.jsxs)("span",{children:[(0,i.jsx)("kbd",{children:"ESC"})," to close"]})]})]})]})}},5045:function(e,n,t){"use strict";t.d(n,{default:function(){return p}});var i=t(7437),a=t(5159);let o={fa:t(3872)},r=e=>o[[...e].reduce((n,t,i)=>t===t.toUpperCase()&&""===n&&i>0?e.slice(0,i).toLowerCase():n,"")];var s=e=>{let{icon:n,...t}=e,a=r(n),o=a?a[n]:void 0;return o?(0,i.jsx)(o,{...t}):(0,i.jsx)("span",{className:"text-sm",children:"Icon not found"})},l=e=>{let{source:n,className:t}=e;return(0,i.jsx)("ul",{className:t,children:n.map(e=>(0,i.jsx)("li",{children:(0,i.jsxs)("a",{"aria-label":e.name,href:e.link,target:"_blank",rel:"noopener noreferrer nofollow",children:[(0,i.jsx)("span",{className:"sr-only",children:e.name}),(0,i.jsx)(s,{className:"inline-block",icon:e.icon})]})},e.name))})},d=t(145),u=JSON.parse('{"D":[{"name":"github","icon":"FaGithub","link":"https://www.github.com/tanshuai"},{"name":"linkedin","icon":"FaLinkedin","link":"https://www.linkedin.com/in/tanshuai"}]}'),c=t(4410),m=t(803),g=t(8755),p=e=>{let{lang:n,menu:t}=e,o="&copy;"+d.f.ly+"-"+new Date().getFullYear().toString()+" "+d.f.iF;return(0,i.jsxs)("footer",{className:"bg-theme-light dark:bg-darkmode-theme-light",children:[(0,i.jsx)("div",{className:"container",children:(0,i.jsxs)("div",{className:"row items-center py-10",children:[(0,i.jsx)("div",{className:"mb-8 text-center lg:col-3 lg:mb-0 lg:text-left",children:(0,i.jsx)(a.Z,{lang:n})}),(0,i.jsx)("div",{className:"mb-8 text-center lg:col-6 lg:mb-0",children:(0,i.jsx)("ul",{children:t.footer.map(e=>(0,i.jsx)("li",{className:"m-3 inline-block",children:(0,i.jsx)(g.Z,{href:(0,c.b)(n,e.url),children:e.name})},e.name))})}),(0,i.jsx)("div",{className:"mb-8 text-center lg:col-3 lg:mb-0 lg:mt-0 lg:text-right",children:(0,i.jsx)(l,{source:u.D,className:"social-icons"})})]})}),(0,i.jsx)("div",{className:"border-t border-border py-7 dark:border-darkmode-border",children:(0,i.jsxs)("div",{className:"container text-center text-light dark:text-darkmode-light",children:[(0,i.jsx)("p",{dangerouslySetInnerHTML:(0,m.gI)(o)}),d.f.k1&&(0,i.jsx)("p",{children:(0,i.jsx)("a",{href:"http://beian.miit.gov.cn",target:"_blank",rel:"noopener noreferrer",children:d.f.k1})})]})})]})}},7743:function(e,n,t){"use strict";t.d(n,{default:function(){return v}});var i=t(7437),a=t(145),o=t(7812),r=t(943),s=t(4410),l=t(6463),d=t(2265),u=t(8755);function c(e){var n;let{className:t,lang:c}=e;(0,d.useMemo)(r.Mb,[]);let[m,g]=(0,d.useState)(c);(0,l.useRouter)();let p=(0,l.usePathname)(),[h,f]=(0,d.useState)(!1),[k,b]=(0,d.useState)(c),v=e=>{b(e),g(e),f(!1)},y=(e,n)=>{if(!a.settings.default_language_in_subdir)return(0,s.b)(e,n);{let t=n.split("/");return t[1]=e,t.join("/")}};return(0,i.jsxs)("div",{className:"".concat(t),children:[(0,i.jsx)("div",{className:"dropdown-selection cursor-pointer px-2 py-2 text-md text-center w-20 select-none whitespace-nowrap",onClick:()=>f(!h),onMouseEnter:()=>f(!0),onMouseLeave:()=>f(!1),children:null===(n=o.find(e=>e.languageCode.toLowerCase()===k))||void 0===n?void 0:n.languageName}),(0,i.jsx)("ul",{onMouseEnter:()=>f(!0),onMouseLeave:()=>f(!1),style:{maxHeight:"calc(100vh - 120px)"},className:"".concat(h?"visible":"invisible"," dropdown-menu absolute z-100 bg-theme-light whitespace-nowrap text-dark dark:bg-darkmode-theme-light dark:text-darkmode-dark overflow-y-auto"),children:o.filter(e=>!/\/(tags|categories|authors)\/.+/g.test(p)||e.languageCode===c).map(e=>(0,i.jsx)("li",{className:"dropdown-item",children:(0,i.jsx)(u.Z,{hrefLang:e.languageCode.toLowerCase(),href:y(e.languageCode.toLowerCase(),p),className:"block rounded px-2 py-2 text-center w-20 text-sm",onClick:()=>v(e.languageCode.toLowerCase()),children:e.languageName})},e.languageCode))})]})}var m=t(5159),g=t(9512);let p=e=>{let{fill:n}=e;return(0,i.jsx)("svg",{className:"",viewBox:"0 0 56 56",fill:n||"#000",height:"20",width:"20",children:(0,i.jsx)("path",{d:"M30 4.6c0-1-.9-2-2-2a2 2 0 0 0-2 2v5c0 1 .9 2 2 2s2-1 2-2Zm9.6 9a2 2 0 0 0 0 2.8c.8.8 2 .8 2.9 0L46 13a2 2 0 0 0 0-2.9 2 2 0 0 0-3 0Zm-26 2.8c.7.8 2 .8 2.8 0 .8-.7.8-2 0-2.9L13 10c-.7-.7-2-.8-2.9 0-.7.8-.7 2.1 0 3ZM28 16a12 12 0 0 0-12 12 12 12 0 0 0 12 12 12 12 0 0 0 12-12 12 12 0 0 0-12-12Zm23.3 14c1.1 0 2-.9 2-2s-.9-2-2-2h-4.9a2 2 0 0 0-2 2c0 1.1 1 2 2 2ZM4.7 26a2 2 0 0 0-2 2c0 1.1.9 2 2 2h4.9c1 0 2-.9 2-2s-1-2-2-2Zm37.8 13.6a2 2 0 0 0-3 0 2 2 0 0 0 0 2.9l3.6 3.5a2 2 0 0 0 2.9 0c.8-.8.8-2.1 0-3ZM10 43.1a2 2 0 0 0 0 2.9c.8.7 2.1.8 3 0l3.4-3.5c.8-.8.8-2.1 0-2.9-.8-.8-2-.8-2.9 0Zm20 3.4c0-1.1-.9-2-2-2a2 2 0 0 0-2 2v4.9c0 1 .9 2 2 2s2-1 2-2Z"})})},h=e=>{let{fill:n}=e;return(0,i.jsx)("svg",{className:"",viewBox:"0 0 24 24",fill:"none",height:"20",width:"20",children:(0,i.jsx)("path",{fill:n||"#000",fillRule:"evenodd",clipRule:"evenodd",d:"M8.2 2.2c1-.4 2 .6 1.6 1.5-1 3-.4 6.4 1.8 8.7a8.4 8.4 0 0 0 8.7 1.8c1-.3 2 .5 1.5 1.5v.1a10.3 10.3 0 0 1-9.4 6.2A10.3 10.3 0 0 1 3.2 6.7c1-2 2.9-3.5 4.9-4.4Z"})})},f=e=>{let{fill:n}=e;return(0,i.jsxs)("svg",{className:"".concat("#000"===n?"text-white":"text-black"),viewBox:"0 0 19 17",fill:n||"#fff",height:"19",width:"19",stroke:"currentColor",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round",children:[(0,i.jsx)("rect",{x:"3",y:"3",width:"14",height:"10",rx:"2",ry:"2"}),(0,i.jsx)("line",{x1:"7",y1:"17",x2:"13",y2:"17"}),(0,i.jsx)("line",{x1:"10",y1:"13",x2:"10",y2:"17"})]})};var k=e=>{let{className:n,lang:t}=e,{theme_switcher:o}=a.settings,[r,s]=(0,d.useState)(!1),[l,u]=(0,d.useState)(!1),{theme:c,setTheme:m,resolvedTheme:k}=(0,g.F)();(0,d.useEffect)(()=>s(!0),[]);let b=e=>{m(e),u(!1)};return(0,i.jsx)(i.Fragment,{children:o&&r&&(0,i.jsxs)("div",{className:"theme-label ".concat(n," w-5 h-5 flex-row relative justify-center items-center"),onClick:()=>u(!l),onMouseEnter:()=>u(!0),onMouseLeave:()=>u(!1),children:["light"===c?(0,i.jsx)(p,{}):"dark"===c?(0,i.jsx)(h,{fill:"light"!==k?"#fff":""}):(0,i.jsx)(f,{fill:"light"!==k?"#000":""}),(0,i.jsx)("ul",{onMouseEnter:()=>u(!0),onMouseLeave:()=>u(!1),className:"".concat(l?"visible":"invisible"," dropdown-menu absolute right-0 translate-x-2 top-full z-100 bg-theme-light whitespace-nowrap text-dark dark:bg-darkmode-theme-light dark:text-darkmode-dark"),children:[{label:"light",label_zh:"浅色"},{label:"dark",label_zh:"深色"},{label:"system",label_zh:"系统"}].map((e,n)=>(0,i.jsx)("li",{className:"dropdown-item",children:(0,i.jsxs)("div",{className:"block rounded px-2 py-2 text-center text-md inline-flex flex-row justify-center items-center",onClick:()=>b(e.label),children:["light"===e.label?(0,i.jsx)(p,{fill:"light"!==k?"#fff":""}):"dark"===e.label?(0,i.jsx)(h,{fill:"light"!==k?"#fff":""}):(0,i.jsx)(f,{fill:"light"!==k?"#000":""}),(0,i.jsx)("div",{className:"ml-3",children:t.includes("zh")?e.label_zh:e.label})]})},n))})]})})},b=t(5097),v=e=>{let{lang:n,menu:t}=e,o=(0,r.qz)(),{main:g}=t,{navigation_button:p,settings:h}=a,f=(0,l.usePathname)();return(0,d.useEffect)(()=>{window.scroll(0,0)},[f]),(0,i.jsx)("header",{className:"header z-30 ".concat(h.sticky_header&&"sticky top-0"),children:(0,i.jsxs)("nav",{className:"navbar container",children:[(0,i.jsx)("div",{className:"order-0",children:(0,i.jsx)(m.Z,{lang:n})}),(0,i.jsx)("input",{id:"nav-toggle",type:"checkbox",className:"hidden"}),(0,i.jsxs)("label",{htmlFor:"nav-toggle",className:"order-3 cursor-pointer flex items-center lg:hidden text-dark dark:text-white lg:order-1",children:[(0,i.jsxs)("svg",{id:"show-button",className:"h-6 fill-current block",viewBox:"0 0 20 20",children:[(0,i.jsx)("title",{children:"Menu Open"}),(0,i.jsx)("path",{d:"M0 3h20v2H0V3z m0 6h20v2H0V9z m0 6h20v2H0V0z"})]}),(0,i.jsxs)("svg",{id:"hide-button",className:"h-6 fill-current hidden",viewBox:"0 0 20 20",children:[(0,i.jsx)("title",{children:"Menu Close"}),(0,i.jsx)("polygon",{points:"11 9 22 9 22 11 11 11 11 22 9 22 9 11 -2 11 -2 9 9 9 9 -2 11 -2",transform:"rotate(45 10 10)"})]})]}),(0,i.jsxs)("ul",{id:"nav-menu",className:"navbar-nav order-3 hidden w-full pb-6 lg:order-1 lg:flex lg:w-auto lg:space-x-2 lg:pb-0 xl:space-x-8",children:[g.map((e,t)=>{var a,o,r;return(0,i.jsx)(d.Fragment,{children:e.hasChildren?(0,i.jsxs)("li",{className:"nav-item nav-dropdown group relative",children:[(0,i.jsxs)("span",{className:"nav-link inline-flex items-center ".concat((null===(a=e.children)||void 0===a?void 0:a.map(e=>{let{url:n}=e;return n}).includes(f))||(null===(o=e.children)||void 0===o?void 0:o.map(e=>{let{url:n}=e;return"".concat(n,"/")}).includes(f))?"active":""),children:[e.name,(0,i.jsx)("svg",{className:"h-4 w-4 fill-current",viewBox:"0 0 20 20",children:(0,i.jsx)("path",{d:"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"})})]}),(0,i.jsx)("ul",{className:"nav-dropdown-list hidden group-hover:block lg:invisible lg:absolute lg:block lg:opacity-0 lg:group-hover:visible lg:group-hover:opacity-100",children:null===(r=e.children)||void 0===r?void 0:r.map((e,t)=>(0,i.jsx)("li",{className:"nav-dropdown-item",children:(0,i.jsx)(u.Z,{href:(0,s.b)(n,e.url),className:"nav-dropdown-link block ".concat((f==="".concat(e.url,"/")||f===e.url)&&"active"),children:e.name})},"children-".concat(t)))})]}):(0,i.jsx)("li",{className:"nav-item",children:(0,i.jsx)(u.Z,{href:(0,s.b)(n,e.url),className:"nav-link block ".concat((f==="".concat(e.url,"/")||f===e.url)&&"active"),children:e.name})})},"menu-".concat(t))}),p.enable&&(0,i.jsx)("li",{className:"mt-4 inline-block lg:hidden",children:(0,i.jsx)(u.Z,{className:"btn btn-outline-primary btn-sm",href:p.link,children:p.label})})]}),(0,i.jsxs)("div",{className:"order-1 ml-auto flex items-center md:order-2 lg:ml-0",children:[h.search&&(0,i.jsx)("button",{className:"border-border text-dark hover:text-primary dark:border-darkmode-border mr-5 inline-block border-r pr-5 text-xl dark:text-white dark:hover:text-darkmode-primary","aria-label":"search","data-search-trigger":!0,children:(0,i.jsx)(b.eaK,{})}),(0,i.jsx)(k,{className:"mr-5",lang:n}),o.length>1&&(0,i.jsx)(c,{lang:n,className:"mr-3 bg-theme-light dark:bg-darkmode-theme-light dark:text-darkmode-dark rounded"}),p.enable&&(0,i.jsx)(u.Z,{className:"btn btn-outline-primary btn-sm hidden lg:inline-block",href:p.link,children:p.label})]})]})})}},8958:function(e,n,t){"use strict";var i=t(7437),a=t(145),o=t(9512);n.default=e=>{let{children:n}=e,{default_theme:t}=a.settings;return(0,i.jsx)(o.f,{attribute:"class",defaultTheme:t,enableColorScheme:!1,children:n})}},943:function(e,n,t){"use strict";t.d(n,{FC:function(){return r},Mb:function(){return l},qz:function(){return s}});var i=t(145),a=t(7812);let o=i.settings.disable_languages,r=async e=>{let n=await t(3759)("./menu.".concat(e,".json")),i=await t(8621)("./".concat(e,".json"));return{...n,...i}},s=()=>a.filter(e=>!o.includes(e.languageCode)),l=()=>i.settings.default_language},4410:function(e,n,t){"use strict";t.d(n,{b:function(){return o}});var i=t(145),a=t(943);function o(e,n){let t=(0,a.Mb)(),o=(0,a.qz)();e=e!==t||i.settings.default_language_in_subdir?e.replace(/^\/|\/$/g,""):"";let r=RegExp("(".concat(o.map(e=>"^/".concat(e.languageCode)).join("|"),")"),"g");return n=n.replace(r,"").replace(/^\/|\/$/g,""),i.site.Yw&&(n=encodeURI(encodeURI(n)))&&!/\/$/.test(n)&&(n+="/"),""!==e&&(e="/".concat(e)),"".concat(i.site.Yw&&i.site.Km?i.site.Km:"").concat(e,"/").concat(n)}},803:function(e,n,t){"use strict";t.d(n,{OI:function(){return o},ab:function(){return s},gI:function(){return a},nR:function(){return r}}),t(7727);var i=t(2266);let a=(e,n)=>({__html:n?i.TU.parse(e):i.TU.parseInline(e)}),o=e=>{let n;try{n=decodeURI(decodeURI(e))}catch(t){console.error("Failed to decode URI component",t),n=e}return n.replace(/^[\s_]+|[\s_]+$/g,"").replace(/[_\s]+/g," ").replace(/^[a-z]/,function(e){return e.toUpperCase()})},r=e=>o(e).split(" ").map(e=>e.charAt(0).toUpperCase()+e.slice(1)).join(" "),s=e=>l(i.TU.parse(e).replace(/<\/?[^>]+(>|$)/gm,"").replace(/[\r\n]\s*[\r\n]/gm,"")),l=e=>{let n={"&nbsp;":" ","&lt;":"<","&gt;":">","&amp;":"&","&quot;":'"',"&#39;":"'"};return e.replace(/(&amp;|&lt;|&gt;|&quot;|&#39;)/g,e=>n[e])}},9512:function(e,n,t){"use strict";t.d(n,{F:function(){return d},f:function(){return u}});var i=t(2265),a=["light","dark"],o="(prefers-color-scheme: dark)",r="undefined"==typeof window,s=i.createContext(void 0),l={setTheme:e=>{},themes:[]},d=()=>{var e;return null!=(e=i.useContext(s))?e:l},u=e=>i.useContext(s)?e.children:i.createElement(m,{...e}),c=["light","dark"],m=e=>{let{forcedTheme:n,disableTransitionOnChange:t=!1,enableSystem:r=!0,enableColorScheme:l=!0,storageKey:d="theme",themes:u=c,defaultTheme:m=r?"system":"light",attribute:k="data-theme",value:b,children:v,nonce:y}=e,[S,C]=i.useState(()=>p(d,m)),[D,j]=i.useState(()=>p(d)),w=b?Object.values(b):u,A=i.useCallback(e=>{let n=e;if(!n)return;"system"===e&&r&&(n=f());let i=b?b[n]:n,o=t?h():null,s=document.documentElement;if("class"===k?(s.classList.remove(...w),i&&s.classList.add(i)):i?s.setAttribute(k,i):s.removeAttribute(k),l){let e=a.includes(m)?m:null,t=a.includes(n)?n:e;s.style.colorScheme=t}null==o||o()},[]),T=i.useCallback(e=>{let n="function"==typeof e?e(e):e;C(n);try{localStorage.setItem(d,n)}catch(e){}},[n]),z=i.useCallback(e=>{j(f(e)),"system"===S&&r&&!n&&A("system")},[S,n]);i.useEffect(()=>{let e=window.matchMedia(o);return e.addListener(z),z(e),()=>e.removeListener(z)},[z]),i.useEffect(()=>{let e=e=>{e.key===d&&T(e.newValue||m)};return window.addEventListener("storage",e),()=>window.removeEventListener("storage",e)},[T]),i.useEffect(()=>{A(null!=n?n:S)},[n,S]);let G=i.useMemo(()=>({theme:S,setTheme:T,forcedTheme:n,resolvedTheme:"system"===S?D:S,themes:r?[...u,"system"]:u,systemTheme:r?D:void 0}),[S,T,n,D,r,u]);return i.createElement(s.Provider,{value:G},i.createElement(g,{forcedTheme:n,disableTransitionOnChange:t,enableSystem:r,enableColorScheme:l,storageKey:d,themes:u,defaultTheme:m,attribute:k,value:b,children:v,attrs:w,nonce:y}),v)},g=i.memo(e=>{let{forcedTheme:n,storageKey:t,attribute:r,enableSystem:s,enableColorScheme:l,defaultTheme:d,value:u,attrs:c,nonce:m}=e,g="system"===d,p="class"===r?"var d=document.documentElement,c=d.classList;".concat("c.remove(".concat(c.map(e=>"'".concat(e,"'")).join(","),")"),";"):"var d=document.documentElement,n='".concat(r,"',s='setAttribute';"),h=l?(a.includes(d)?d:null)?"if(e==='light'||e==='dark'||!e)d.style.colorScheme=e||'".concat(d,"'"):"if(e==='light'||e==='dark')d.style.colorScheme=e":"",f=function(e){let n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],t=!(arguments.length>2)||void 0===arguments[2]||arguments[2],i=u?u[e]:e,o=n?e+"|| ''":"'".concat(i,"'"),s="";return l&&t&&!n&&a.includes(e)&&(s+="d.style.colorScheme = '".concat(e,"';")),"class"===r?n||i?s+="c.add(".concat(o,")"):s+="null":i&&(s+="d[s](n,".concat(o,")")),s},k=n?"!function(){".concat(p).concat(f(n),"}()"):s?"!function(){try{".concat(p,"var e=localStorage.getItem('").concat(t,"');if('system'===e||(!e&&").concat(g,")){var t='").concat(o,"',m=window.matchMedia(t);if(m.media!==t||m.matches){").concat(f("dark"),"}else{").concat(f("light"),"}}else if(e){").concat(u?"var x=".concat(JSON.stringify(u),";"):"").concat(f(u?"x[e]":"e",!0),"}").concat(g?"":"else{"+f(d,!1,!1)+"}").concat(h,"}catch(e){}}()"):"!function(){try{".concat(p,"var e=localStorage.getItem('").concat(t,"');if(e){").concat(u?"var x=".concat(JSON.stringify(u),";"):"").concat(f(u?"x[e]":"e",!0),"}else{").concat(f(d,!1,!1),";}").concat(h,"}catch(t){}}();");return i.createElement("script",{nonce:m,dangerouslySetInnerHTML:{__html:k}})}),p=(e,n)=>{let t;if(!r){try{t=localStorage.getItem(e)||void 0}catch(e){}return t||n}},h=()=>{let e=document.createElement("style");return e.appendChild(document.createTextNode("*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}")),document.head.appendChild(e),()=>{window.getComputedStyle(document.body),setTimeout(()=>{document.head.removeChild(e)},1)}},f=e=>(e||(e=window.matchMedia(o)),e.matches?"dark":"light")},1810:function(e,n,t){"use strict";t.d(n,{w_:function(){return u}});var i=t(2265),a={color:void 0,size:void 0,className:void 0,style:void 0,attr:void 0},o=i.createContext&&i.createContext(a),r=["attr","size","title"];function s(){return(s=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e}).apply(this,arguments)}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,i)}return t}function d(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach(function(n){var i,a;i=n,a=t[n],(i=function(e){var n=function(e,n){if("object"!=typeof e||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var i=t.call(e,n||"default");if("object"!=typeof i)return i;throw TypeError("@@toPrimitive must return a primitive value.")}return("string"===n?String:Number)(e)}(e,"string");return"symbol"==typeof n?n:n+""}(i))in e?Object.defineProperty(e,i,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[i]=a}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function u(e){return n=>i.createElement(c,s({attr:d({},e.attr)},n),function e(n){return n&&n.map((n,t)=>i.createElement(n.tag,d({key:t},n.attr),e(n.child)))}(e.child))}function c(e){var n=n=>{var t,{attr:a,size:o,title:l}=e,u=function(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t={};for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i)){if(n.indexOf(i)>=0)continue;t[i]=e[i]}return t}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],!(n.indexOf(t)>=0)&&Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}(e,r),c=o||n.size||"1em";return n.className&&(t=n.className),e.className&&(t=(t?t+" ":"")+e.className),i.createElement("svg",s({stroke:"currentColor",fill:"currentColor",strokeWidth:"0"},n.attr,a,u,{className:t,style:d(d({color:e.color||n.color},n.style),e.style),height:c,width:c,xmlns:"http://www.w3.org/2000/svg"}),l&&i.createElement("title",null,l),e.children)};return void 0!==o?i.createElement(o.Consumer,null,e=>n(e)):n(a)}},145:function(e){"use strict";e.exports=JSON.parse('{"site":{"title":"Tan Shuai","base_url":"https://tanshuai.com","Km":"","Yw":true,"logo":"","logo_darkmode":"","logo_width":"150","logo_height":"27","logo_text":"Tan Shuai"},"settings":{"search":true,"sticky_header":true,"theme_switcher":true,"default_theme":"light","pagination":2,"summary_length":200,"blog_folder":"blog","default_language":"en","disable_languages":[],"default_language_in_subdir":false},"f":{"ly":"2001","iF":"tanshuai.com","k1":""},"navigation_button":{"enable":false,"label":"Get Started","link":"https://tanshuai.com"},"disqus":{"enable":false,"shortname":"themefisher-template","settings":{}},"metadata":{"meta_author":"Tan Shuai","meta_image":"/images/og-image.png","meta_description":"Tan Shuai (tanshuai)"}}')},7812:function(e){"use strict";e.exports=JSON.parse('[{"languageName":"English","languageCode":"en","contentDir":"english","title":"Tan Shuai (tanshuai)","weight":1},{"languageName":"繁體中文","languageCode":"zh-hant","contentDir":"traditional_chinese","title":"譚帥 - Tan Shuai (tanshuai)","weight":1},{"languageName":"简体中文","languageCode":"zh","contentDir":"chinese","title":"谭帅 - Tan Shuai (tanshuai)","weight":1},{"languageName":"日本語","languageCode":"ja","contentDir":"japanese","title":"タン・シュアイ - Tan Shuai (tanshuai)","weight":1},{"languageName":"Deutsch","languageCode":"de","contentDir":"german","title":"Tan Shuai (tanshuai)","weight":1},{"languageName":"Fran\xe7ais","languageCode":"fr","contentDir":"french","title":"Tan Shuai (tanshuai)","weight":1},{"languageName":"Русский","languageCode":"ru","contentDir":"russian","title":"Тан Шуай - Tan Shuai (tanshuai)","weight":1},{"languageName":"Espa\xf1ol","languageCode":"es","contentDir":"spanish","title":"Tan Shuai (tanshuai)","weight":1},{"languageName":"한국어","languageCode":"ko","contentDir":"korean","title":"탄 슈아이 - Tan Shuai (tanshuai)","weight":1},{"languageName":"ภาษาไทย","languageCode":"th","contentDir":"thai","title":"ทัน ชว่าย - Tan Shuai (tanshuai)","weight":1},{"languageName":"Tiếng Việt","languageCode":"vi","contentDir":"vietnamese","title":"Tan Shuai (tanshuai)","weight":1},{"languageName":"عربي","languageCode":"ar","contentDir":"arabic","title":"تان شواي - Tan Shuai (tanshuai)","weight":1},{"languageName":"Portugu\xeas","languageCode":"pt","contentDir":"portuguese","title":"Tan Shuai (tanshuai)","weight":1},{"languageName":"Italiano","languageCode":"it","contentDir":"italian","title":"Tan Shuai (tanshuai)","weight":1},{"languageName":"Nederlands","languageCode":"nl","contentDir":"dutch","title":"Tan Shuai (tanshuai)","weight":1},{"languageName":"Svenska","languageCode":"sv","contentDir":"swedish","title":"Tan Shuai (tanshuai)","weight":1},{"languageName":"Norsk","languageCode":"no","contentDir":"norwegian","title":"Tan Shuai (tanshuai)","weight":1},{"languageName":"Dansk","languageCode":"da","contentDir":"danish","title":"Tan Shuai (tanshuai)","weight":1},{"languageName":"Suomi","languageCode":"fi","contentDir":"finnish","title":"Tan Shuai (tanshuai)","weight":1},{"languageName":"T\xfcrk\xe7e","languageCode":"tr","contentDir":"turkish","title":"Tan Shuai (tanshuai)","weight":1},{"languageName":"עברית","languageCode":"he","contentDir":"hebrew","title":"תאן שואי - Tan Shuai (tanshuai)","weight":1}]')}},function(e){e.O(0,[5706,7240,8056,4673,2971,7023,1744],function(){return e(e.s=352)}),_N_E=e.O()}]);